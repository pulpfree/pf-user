exports[`components <LoginForm /> matches snapshot 1`] = `
ShallowWrapper {
  "complexSelector": ComplexSelector {
    "buildPredicate": [Function],
    "childrenOfNode": [Function],
    "findWhereUnwrapped": [Function],
  },
  "length": 1,
  "node": <div
    style={
        Object {
            "margin": "auto",
            "width": 400,
          }
    }>
    <function Paper() {
        (0, _classCallCheck3.default)(this, Paper);
        return (0, _possibleConstructorReturn3.default)(this, (Paper.__proto__ || (0, _getPrototypeOf2.default)(Paper)).apply(this, arguments));
      }
        circle={false}
        rounded={true}
        style={
            Object {
                "padding": 35,
              }
        }
        transitionEnabled={true}
        zDepth={1}>
        <form
            onSubmit={[Function]}>
            <legend
                className="row">
                Enter Login Credentials
            </legend>
            <div
                className="form-col">
                <function TextField() {
                    var _ref;
                
                    var _temp, _this, _ret;
                
                    (0, _classCallCheck3.default)(this, TextField);
                
                    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                      args[_key] = arguments[_key];
                    }
                
                    return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = TextField.__proto__ || (0, _getPrototypeOf2.default)(TextField)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
                      isFocused: false,
                      errorText: undefined,
                      hasValue: false,
                      isClean: true
                    }, _this.handleInputBlur = function (event) {
                      _this.setState({ isFocused: false });
                      if (_this.props.onBlur) _this.props.onBlur(event);
                    }, _this.handleInputChange = function (event) {
                      _this.setState({ hasValue: isValid(event.target.value), isClean: false });
                      if (_this.props.onChange) _this.props.onChange(event, event.target.value);
                    }, _this.handleInputFocus = function (event) {
                      if (_this.props.disabled) {
                        return;
                      }
                      _this.setState({ isFocused: true });
                      if (_this.props.onFocus) {
                        _this.props.onFocus(event);
                      }
                    }, _this.handleHeightChange = function (event, height) {
                      var newHeight = height + 24;
                      if (_this.props.floatingLabelText) {
                        newHeight += 24;
                      }
                      _reactDom2.default.findDOMNode(_this).style.height = newHeight + 'px';
                    }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
                  }
                    disabled={false}
                    floatingLabelFixed={false}
                    floatingLabelText="Email"
                    fullWidth={false}
                    multiLine={false}
                    onChange={[Function]}
                    rows={1}
                    type="email"
                    underlineShow={true}
                    value="rond@webbtech.net" />
                <function TextField() {
                    var _ref;
                
                    var _temp, _this, _ret;
                
                    (0, _classCallCheck3.default)(this, TextField);
                
                    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                      args[_key] = arguments[_key];
                    }
                
                    return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = TextField.__proto__ || (0, _getPrototypeOf2.default)(TextField)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
                      isFocused: false,
                      errorText: undefined,
                      hasValue: false,
                      isClean: true
                    }, _this.handleInputBlur = function (event) {
                      _this.setState({ isFocused: false });
                      if (_this.props.onBlur) _this.props.onBlur(event);
                    }, _this.handleInputChange = function (event) {
                      _this.setState({ hasValue: isValid(event.target.value), isClean: false });
                      if (_this.props.onChange) _this.props.onChange(event, event.target.value);
                    }, _this.handleInputFocus = function (event) {
                      if (_this.props.disabled) {
                        return;
                      }
                      _this.setState({ isFocused: true });
                      if (_this.props.onFocus) {
                        _this.props.onFocus(event);
                      }
                    }, _this.handleHeightChange = function (event, height) {
                      var newHeight = height + 24;
                      if (_this.props.floatingLabelText) {
                        newHeight += 24;
                      }
                      _reactDom2.default.findDOMNode(_this).style.height = newHeight + 'px';
                    }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
                  }
                    disabled={false}
                    floatingLabelFixed={false}
                    floatingLabelText="Password"
                    fullWidth={false}
                    multiLine={false}
                    onChange={[Function]}
                    rows={1}
                    type="password"
                    underlineShow={true}
                    value="NewPassword1" />
                <div
                    style={
                        Object {
                            "marginTop": 20,
                          }
                    } />
                <function RaisedButton() {
                    var _ref;
                
                    var _temp, _this, _ret;
                
                    (0, _classCallCheck3.default)(this, RaisedButton);
                
                    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                      args[_key] = arguments[_key];
                    }
                
                    return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = RaisedButton.__proto__ || (0, _getPrototypeOf2.default)(RaisedButton)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
                      hovered: false,
                      keyboardFocused: false,
                      touched: false,
                      initialZDepth: 0,
                      zDepth: 0
                    }, _this.handleMouseDown = function (event) {
                      // only listen to left clicks
                      if (event.button === 0) {
                        _this.setState({
                          zDepth: _this.state.initialZDepth + 1
                        });
                      }
                      if (_this.props.onMouseDown) {
                        _this.props.onMouseDown(event);
                      }
                    }, _this.handleMouseUp = function (event) {
                      _this.setState({
                        zDepth: _this.state.initialZDepth
                      });
                      if (_this.props.onMouseUp) {
                        _this.props.onMouseUp(event);
                      }
                    }, _this.handleMouseLeave = function (event) {
                      if (!_this.state.keyboardFocused) {
                        _this.setState({
                          zDepth: _this.state.initialZDepth,
                          hovered: false
                        });
                      }
                      if (_this.props.onMouseLeave) {
                        _this.props.onMouseLeave(event);
                      }
                    }, _this.handleMouseEnter = function (event) {
                      if (!_this.state.keyboardFocused && !_this.state.touched) {
                        _this.setState({
                          hovered: true
                        });
                      }
                      if (_this.props.onMouseEnter) {
                        _this.props.onMouseEnter(event);
                      }
                    }, _this.handleTouchStart = function (event) {
                      _this.setState({
                        touched: true,
                        zDepth: _this.state.initialZDepth + 1
                      });
                
                      if (_this.props.onTouchStart) {
                        _this.props.onTouchStart(event);
                      }
                    }, _this.handleTouchEnd = function (event) {
                      _this.setState({
                        zDepth: _this.state.initialZDepth
                      });
                
                      if (_this.props.onTouchEnd) {
                        _this.props.onTouchEnd(event);
                      }
                    }, _this.handleKeyboardFocus = function (event, keyboardFocused) {
                      var zDepth = keyboardFocused && !_this.props.disabled ? _this.state.initialZDepth + 1 : _this.state.initialZDepth;
                
                      _this.setState({
                        zDepth: zDepth,
                        keyboardFocused: keyboardFocused
                      });
                    }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
                  }
                    disabled={false}
                    fullWidth={false}
                    label="Login"
                    labelPosition="after"
                    onClick={[Function]}
                    primary={false}
                    secondary={true} />
                <div
                    style={
                        Object {
                            "marginTop": 20,
                            "textAlign": "right",
                          }
                    }>
                    <function (props, context, updater) {
                          // This constructor gets overridden by mocks. The argument is used
                          // by mocks to assert on what gets mounted.
                    
                          if (process.env.NODE_ENV !== 'production') {
                            process.env.NODE_ENV !== 'production' ? warning(this instanceof Constructor, 'Something is calling a React component directly. Use a factory or ' + 'JSX instead. See: https://fb.me/react-legacyfactory') : void 0;
                          }
                    
                          // Wire up auto-binding
                          if (this.__reactAutoBindPairs.length) {
                            bindAutoBindMethods(this);
                          }
                    
                          this.props = props;
                          this.context = context;
                          this.refs = emptyObject;
                          this.updater = updater || ReactNoopUpdateQueue;
                    
                          this.state = null;
                    
                          // ReactClasses doesn't have constructors. Instead, they use the
                          // getInitialState and componentWillMount methods for initialization.
                    
                          var initialState = this.getInitialState ? this.getInitialState() : null;
                          if (process.env.NODE_ENV !== 'production') {
                            // We allow auto-mocks to proceed as if they're returning null.
                            if (initialState === undefined && this.getInitialState._isMockFunction) {
                              // This is probably bad practice. Consider warning here and
                              // deprecating this convenience.
                              initialState = null;
                            }
                          }
                          !(typeof initialState === 'object' && !Array.isArray(initialState)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.getInitialState(): must return an object or null', Constructor.displayName || 'ReactCompositeComponent') : _prodInvariant('82', Constructor.displayName || 'ReactCompositeComponent') : void 0;
                    
                          this.state = initialState;
                        }
                        onlyActiveOnIndex={false}
                        style={Object {}}>
                        Forgot Password
                    </function (props, context, updater) {
                          // This constructor gets overridden by mocks. The argument is used
                          // by mocks to assert on what gets mounted.
                    
                          if (process.env.NODE_ENV !== 'production') {
                            process.env.NODE_ENV !== 'production' ? warning(this instanceof Constructor, 'Something is calling a React component directly. Use a factory or ' + 'JSX instead. See: https://fb.me/react-legacyfactory') : void 0;
                          }
                    
                          // Wire up auto-binding
                          if (this.__reactAutoBindPairs.length) {
                            bindAutoBindMethods(this);
                          }
                    
                          this.props = props;
                          this.context = context;
                          this.refs = emptyObject;
                          this.updater = updater || ReactNoopUpdateQueue;
                    
                          this.state = null;
                    
                          // ReactClasses doesn't have constructors. Instead, they use the
                          // getInitialState and componentWillMount methods for initialization.
                    
                          var initialState = this.getInitialState ? this.getInitialState() : null;
                          if (process.env.NODE_ENV !== 'production') {
                            // We allow auto-mocks to proceed as if they're returning null.
                            if (initialState === undefined && this.getInitialState._isMockFunction) {
                              // This is probably bad practice. Consider warning here and
                              // deprecating this convenience.
                              initialState = null;
                            }
                          }
                          !(typeof initialState === 'object' && !Array.isArray(initialState)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.getInitialState(): must return an object or null', Constructor.displayName || 'ReactCompositeComponent') : _prodInvariant('82', Constructor.displayName || 'ReactCompositeComponent') : void 0;
                    
                          this.state = initialState;
                        }>
                </div>
            </div>
        </form>
    </function Paper() {
        (0, _classCallCheck3.default)(this, Paper);
        return (0, _possibleConstructorReturn3.default)(this, (Paper.__proto__ || (0, _getPrototypeOf2.default)(Paper)).apply(this, arguments));
      }>
</div>,
  "nodes": Array [
    <div
      style={
            Object {
                  "margin": "auto",
                  "width": 400,
                }
      }>
      <function Paper() {
          (0, _classCallCheck3.default)(this, Paper);
          return (0, _possibleConstructorReturn3.default)(this, (Paper.__proto__ || (0, _getPrototypeOf2.default)(Paper)).apply(this, arguments));
        }
            circle={false}
            rounded={true}
            style={
                  Object {
                        "padding": 35,
                      }
            }
            transitionEnabled={true}
            zDepth={1}>
            <form
                  onSubmit={[Function]}>
                  <legend
                        className="row">
                        Enter Login Credentials
                  </legend>
                  <div
                        className="form-col">
                        <function TextField() {
                            var _ref;
                        
                            var _temp, _this, _ret;
                        
                            (0, _classCallCheck3.default)(this, TextField);
                        
                            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                              args[_key] = arguments[_key];
                            }
                        
                            return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = TextField.__proto__ || (0, _getPrototypeOf2.default)(TextField)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
                              isFocused: false,
                              errorText: undefined,
                              hasValue: false,
                              isClean: true
                            }, _this.handleInputBlur = function (event) {
                              _this.setState({ isFocused: false });
                              if (_this.props.onBlur) _this.props.onBlur(event);
                            }, _this.handleInputChange = function (event) {
                              _this.setState({ hasValue: isValid(event.target.value), isClean: false });
                              if (_this.props.onChange) _this.props.onChange(event, event.target.value);
                            }, _this.handleInputFocus = function (event) {
                              if (_this.props.disabled) {
                                return;
                              }
                              _this.setState({ isFocused: true });
                              if (_this.props.onFocus) {
                                _this.props.onFocus(event);
                              }
                            }, _this.handleHeightChange = function (event, height) {
                              var newHeight = height + 24;
                              if (_this.props.floatingLabelText) {
                                newHeight += 24;
                              }
                              _reactDom2.default.findDOMNode(_this).style.height = newHeight + 'px';
                            }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
                          }
                              disabled={false}
                              floatingLabelFixed={false}
                              floatingLabelText="Email"
                              fullWidth={false}
                              multiLine={false}
                              onChange={[Function]}
                              rows={1}
                              type="email"
                              underlineShow={true}
                              value="rond@webbtech.net" />
                        <function TextField() {
                            var _ref;
                        
                            var _temp, _this, _ret;
                        
                            (0, _classCallCheck3.default)(this, TextField);
                        
                            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                              args[_key] = arguments[_key];
                            }
                        
                            return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = TextField.__proto__ || (0, _getPrototypeOf2.default)(TextField)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
                              isFocused: false,
                              errorText: undefined,
                              hasValue: false,
                              isClean: true
                            }, _this.handleInputBlur = function (event) {
                              _this.setState({ isFocused: false });
                              if (_this.props.onBlur) _this.props.onBlur(event);
                            }, _this.handleInputChange = function (event) {
                              _this.setState({ hasValue: isValid(event.target.value), isClean: false });
                              if (_this.props.onChange) _this.props.onChange(event, event.target.value);
                            }, _this.handleInputFocus = function (event) {
                              if (_this.props.disabled) {
                                return;
                              }
                              _this.setState({ isFocused: true });
                              if (_this.props.onFocus) {
                                _this.props.onFocus(event);
                              }
                            }, _this.handleHeightChange = function (event, height) {
                              var newHeight = height + 24;
                              if (_this.props.floatingLabelText) {
                                newHeight += 24;
                              }
                              _reactDom2.default.findDOMNode(_this).style.height = newHeight + 'px';
                            }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
                          }
                              disabled={false}
                              floatingLabelFixed={false}
                              floatingLabelText="Password"
                              fullWidth={false}
                              multiLine={false}
                              onChange={[Function]}
                              rows={1}
                              type="password"
                              underlineShow={true}
                              value="NewPassword1" />
                        <div
                              style={
                                    Object {
                                          "marginTop": 20,
                                        }
                              } />
                        <function RaisedButton() {
                            var _ref;
                        
                            var _temp, _this, _ret;
                        
                            (0, _classCallCheck3.default)(this, RaisedButton);
                        
                            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                              args[_key] = arguments[_key];
                            }
                        
                            return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = RaisedButton.__proto__ || (0, _getPrototypeOf2.default)(RaisedButton)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
                              hovered: false,
                              keyboardFocused: false,
                              touched: false,
                              initialZDepth: 0,
                              zDepth: 0
                            }, _this.handleMouseDown = function (event) {
                              // only listen to left clicks
                              if (event.button === 0) {
                                _this.setState({
                                  zDepth: _this.state.initialZDepth + 1
                                });
                              }
                              if (_this.props.onMouseDown) {
                                _this.props.onMouseDown(event);
                              }
                            }, _this.handleMouseUp = function (event) {
                              _this.setState({
                                zDepth: _this.state.initialZDepth
                              });
                              if (_this.props.onMouseUp) {
                                _this.props.onMouseUp(event);
                              }
                            }, _this.handleMouseLeave = function (event) {
                              if (!_this.state.keyboardFocused) {
                                _this.setState({
                                  zDepth: _this.state.initialZDepth,
                                  hovered: false
                                });
                              }
                              if (_this.props.onMouseLeave) {
                                _this.props.onMouseLeave(event);
                              }
                            }, _this.handleMouseEnter = function (event) {
                              if (!_this.state.keyboardFocused && !_this.state.touched) {
                                _this.setState({
                                  hovered: true
                                });
                              }
                              if (_this.props.onMouseEnter) {
                                _this.props.onMouseEnter(event);
                              }
                            }, _this.handleTouchStart = function (event) {
                              _this.setState({
                                touched: true,
                                zDepth: _this.state.initialZDepth + 1
                              });
                        
                              if (_this.props.onTouchStart) {
                                _this.props.onTouchStart(event);
                              }
                            }, _this.handleTouchEnd = function (event) {
                              _this.setState({
                                zDepth: _this.state.initialZDepth
                              });
                        
                              if (_this.props.onTouchEnd) {
                                _this.props.onTouchEnd(event);
                              }
                            }, _this.handleKeyboardFocus = function (event, keyboardFocused) {
                              var zDepth = keyboardFocused && !_this.props.disabled ? _this.state.initialZDepth + 1 : _this.state.initialZDepth;
                        
                              _this.setState({
                                zDepth: zDepth,
                                keyboardFocused: keyboardFocused
                              });
                            }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
                          }
                              disabled={false}
                              fullWidth={false}
                              label="Login"
                              labelPosition="after"
                              onClick={[Function]}
                              primary={false}
                              secondary={true} />
                        <div
                              style={
                                    Object {
                                          "marginTop": 20,
                                          "textAlign": "right",
                                        }
                              }>
                              <function (props, context, updater) {
                                    // This constructor gets overridden by mocks. The argument is used
                                    // by mocks to assert on what gets mounted.
                              
                                    if (process.env.NODE_ENV !== 'production') {
                                      process.env.NODE_ENV !== 'production' ? warning(this instanceof Constructor, 'Something is calling a React component directly. Use a factory or ' + 'JSX instead. See: https://fb.me/react-legacyfactory') : void 0;
                                    }
                              
                                    // Wire up auto-binding
                                    if (this.__reactAutoBindPairs.length) {
                                      bindAutoBindMethods(this);
                                    }
                              
                                    this.props = props;
                                    this.context = context;
                                    this.refs = emptyObject;
                                    this.updater = updater || ReactNoopUpdateQueue;
                              
                                    this.state = null;
                              
                                    // ReactClasses doesn't have constructors. Instead, they use the
                                    // getInitialState and componentWillMount methods for initialization.
                              
                                    var initialState = this.getInitialState ? this.getInitialState() : null;
                                    if (process.env.NODE_ENV !== 'production') {
                                      // We allow auto-mocks to proceed as if they're returning null.
                                      if (initialState === undefined && this.getInitialState._isMockFunction) {
                                        // This is probably bad practice. Consider warning here and
                                        // deprecating this convenience.
                                        initialState = null;
                                      }
                                    }
                                    !(typeof initialState === 'object' && !Array.isArray(initialState)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.getInitialState(): must return an object or null', Constructor.displayName || 'ReactCompositeComponent') : _prodInvariant('82', Constructor.displayName || 'ReactCompositeComponent') : void 0;
                              
                                    this.state = initialState;
                                  }
                                    onlyActiveOnIndex={false}
                                    style={Object {}}>
                                    Forgot Password
                              </function (props, context, updater) {
                                    // This constructor gets overridden by mocks. The argument is used
                                    // by mocks to assert on what gets mounted.
                              
                                    if (process.env.NODE_ENV !== 'production') {
                                      process.env.NODE_ENV !== 'production' ? warning(this instanceof Constructor, 'Something is calling a React component directly. Use a factory or ' + 'JSX instead. See: https://fb.me/react-legacyfactory') : void 0;
                                    }
                              
                                    // Wire up auto-binding
                                    if (this.__reactAutoBindPairs.length) {
                                      bindAutoBindMethods(this);
                                    }
                              
                                    this.props = props;
                                    this.context = context;
                                    this.refs = emptyObject;
                                    this.updater = updater || ReactNoopUpdateQueue;
                              
                                    this.state = null;
                              
                                    // ReactClasses doesn't have constructors. Instead, they use the
                                    // getInitialState and componentWillMount methods for initialization.
                              
                                    var initialState = this.getInitialState ? this.getInitialState() : null;
                                    if (process.env.NODE_ENV !== 'production') {
                                      // We allow auto-mocks to proceed as if they're returning null.
                                      if (initialState === undefined && this.getInitialState._isMockFunction) {
                                        // This is probably bad practice. Consider warning here and
                                        // deprecating this convenience.
                                        initialState = null;
                                      }
                                    }
                                    !(typeof initialState === 'object' && !Array.isArray(initialState)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.getInitialState(): must return an object or null', Constructor.displayName || 'ReactCompositeComponent') : _prodInvariant('82', Constructor.displayName || 'ReactCompositeComponent') : void 0;
                              
                                    this.state = initialState;
                                  }>
                        </div>
                  </div>
            </form>
      </function Paper() {
          (0, _classCallCheck3.default)(this, Paper);
          return (0, _possibleConstructorReturn3.default)(this, (Paper.__proto__ || (0, _getPrototypeOf2.default)(Paper)).apply(this, arguments));
        }>
</div>,
  ],
  "options": Object {},
  "renderer": ReactShallowRenderer {
    "_instance": ShallowComponentWrapper {
      "_calledComponentWillUnmount": false,
      "_compositeType": 0,
      "_context": Object {},
      "_currentElement": <class LoginForm extends /* istanbul ignore next */_react.Component {
  constructor(props) {
    super(props);
    // const user = userAuthVals.getUser()
    // console.log('user:', user)
    // let email = user && user.email ? user.email : ''
    /* istanbul ignore next */this.








    _onChange = field => {
      const val = this.refs[field].input.value;
      this.setState({ [field]: val });
    }; /* istanbul ignore next */this.

    _onSubmit = () => {/* istanbul ignore next */var _props =
      this.props; /* istanbul ignore next */const authUser = _props.authUser; /* istanbul ignore next */const location = _props.location;
      const creds = {
        email: this.state.email,
        password: this.state.password,
        domainID: 'local.pf-user' };

      authUser(creds).then(res => {
        /* istanbul ignore next */_utils.userAuthVals.setVals(res.data.authUser);
        this.props.actions.loginUser(res.data.authUser);
        this.props.client.resetStore();
        console.log('props:', this.props);
        console.log('location:', location);
        if (location.state && location.state.nextPathname) {
          this.props.router.replace(location.state.nextPathname);
        } else {
          this.props.router.replace('/admin');
        }
        // window.location.reload(true)
      }).catch(err => {
        this.props.actions.alertSend({
          message: \`ERROR: ${ err.message }\`,
          type: 'danger',
          domain: 'local.gales.sales' });

      });
    };let email = 'rond@webbtech.net';this.state = { email, // password: ''
      password: 'NewPassword1' }; // console.log('props:', this.props)
  }render() {

    return (
      /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ style: { width: 400, margin: 'auto' }, __source: { fileName: _jsxFileName, lineNumber: 74 }, __self: this },
        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_Paper2.default, /* istanbul ignore next */{ style: { padding: 35 }, __source: { fileName: _jsxFileName, lineNumber: 75 }, __self: this },
          /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'form', /* istanbul ignore next */{ onSubmit: () => this._onSubmit(), __source: { fileName: _jsxFileName, lineNumber: 76 }, __self: this },

            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'legend', /* istanbul ignore next */{ className: 'row', __source: { fileName: _jsxFileName, lineNumber: 78 }, __self: this }, /* istanbul ignore next */'Enter Login Credentials'),
            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'form-col', __source: { fileName: _jsxFileName, lineNumber: 79 }, __self: this },
              /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_TextField2.default, /* istanbul ignore next */{
                floatingLabelText: 'Email',
                type: 'email',
                onChange: () => this._onChange('email')
                // onBlur={() => this._validate('email')}
                , ref: 'email',
                value: this.state.email, __source: { fileName: _jsxFileName, lineNumber: 80 }, __self: this }),

              /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_TextField2.default, /* istanbul ignore next */{
                floatingLabelText: 'Password',
                type: 'password',
                onChange: () => this._onChange('password')
                // onBlur={() => this._validate('password')}
                , ref: 'password',
                value: this.state.password, __source: { fileName: _jsxFileName, lineNumber: 88 }, __self: this }),

              /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ style: { marginTop: 20 }, __source: { fileName: _jsxFileName, lineNumber: 96 }, __self: this }),
              /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_RaisedButton2.default
              // icon={<ActionDone />}
              , /* istanbul ignore next */{ label: 'Login',
                onClick: () => this._onSubmit(),
                secondary: true, __source: { fileName: _jsxFileName, lineNumber: 97 }, __self: this }),

              /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ style: { marginTop: 20, textAlign: 'right' }, __source: { fileName: _jsxFileName, lineNumber: 103 }, __self: this },
                /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactRouter.Link, /* istanbul ignore next */{ __source: { fileName: _jsxFileName, lineNumber: 104 }, __self: this }, /* istanbul ignore next */'Forgot Password')))))));







  }} />,
      "_debugID": 1,
      "_hostContainerInfo": null,
      "_hostParent": null,
      "_instance": LoginForm {
        "_onChange": [Function],
        "_onSubmit": [Function],
        "_reactInternalInstance": [Circular],
        "context": Object {},
        "props": Object {},
        "refs": Object {},
        "state": Object {
          "email": "rond@webbtech.net",
          "password": "NewPassword1",
        },
        "updater": Object {
          "enqueueCallback": [Function],
          "enqueueCallbackInternal": [Function],
          "enqueueElementInternal": [Function],
          "enqueueForceUpdate": [Function],
          "enqueueReplaceState": [Function],
          "enqueueSetState": [Function],
          "isMounted": [Function],
          "validateCallback": [Function],
        },
      },
      "_mountOrder": 1,
      "_pendingCallbacks": null,
      "_pendingElement": null,
      "_pendingForceUpdate": false,
      "_pendingReplaceState": false,
      "_pendingStateQueue": null,
      "_renderedComponent": NoopInternalComponent {
        "_currentElement": <div
          style={
                    Object {
                              "margin": "auto",
                              "width": 400,
                            }
          }>
          <function Paper() {
              (0, _classCallCheck3.default)(this, Paper);
              return (0, _possibleConstructorReturn3.default)(this, (Paper.__proto__ || (0, _getPrototypeOf2.default)(Paper)).apply(this, arguments));
            }
                    circle={false}
                    rounded={true}
                    style={
                              Object {
                                        "padding": 35,
                                      }
                    }
                    transitionEnabled={true}
                    zDepth={1}>
                    <form
                              onSubmit={[Function]}>
                              <legend
                                        className="row">
                                        Enter Login Credentials
                              </legend>
                              <div
                                        className="form-col">
                                        <function TextField() {
                                            var _ref;
                                        
                                            var _temp, _this, _ret;
                                        
                                            (0, _classCallCheck3.default)(this, TextField);
                                        
                                            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                                              args[_key] = arguments[_key];
                                            }
                                        
                                            return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = TextField.__proto__ || (0, _getPrototypeOf2.default)(TextField)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
                                              isFocused: false,
                                              errorText: undefined,
                                              hasValue: false,
                                              isClean: true
                                            }, _this.handleInputBlur = function (event) {
                                              _this.setState({ isFocused: false });
                                              if (_this.props.onBlur) _this.props.onBlur(event);
                                            }, _this.handleInputChange = function (event) {
                                              _this.setState({ hasValue: isValid(event.target.value), isClean: false });
                                              if (_this.props.onChange) _this.props.onChange(event, event.target.value);
                                            }, _this.handleInputFocus = function (event) {
                                              if (_this.props.disabled) {
                                                return;
                                              }
                                              _this.setState({ isFocused: true });
                                              if (_this.props.onFocus) {
                                                _this.props.onFocus(event);
                                              }
                                            }, _this.handleHeightChange = function (event, height) {
                                              var newHeight = height + 24;
                                              if (_this.props.floatingLabelText) {
                                                newHeight += 24;
                                              }
                                              _reactDom2.default.findDOMNode(_this).style.height = newHeight + 'px';
                                            }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
                                          }
                                                  disabled={false}
                                                  floatingLabelFixed={false}
                                                  floatingLabelText="Email"
                                                  fullWidth={false}
                                                  multiLine={false}
                                                  onChange={[Function]}
                                                  rows={1}
                                                  type="email"
                                                  underlineShow={true}
                                                  value="rond@webbtech.net" />
                                        <function TextField() {
                                            var _ref;
                                        
                                            var _temp, _this, _ret;
                                        
                                            (0, _classCallCheck3.default)(this, TextField);
                                        
                                            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                                              args[_key] = arguments[_key];
                                            }
                                        
                                            return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = TextField.__proto__ || (0, _getPrototypeOf2.default)(TextField)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
                                              isFocused: false,
                                              errorText: undefined,
                                              hasValue: false,
                                              isClean: true
                                            }, _this.handleInputBlur = function (event) {
                                              _this.setState({ isFocused: false });
                                              if (_this.props.onBlur) _this.props.onBlur(event);
                                            }, _this.handleInputChange = function (event) {
                                              _this.setState({ hasValue: isValid(event.target.value), isClean: false });
                                              if (_this.props.onChange) _this.props.onChange(event, event.target.value);
                                            }, _this.handleInputFocus = function (event) {
                                              if (_this.props.disabled) {
                                                return;
                                              }
                                              _this.setState({ isFocused: true });
                                              if (_this.props.onFocus) {
                                                _this.props.onFocus(event);
                                              }
                                            }, _this.handleHeightChange = function (event, height) {
                                              var newHeight = height + 24;
                                              if (_this.props.floatingLabelText) {
                                                newHeight += 24;
                                              }
                                              _reactDom2.default.findDOMNode(_this).style.height = newHeight + 'px';
                                            }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
                                          }
                                                  disabled={false}
                                                  floatingLabelFixed={false}
                                                  floatingLabelText="Password"
                                                  fullWidth={false}
                                                  multiLine={false}
                                                  onChange={[Function]}
                                                  rows={1}
                                                  type="password"
                                                  underlineShow={true}
                                                  value="NewPassword1" />
                                        <div
                                                  style={
                                                            Object {
                                                                      "marginTop": 20,
                                                                    }
                                                  } />
                                        <function RaisedButton() {
                                            var _ref;
                                        
                                            var _temp, _this, _ret;
                                        
                                            (0, _classCallCheck3.default)(this, RaisedButton);
                                        
                                            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                                              args[_key] = arguments[_key];
                                            }
                                        
                                            return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = RaisedButton.__proto__ || (0, _getPrototypeOf2.default)(RaisedButton)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
                                              hovered: false,
                                              keyboardFocused: false,
                                              touched: false,
                                              initialZDepth: 0,
                                              zDepth: 0
                                            }, _this.handleMouseDown = function (event) {
                                              // only listen to left clicks
                                              if (event.button === 0) {
                                                _this.setState({
                                                  zDepth: _this.state.initialZDepth + 1
                                                });
                                              }
                                              if (_this.props.onMouseDown) {
                                                _this.props.onMouseDown(event);
                                              }
                                            }, _this.handleMouseUp = function (event) {
                                              _this.setState({
                                                zDepth: _this.state.initialZDepth
                                              });
                                              if (_this.props.onMouseUp) {
                                                _this.props.onMouseUp(event);
                                              }
                                            }, _this.handleMouseLeave = function (event) {
                                              if (!_this.state.keyboardFocused) {
                                                _this.setState({
                                                  zDepth: _this.state.initialZDepth,
                                                  hovered: false
                                                });
                                              }
                                              if (_this.props.onMouseLeave) {
                                                _this.props.onMouseLeave(event);
                                              }
                                            }, _this.handleMouseEnter = function (event) {
                                              if (!_this.state.keyboardFocused && !_this.state.touched) {
                                                _this.setState({
                                                  hovered: true
                                                });
                                              }
                                              if (_this.props.onMouseEnter) {
                                                _this.props.onMouseEnter(event);
                                              }
                                            }, _this.handleTouchStart = function (event) {
                                              _this.setState({
                                                touched: true,
                                                zDepth: _this.state.initialZDepth + 1
                                              });
                                        
                                              if (_this.props.onTouchStart) {
                                                _this.props.onTouchStart(event);
                                              }
                                            }, _this.handleTouchEnd = function (event) {
                                              _this.setState({
                                                zDepth: _this.state.initialZDepth
                                              });
                                        
                                              if (_this.props.onTouchEnd) {
                                                _this.props.onTouchEnd(event);
                                              }
                                            }, _this.handleKeyboardFocus = function (event, keyboardFocused) {
                                              var zDepth = keyboardFocused && !_this.props.disabled ? _this.state.initialZDepth + 1 : _this.state.initialZDepth;
                                        
                                              _this.setState({
                                                zDepth: zDepth,
                                                keyboardFocused: keyboardFocused
                                              });
                                            }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
                                          }
                                                  disabled={false}
                                                  fullWidth={false}
                                                  label="Login"
                                                  labelPosition="after"
                                                  onClick={[Function]}
                                                  primary={false}
                                                  secondary={true} />
                                        <div
                                                  style={
                                                            Object {
                                                                      "marginTop": 20,
                                                                      "textAlign": "right",
                                                                    }
                                                  }>
                                                  <function (props, context, updater) {
                                                        // This constructor gets overridden by mocks. The argument is used
                                                        // by mocks to assert on what gets mounted.
                                                  
                                                        if (process.env.NODE_ENV !== 'production') {
                                                          process.env.NODE_ENV !== 'production' ? warning(this instanceof Constructor, 'Something is calling a React component directly. Use a factory or ' + 'JSX instead. See: https://fb.me/react-legacyfactory') : void 0;
                                                        }
                                                  
                                                        // Wire up auto-binding
                                                        if (this.__reactAutoBindPairs.length) {
                                                          bindAutoBindMethods(this);
                                                        }
                                                  
                                                        this.props = props;
                                                        this.context = context;
                                                        this.refs = emptyObject;
                                                        this.updater = updater || ReactNoopUpdateQueue;
                                                  
                                                        this.state = null;
                                                  
                                                        // ReactClasses doesn't have constructors. Instead, they use the
                                                        // getInitialState and componentWillMount methods for initialization.
                                                  
                                                        var initialState = this.getInitialState ? this.getInitialState() : null;
                                                        if (process.env.NODE_ENV !== 'production') {
                                                          // We allow auto-mocks to proceed as if they're returning null.
                                                          if (initialState === undefined && this.getInitialState._isMockFunction) {
                                                            // This is probably bad practice. Consider warning here and
                                                            // deprecating this convenience.
                                                            initialState = null;
                                                          }
                                                        }
                                                        !(typeof initialState === 'object' && !Array.isArray(initialState)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.getInitialState(): must return an object or null', Constructor.displayName || 'ReactCompositeComponent') : _prodInvariant('82', Constructor.displayName || 'ReactCompositeComponent') : void 0;
                                                  
                                                        this.state = initialState;
                                                      }
                                                            onlyActiveOnIndex={false}
                                                            style={Object {}}>
                                                            Forgot Password
                                                  </function (props, context, updater) {
                                                        // This constructor gets overridden by mocks. The argument is used
                                                        // by mocks to assert on what gets mounted.
                                                  
                                                        if (process.env.NODE_ENV !== 'production') {
                                                          process.env.NODE_ENV !== 'production' ? warning(this instanceof Constructor, 'Something is calling a React component directly. Use a factory or ' + 'JSX instead. See: https://fb.me/react-legacyfactory') : void 0;
                                                        }
                                                  
                                                        // Wire up auto-binding
                                                        if (this.__reactAutoBindPairs.length) {
                                                          bindAutoBindMethods(this);
                                                        }
                                                  
                                                        this.props = props;
                                                        this.context = context;
                                                        this.refs = emptyObject;
                                                        this.updater = updater || ReactNoopUpdateQueue;
                                                  
                                                        this.state = null;
                                                  
                                                        // ReactClasses doesn't have constructors. Instead, they use the
                                                        // getInitialState and componentWillMount methods for initialization.
                                                  
                                                        var initialState = this.getInitialState ? this.getInitialState() : null;
                                                        if (process.env.NODE_ENV !== 'production') {
                                                          // We allow auto-mocks to proceed as if they're returning null.
                                                          if (initialState === undefined && this.getInitialState._isMockFunction) {
                                                            // This is probably bad practice. Consider warning here and
                                                            // deprecating this convenience.
                                                            initialState = null;
                                                          }
                                                        }
                                                        !(typeof initialState === 'object' && !Array.isArray(initialState)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.getInitialState(): must return an object or null', Constructor.displayName || 'ReactCompositeComponent') : _prodInvariant('82', Constructor.displayName || 'ReactCompositeComponent') : void 0;
                                                  
                                                        this.state = initialState;
                                                      }>
                                        </div>
                              </div>
                    </form>
          </function Paper() {
              (0, _classCallCheck3.default)(this, Paper);
              return (0, _possibleConstructorReturn3.default)(this, (Paper.__proto__ || (0, _getPrototypeOf2.default)(Paper)).apply(this, arguments));
            }>
</div>,
        "_debugID": 2,
        "_renderedOutput": <div
          style={
                    Object {
                              "margin": "auto",
                              "width": 400,
                            }
          }>
          <function Paper() {
              (0, _classCallCheck3.default)(this, Paper);
              return (0, _possibleConstructorReturn3.default)(this, (Paper.__proto__ || (0, _getPrototypeOf2.default)(Paper)).apply(this, arguments));
            }
                    circle={false}
                    rounded={true}
                    style={
                              Object {
                                        "padding": 35,
                                      }
                    }
                    transitionEnabled={true}
                    zDepth={1}>
                    <form
                              onSubmit={[Function]}>
                              <legend
                                        className="row">
                                        Enter Login Credentials
                              </legend>
                              <div
                                        className="form-col">
                                        <function TextField() {
                                            var _ref;
                                        
                                            var _temp, _this, _ret;
                                        
                                            (0, _classCallCheck3.default)(this, TextField);
                                        
                                            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                                              args[_key] = arguments[_key];
                                            }
                                        
                                            return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = TextField.__proto__ || (0, _getPrototypeOf2.default)(TextField)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
                                              isFocused: false,
                                              errorText: undefined,
                                              hasValue: false,
                                              isClean: true
                                            }, _this.handleInputBlur = function (event) {
                                              _this.setState({ isFocused: false });
                                              if (_this.props.onBlur) _this.props.onBlur(event);
                                            }, _this.handleInputChange = function (event) {
                                              _this.setState({ hasValue: isValid(event.target.value), isClean: false });
                                              if (_this.props.onChange) _this.props.onChange(event, event.target.value);
                                            }, _this.handleInputFocus = function (event) {
                                              if (_this.props.disabled) {
                                                return;
                                              }
                                              _this.setState({ isFocused: true });
                                              if (_this.props.onFocus) {
                                                _this.props.onFocus(event);
                                              }
                                            }, _this.handleHeightChange = function (event, height) {
                                              var newHeight = height + 24;
                                              if (_this.props.floatingLabelText) {
                                                newHeight += 24;
                                              }
                                              _reactDom2.default.findDOMNode(_this).style.height = newHeight + 'px';
                                            }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
                                          }
                                                  disabled={false}
                                                  floatingLabelFixed={false}
                                                  floatingLabelText="Email"
                                                  fullWidth={false}
                                                  multiLine={false}
                                                  onChange={[Function]}
                                                  rows={1}
                                                  type="email"
                                                  underlineShow={true}
                                                  value="rond@webbtech.net" />
                                        <function TextField() {
                                            var _ref;
                                        
                                            var _temp, _this, _ret;
                                        
                                            (0, _classCallCheck3.default)(this, TextField);
                                        
                                            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                                              args[_key] = arguments[_key];
                                            }
                                        
                                            return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = TextField.__proto__ || (0, _getPrototypeOf2.default)(TextField)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
                                              isFocused: false,
                                              errorText: undefined,
                                              hasValue: false,
                                              isClean: true
                                            }, _this.handleInputBlur = function (event) {
                                              _this.setState({ isFocused: false });
                                              if (_this.props.onBlur) _this.props.onBlur(event);
                                            }, _this.handleInputChange = function (event) {
                                              _this.setState({ hasValue: isValid(event.target.value), isClean: false });
                                              if (_this.props.onChange) _this.props.onChange(event, event.target.value);
                                            }, _this.handleInputFocus = function (event) {
                                              if (_this.props.disabled) {
                                                return;
                                              }
                                              _this.setState({ isFocused: true });
                                              if (_this.props.onFocus) {
                                                _this.props.onFocus(event);
                                              }
                                            }, _this.handleHeightChange = function (event, height) {
                                              var newHeight = height + 24;
                                              if (_this.props.floatingLabelText) {
                                                newHeight += 24;
                                              }
                                              _reactDom2.default.findDOMNode(_this).style.height = newHeight + 'px';
                                            }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
                                          }
                                                  disabled={false}
                                                  floatingLabelFixed={false}
                                                  floatingLabelText="Password"
                                                  fullWidth={false}
                                                  multiLine={false}
                                                  onChange={[Function]}
                                                  rows={1}
                                                  type="password"
                                                  underlineShow={true}
                                                  value="NewPassword1" />
                                        <div
                                                  style={
                                                            Object {
                                                                      "marginTop": 20,
                                                                    }
                                                  } />
                                        <function RaisedButton() {
                                            var _ref;
                                        
                                            var _temp, _this, _ret;
                                        
                                            (0, _classCallCheck3.default)(this, RaisedButton);
                                        
                                            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                                              args[_key] = arguments[_key];
                                            }
                                        
                                            return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = RaisedButton.__proto__ || (0, _getPrototypeOf2.default)(RaisedButton)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
                                              hovered: false,
                                              keyboardFocused: false,
                                              touched: false,
                                              initialZDepth: 0,
                                              zDepth: 0
                                            }, _this.handleMouseDown = function (event) {
                                              // only listen to left clicks
                                              if (event.button === 0) {
                                                _this.setState({
                                                  zDepth: _this.state.initialZDepth + 1
                                                });
                                              }
                                              if (_this.props.onMouseDown) {
                                                _this.props.onMouseDown(event);
                                              }
                                            }, _this.handleMouseUp = function (event) {
                                              _this.setState({
                                                zDepth: _this.state.initialZDepth
                                              });
                                              if (_this.props.onMouseUp) {
                                                _this.props.onMouseUp(event);
                                              }
                                            }, _this.handleMouseLeave = function (event) {
                                              if (!_this.state.keyboardFocused) {
                                                _this.setState({
                                                  zDepth: _this.state.initialZDepth,
                                                  hovered: false
                                                });
                                              }
                                              if (_this.props.onMouseLeave) {
                                                _this.props.onMouseLeave(event);
                                              }
                                            }, _this.handleMouseEnter = function (event) {
                                              if (!_this.state.keyboardFocused && !_this.state.touched) {
                                                _this.setState({
                                                  hovered: true
                                                });
                                              }
                                              if (_this.props.onMouseEnter) {
                                                _this.props.onMouseEnter(event);
                                              }
                                            }, _this.handleTouchStart = function (event) {
                                              _this.setState({
                                                touched: true,
                                                zDepth: _this.state.initialZDepth + 1
                                              });
                                        
                                              if (_this.props.onTouchStart) {
                                                _this.props.onTouchStart(event);
                                              }
                                            }, _this.handleTouchEnd = function (event) {
                                              _this.setState({
                                                zDepth: _this.state.initialZDepth
                                              });
                                        
                                              if (_this.props.onTouchEnd) {
                                                _this.props.onTouchEnd(event);
                                              }
                                            }, _this.handleKeyboardFocus = function (event, keyboardFocused) {
                                              var zDepth = keyboardFocused && !_this.props.disabled ? _this.state.initialZDepth + 1 : _this.state.initialZDepth;
                                        
                                              _this.setState({
                                                zDepth: zDepth,
                                                keyboardFocused: keyboardFocused
                                              });
                                            }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
                                          }
                                                  disabled={false}
                                                  fullWidth={false}
                                                  label="Login"
                                                  labelPosition="after"
                                                  onClick={[Function]}
                                                  primary={false}
                                                  secondary={true} />
                                        <div
                                                  style={
                                                            Object {
                                                                      "marginTop": 20,
                                                                      "textAlign": "right",
                                                                    }
                                                  }>
                                                  <function (props, context, updater) {
                                                        // This constructor gets overridden by mocks. The argument is used
                                                        // by mocks to assert on what gets mounted.
                                                  
                                                        if (process.env.NODE_ENV !== 'production') {
                                                          process.env.NODE_ENV !== 'production' ? warning(this instanceof Constructor, 'Something is calling a React component directly. Use a factory or ' + 'JSX instead. See: https://fb.me/react-legacyfactory') : void 0;
                                                        }
                                                  
                                                        // Wire up auto-binding
                                                        if (this.__reactAutoBindPairs.length) {
                                                          bindAutoBindMethods(this);
                                                        }
                                                  
                                                        this.props = props;
                                                        this.context = context;
                                                        this.refs = emptyObject;
                                                        this.updater = updater || ReactNoopUpdateQueue;
                                                  
                                                        this.state = null;
                                                  
                                                        // ReactClasses doesn't have constructors. Instead, they use the
                                                        // getInitialState and componentWillMount methods for initialization.
                                                  
                                                        var initialState = this.getInitialState ? this.getInitialState() : null;
                                                        if (process.env.NODE_ENV !== 'production') {
                                                          // We allow auto-mocks to proceed as if they're returning null.
                                                          if (initialState === undefined && this.getInitialState._isMockFunction) {
                                                            // This is probably bad practice. Consider warning here and
                                                            // deprecating this convenience.
                                                            initialState = null;
                                                          }
                                                        }
                                                        !(typeof initialState === 'object' && !Array.isArray(initialState)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.getInitialState(): must return an object or null', Constructor.displayName || 'ReactCompositeComponent') : _prodInvariant('82', Constructor.displayName || 'ReactCompositeComponent') : void 0;
                                                  
                                                        this.state = initialState;
                                                      }
                                                            onlyActiveOnIndex={false}
                                                            style={Object {}}>
                                                            Forgot Password
                                                  </function (props, context, updater) {
                                                        // This constructor gets overridden by mocks. The argument is used
                                                        // by mocks to assert on what gets mounted.
                                                  
                                                        if (process.env.NODE_ENV !== 'production') {
                                                          process.env.NODE_ENV !== 'production' ? warning(this instanceof Constructor, 'Something is calling a React component directly. Use a factory or ' + 'JSX instead. See: https://fb.me/react-legacyfactory') : void 0;
                                                        }
                                                  
                                                        // Wire up auto-binding
                                                        if (this.__reactAutoBindPairs.length) {
                                                          bindAutoBindMethods(this);
                                                        }
                                                  
                                                        this.props = props;
                                                        this.context = context;
                                                        this.refs = emptyObject;
                                                        this.updater = updater || ReactNoopUpdateQueue;
                                                  
                                                        this.state = null;
                                                  
                                                        // ReactClasses doesn't have constructors. Instead, they use the
                                                        // getInitialState and componentWillMount methods for initialization.
                                                  
                                                        var initialState = this.getInitialState ? this.getInitialState() : null;
                                                        if (process.env.NODE_ENV !== 'production') {
                                                          // We allow auto-mocks to proceed as if they're returning null.
                                                          if (initialState === undefined && this.getInitialState._isMockFunction) {
                                                            // This is probably bad practice. Consider warning here and
                                                            // deprecating this convenience.
                                                            initialState = null;
                                                          }
                                                        }
                                                        !(typeof initialState === 'object' && !Array.isArray(initialState)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.getInitialState(): must return an object or null', Constructor.displayName || 'ReactCompositeComponent') : _prodInvariant('82', Constructor.displayName || 'ReactCompositeComponent') : void 0;
                                                  
                                                        this.state = initialState;
                                                      }>
                                        </div>
                              </div>
                    </form>
          </function Paper() {
              (0, _classCallCheck3.default)(this, Paper);
              return (0, _possibleConstructorReturn3.default)(this, (Paper.__proto__ || (0, _getPrototypeOf2.default)(Paper)).apply(this, arguments));
            }>
</div>,
      },
      "_renderedNodeType": 0,
      "_rootNodeID": 0,
      "_topLevelWrapper": null,
      "_updateBatchNumber": null,
      "_warnedAboutRefsInRender": false,
    },
    "getRenderOutput": [Function],
    "render": [Function],
  },
  "root": [Circular],
  "unrendered": <class LoginForm extends /* istanbul ignore next */_react.Component {
  constructor(props) {
    super(props);
    // const user = userAuthVals.getUser()
    // console.log('user:', user)
    // let email = user && user.email ? user.email : ''
    /* istanbul ignore next */this.








    _onChange = field => {
      const val = this.refs[field].input.value;
      this.setState({ [field]: val });
    }; /* istanbul ignore next */this.

    _onSubmit = () => {/* istanbul ignore next */var _props =
      this.props; /* istanbul ignore next */const authUser = _props.authUser; /* istanbul ignore next */const location = _props.location;
      const creds = {
        email: this.state.email,
        password: this.state.password,
        domainID: 'local.pf-user' };

      authUser(creds).then(res => {
        /* istanbul ignore next */_utils.userAuthVals.setVals(res.data.authUser);
        this.props.actions.loginUser(res.data.authUser);
        this.props.client.resetStore();
        console.log('props:', this.props);
        console.log('location:', location);
        if (location.state && location.state.nextPathname) {
          this.props.router.replace(location.state.nextPathname);
        } else {
          this.props.router.replace('/admin');
        }
        // window.location.reload(true)
      }).catch(err => {
        this.props.actions.alertSend({
          message: \`ERROR: ${ err.message }\`,
          type: 'danger',
          domain: 'local.gales.sales' });

      });
    };let email = 'rond@webbtech.net';this.state = { email, // password: ''
      password: 'NewPassword1' }; // console.log('props:', this.props)
  }render() {

    return (
      /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ style: { width: 400, margin: 'auto' }, __source: { fileName: _jsxFileName, lineNumber: 74 }, __self: this },
        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_Paper2.default, /* istanbul ignore next */{ style: { padding: 35 }, __source: { fileName: _jsxFileName, lineNumber: 75 }, __self: this },
          /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'form', /* istanbul ignore next */{ onSubmit: () => this._onSubmit(), __source: { fileName: _jsxFileName, lineNumber: 76 }, __self: this },

            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'legend', /* istanbul ignore next */{ className: 'row', __source: { fileName: _jsxFileName, lineNumber: 78 }, __self: this }, /* istanbul ignore next */'Enter Login Credentials'),
            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'form-col', __source: { fileName: _jsxFileName, lineNumber: 79 }, __self: this },
              /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_TextField2.default, /* istanbul ignore next */{
                floatingLabelText: 'Email',
                type: 'email',
                onChange: () => this._onChange('email')
                // onBlur={() => this._validate('email')}
                , ref: 'email',
                value: this.state.email, __source: { fileName: _jsxFileName, lineNumber: 80 }, __self: this }),

              /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_TextField2.default, /* istanbul ignore next */{
                floatingLabelText: 'Password',
                type: 'password',
                onChange: () => this._onChange('password')
                // onBlur={() => this._validate('password')}
                , ref: 'password',
                value: this.state.password, __source: { fileName: _jsxFileName, lineNumber: 88 }, __self: this }),

              /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ style: { marginTop: 20 }, __source: { fileName: _jsxFileName, lineNumber: 96 }, __self: this }),
              /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_RaisedButton2.default
              // icon={<ActionDone />}
              , /* istanbul ignore next */{ label: 'Login',
                onClick: () => this._onSubmit(),
                secondary: true, __source: { fileName: _jsxFileName, lineNumber: 97 }, __self: this }),

              /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ style: { marginTop: 20, textAlign: 'right' }, __source: { fileName: _jsxFileName, lineNumber: 103 }, __self: this },
                /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactRouter.Link, /* istanbul ignore next */{ __source: { fileName: _jsxFileName, lineNumber: 104 }, __self: this }, /* istanbul ignore next */'Forgot Password')))))));







  }} />,
}
`;
