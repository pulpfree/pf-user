exports[`components <Forgotform /> matches snapshot 1`] = `
ShallowWrapper {
  "complexSelector": ComplexSelector {
    "buildPredicate": [Function],
    "childrenOfNode": [Function],
    "findWhereUnwrapped": [Function],
  },
  "length": 1,
  "node": <div
    style={
        Object {
            "backgroundColor": "#efefef",
            "margin": "auto",
            "marginTop": 200,
            "padding": 20,
            "width": 350,
          }
    }>
    <form
        onSubmit={[Function]}>
        <legend
            className="row">
            Forgot Password
        </legend>
        <div
            className="form-col">
            <div
                style={
                    Object {
                        "marginTop": 20,
                      }
                }>
                Enter your email address and we will send you a link to reset your password.
            </div>
            <function TextField() {
                var _ref;
            
                var _temp, _this, _ret;
            
                (0, _classCallCheck3.default)(this, TextField);
            
                for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                  args[_key] = arguments[_key];
                }
            
                return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = TextField.__proto__ || (0, _getPrototypeOf2.default)(TextField)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
                  isFocused: false,
                  errorText: undefined,
                  hasValue: false,
                  isClean: true
                }, _this.handleInputBlur = function (event) {
                  _this.setState({ isFocused: false });
                  if (_this.props.onBlur) _this.props.onBlur(event);
                }, _this.handleInputChange = function (event) {
                  _this.setState({ hasValue: isValid(event.target.value), isClean: false });
                  if (_this.props.onChange) _this.props.onChange(event, event.target.value);
                }, _this.handleInputFocus = function (event) {
                  if (_this.props.disabled) {
                    return;
                  }
                  _this.setState({ isFocused: true });
                  if (_this.props.onFocus) {
                    _this.props.onFocus(event);
                  }
                }, _this.handleHeightChange = function (event, height) {
                  var newHeight = height + 24;
                  if (_this.props.floatingLabelText) {
                    newHeight += 24;
                  }
                  _reactDom2.default.findDOMNode(_this).style.height = newHeight + 'px';
                }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
              }
                autoFocus={true}
                disabled={false}
                floatingLabelFixed={false}
                floatingLabelText="Email"
                fullWidth={false}
                multiLine={false}
                rows={1}
                type="text"
                underlineShow={true} />
            <div
                style={
                    Object {
                        "marginTop": 20,
                      }
                } />
            <function RaisedButton() {
                var _ref;
            
                var _temp, _this, _ret;
            
                (0, _classCallCheck3.default)(this, RaisedButton);
            
                for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                  args[_key] = arguments[_key];
                }
            
                return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = RaisedButton.__proto__ || (0, _getPrototypeOf2.default)(RaisedButton)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
                  hovered: false,
                  keyboardFocused: false,
                  touched: false,
                  initialZDepth: 0,
                  zDepth: 0
                }, _this.handleMouseDown = function (event) {
                  // only listen to left clicks
                  if (event.button === 0) {
                    _this.setState({
                      zDepth: _this.state.initialZDepth + 1
                    });
                  }
                  if (_this.props.onMouseDown) {
                    _this.props.onMouseDown(event);
                  }
                }, _this.handleMouseUp = function (event) {
                  _this.setState({
                    zDepth: _this.state.initialZDepth
                  });
                  if (_this.props.onMouseUp) {
                    _this.props.onMouseUp(event);
                  }
                }, _this.handleMouseLeave = function (event) {
                  if (!_this.state.keyboardFocused) {
                    _this.setState({
                      zDepth: _this.state.initialZDepth,
                      hovered: false
                    });
                  }
                  if (_this.props.onMouseLeave) {
                    _this.props.onMouseLeave(event);
                  }
                }, _this.handleMouseEnter = function (event) {
                  if (!_this.state.keyboardFocused && !_this.state.touched) {
                    _this.setState({
                      hovered: true
                    });
                  }
                  if (_this.props.onMouseEnter) {
                    _this.props.onMouseEnter(event);
                  }
                }, _this.handleTouchStart = function (event) {
                  _this.setState({
                    touched: true,
                    zDepth: _this.state.initialZDepth + 1
                  });
            
                  if (_this.props.onTouchStart) {
                    _this.props.onTouchStart(event);
                  }
                }, _this.handleTouchEnd = function (event) {
                  _this.setState({
                    zDepth: _this.state.initialZDepth
                  });
            
                  if (_this.props.onTouchEnd) {
                    _this.props.onTouchEnd(event);
                  }
                }, _this.handleKeyboardFocus = function (event, keyboardFocused) {
                  var zDepth = keyboardFocused && !_this.props.disabled ? _this.state.initialZDepth + 1 : _this.state.initialZDepth;
            
                  _this.setState({
                    zDepth: zDepth,
                    keyboardFocused: keyboardFocused
                  });
                }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
              }
                disabled={false}
                fullWidth={false}
                label="Submit"
                labelPosition="after"
                onClick={[Function]}
                primary={false}
                secondary={true} />
        </div>
    </form>
</div>,
  "nodes": Array [
    <div
      style={
            Object {
                  "backgroundColor": "#efefef",
                  "margin": "auto",
                  "marginTop": 200,
                  "padding": 20,
                  "width": 350,
                }
      }>
      <form
            onSubmit={[Function]}>
            <legend
                  className="row">
                  Forgot Password
            </legend>
            <div
                  className="form-col">
                  <div
                        style={
                              Object {
                                    "marginTop": 20,
                                  }
                        }>
                        Enter your email address and we will send you a link to reset your password.
                  </div>
                  <function TextField() {
                      var _ref;
                  
                      var _temp, _this, _ret;
                  
                      (0, _classCallCheck3.default)(this, TextField);
                  
                      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                        args[_key] = arguments[_key];
                      }
                  
                      return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = TextField.__proto__ || (0, _getPrototypeOf2.default)(TextField)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
                        isFocused: false,
                        errorText: undefined,
                        hasValue: false,
                        isClean: true
                      }, _this.handleInputBlur = function (event) {
                        _this.setState({ isFocused: false });
                        if (_this.props.onBlur) _this.props.onBlur(event);
                      }, _this.handleInputChange = function (event) {
                        _this.setState({ hasValue: isValid(event.target.value), isClean: false });
                        if (_this.props.onChange) _this.props.onChange(event, event.target.value);
                      }, _this.handleInputFocus = function (event) {
                        if (_this.props.disabled) {
                          return;
                        }
                        _this.setState({ isFocused: true });
                        if (_this.props.onFocus) {
                          _this.props.onFocus(event);
                        }
                      }, _this.handleHeightChange = function (event, height) {
                        var newHeight = height + 24;
                        if (_this.props.floatingLabelText) {
                          newHeight += 24;
                        }
                        _reactDom2.default.findDOMNode(_this).style.height = newHeight + 'px';
                      }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
                    }
                        autoFocus={true}
                        disabled={false}
                        floatingLabelFixed={false}
                        floatingLabelText="Email"
                        fullWidth={false}
                        multiLine={false}
                        rows={1}
                        type="text"
                        underlineShow={true} />
                  <div
                        style={
                              Object {
                                    "marginTop": 20,
                                  }
                        } />
                  <function RaisedButton() {
                      var _ref;
                  
                      var _temp, _this, _ret;
                  
                      (0, _classCallCheck3.default)(this, RaisedButton);
                  
                      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                        args[_key] = arguments[_key];
                      }
                  
                      return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = RaisedButton.__proto__ || (0, _getPrototypeOf2.default)(RaisedButton)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
                        hovered: false,
                        keyboardFocused: false,
                        touched: false,
                        initialZDepth: 0,
                        zDepth: 0
                      }, _this.handleMouseDown = function (event) {
                        // only listen to left clicks
                        if (event.button === 0) {
                          _this.setState({
                            zDepth: _this.state.initialZDepth + 1
                          });
                        }
                        if (_this.props.onMouseDown) {
                          _this.props.onMouseDown(event);
                        }
                      }, _this.handleMouseUp = function (event) {
                        _this.setState({
                          zDepth: _this.state.initialZDepth
                        });
                        if (_this.props.onMouseUp) {
                          _this.props.onMouseUp(event);
                        }
                      }, _this.handleMouseLeave = function (event) {
                        if (!_this.state.keyboardFocused) {
                          _this.setState({
                            zDepth: _this.state.initialZDepth,
                            hovered: false
                          });
                        }
                        if (_this.props.onMouseLeave) {
                          _this.props.onMouseLeave(event);
                        }
                      }, _this.handleMouseEnter = function (event) {
                        if (!_this.state.keyboardFocused && !_this.state.touched) {
                          _this.setState({
                            hovered: true
                          });
                        }
                        if (_this.props.onMouseEnter) {
                          _this.props.onMouseEnter(event);
                        }
                      }, _this.handleTouchStart = function (event) {
                        _this.setState({
                          touched: true,
                          zDepth: _this.state.initialZDepth + 1
                        });
                  
                        if (_this.props.onTouchStart) {
                          _this.props.onTouchStart(event);
                        }
                      }, _this.handleTouchEnd = function (event) {
                        _this.setState({
                          zDepth: _this.state.initialZDepth
                        });
                  
                        if (_this.props.onTouchEnd) {
                          _this.props.onTouchEnd(event);
                        }
                      }, _this.handleKeyboardFocus = function (event, keyboardFocused) {
                        var zDepth = keyboardFocused && !_this.props.disabled ? _this.state.initialZDepth + 1 : _this.state.initialZDepth;
                  
                        _this.setState({
                          zDepth: zDepth,
                          keyboardFocused: keyboardFocused
                        });
                      }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
                    }
                        disabled={false}
                        fullWidth={false}
                        label="Submit"
                        labelPosition="after"
                        onClick={[Function]}
                        primary={false}
                        secondary={true} />
            </div>
      </form>
</div>,
  ],
  "options": Object {},
  "renderer": ReactShallowRenderer {
    "_instance": ShallowComponentWrapper {
      "_calledComponentWillUnmount": false,
      "_compositeType": 0,
      "_context": Object {},
      "_currentElement": <class Forgotform extends /* istanbul ignore next */_react.Component {/* istanbul ignore next */constructor() {var _temp;return _temp = super(...arguments), this.

    _onSubmit = () => {

    }, _temp;}

  render() {

    return (
      /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ style: { width: 350, margin: 'auto', marginTop: 200, backgroundColor: '#efefef', padding: 20 }, __source: { fileName: _jsxFileName, lineNumber: 18 }, __self: this },
        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'form', /* istanbul ignore next */{ onSubmit: () => this._onSubmit(), __source: { fileName: _jsxFileName, lineNumber: 19 }, __self: this },

          /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'legend', /* istanbul ignore next */{ className: 'row', __source: { fileName: _jsxFileName, lineNumber: 21 }, __self: this }, /* istanbul ignore next */'Forgot Password'),
          /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'form-col', __source: { fileName: _jsxFileName, lineNumber: 22 }, __self: this },
            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ style: { marginTop: 20 }, __source: { fileName: _jsxFileName, lineNumber: 23 }, __self: this }, /* istanbul ignore next */'Enter your email address and we will send you a link to reset your password.'),
            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_TextField2.default, /* istanbul ignore next */{
              floatingLabelText: 'Email',
              autoFocus: true
              // onChange={() => this._onPropChange('name')}
              // onBlur={() => this._validate('name')}
              // ref='name'
              // value={scratch.name || ''}
              , __source: { fileName: _jsxFileName, lineNumber: 24 }, __self: this }),
            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ style: { marginTop: 20 }, __source: { fileName: _jsxFileName, lineNumber: 32 }, __self: this }),
            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_RaisedButton2.default
            // icon={<ActionDone />}
            , /* istanbul ignore next */{ label: 'Submit',
              onClick: () => this._onSubmit(),
              secondary: true, __source: { fileName: _jsxFileName, lineNumber: 33 }, __self: this })))));






  }} />,
      "_debugID": 3,
      "_hostContainerInfo": null,
      "_hostParent": null,
      "_instance": Forgotform {
        "_onSubmit": [Function],
        "_reactInternalInstance": [Circular],
        "context": Object {},
        "props": Object {},
        "refs": Object {},
        "state": null,
        "updater": Object {
          "enqueueCallback": [Function],
          "enqueueCallbackInternal": [Function],
          "enqueueElementInternal": [Function],
          "enqueueForceUpdate": [Function],
          "enqueueReplaceState": [Function],
          "enqueueSetState": [Function],
          "isMounted": [Function],
          "validateCallback": [Function],
        },
      },
      "_mountOrder": 2,
      "_pendingCallbacks": null,
      "_pendingElement": null,
      "_pendingForceUpdate": false,
      "_pendingReplaceState": false,
      "_pendingStateQueue": null,
      "_renderedComponent": NoopInternalComponent {
        "_currentElement": <div
          style={
                    Object {
                              "backgroundColor": "#efefef",
                              "margin": "auto",
                              "marginTop": 200,
                              "padding": 20,
                              "width": 350,
                            }
          }>
          <form
                    onSubmit={[Function]}>
                    <legend
                              className="row">
                              Forgot Password
                    </legend>
                    <div
                              className="form-col">
                              <div
                                        style={
                                                  Object {
                                                            "marginTop": 20,
                                                          }
                                        }>
                                        Enter your email address and we will send you a link to reset your password.
                              </div>
                              <function TextField() {
                                  var _ref;
                              
                                  var _temp, _this, _ret;
                              
                                  (0, _classCallCheck3.default)(this, TextField);
                              
                                  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                                    args[_key] = arguments[_key];
                                  }
                              
                                  return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = TextField.__proto__ || (0, _getPrototypeOf2.default)(TextField)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
                                    isFocused: false,
                                    errorText: undefined,
                                    hasValue: false,
                                    isClean: true
                                  }, _this.handleInputBlur = function (event) {
                                    _this.setState({ isFocused: false });
                                    if (_this.props.onBlur) _this.props.onBlur(event);
                                  }, _this.handleInputChange = function (event) {
                                    _this.setState({ hasValue: isValid(event.target.value), isClean: false });
                                    if (_this.props.onChange) _this.props.onChange(event, event.target.value);
                                  }, _this.handleInputFocus = function (event) {
                                    if (_this.props.disabled) {
                                      return;
                                    }
                                    _this.setState({ isFocused: true });
                                    if (_this.props.onFocus) {
                                      _this.props.onFocus(event);
                                    }
                                  }, _this.handleHeightChange = function (event, height) {
                                    var newHeight = height + 24;
                                    if (_this.props.floatingLabelText) {
                                      newHeight += 24;
                                    }
                                    _reactDom2.default.findDOMNode(_this).style.height = newHeight + 'px';
                                  }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
                                }
                                        autoFocus={true}
                                        disabled={false}
                                        floatingLabelFixed={false}
                                        floatingLabelText="Email"
                                        fullWidth={false}
                                        multiLine={false}
                                        rows={1}
                                        type="text"
                                        underlineShow={true} />
                              <div
                                        style={
                                                  Object {
                                                            "marginTop": 20,
                                                          }
                                        } />
                              <function RaisedButton() {
                                  var _ref;
                              
                                  var _temp, _this, _ret;
                              
                                  (0, _classCallCheck3.default)(this, RaisedButton);
                              
                                  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                                    args[_key] = arguments[_key];
                                  }
                              
                                  return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = RaisedButton.__proto__ || (0, _getPrototypeOf2.default)(RaisedButton)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
                                    hovered: false,
                                    keyboardFocused: false,
                                    touched: false,
                                    initialZDepth: 0,
                                    zDepth: 0
                                  }, _this.handleMouseDown = function (event) {
                                    // only listen to left clicks
                                    if (event.button === 0) {
                                      _this.setState({
                                        zDepth: _this.state.initialZDepth + 1
                                      });
                                    }
                                    if (_this.props.onMouseDown) {
                                      _this.props.onMouseDown(event);
                                    }
                                  }, _this.handleMouseUp = function (event) {
                                    _this.setState({
                                      zDepth: _this.state.initialZDepth
                                    });
                                    if (_this.props.onMouseUp) {
                                      _this.props.onMouseUp(event);
                                    }
                                  }, _this.handleMouseLeave = function (event) {
                                    if (!_this.state.keyboardFocused) {
                                      _this.setState({
                                        zDepth: _this.state.initialZDepth,
                                        hovered: false
                                      });
                                    }
                                    if (_this.props.onMouseLeave) {
                                      _this.props.onMouseLeave(event);
                                    }
                                  }, _this.handleMouseEnter = function (event) {
                                    if (!_this.state.keyboardFocused && !_this.state.touched) {
                                      _this.setState({
                                        hovered: true
                                      });
                                    }
                                    if (_this.props.onMouseEnter) {
                                      _this.props.onMouseEnter(event);
                                    }
                                  }, _this.handleTouchStart = function (event) {
                                    _this.setState({
                                      touched: true,
                                      zDepth: _this.state.initialZDepth + 1
                                    });
                              
                                    if (_this.props.onTouchStart) {
                                      _this.props.onTouchStart(event);
                                    }
                                  }, _this.handleTouchEnd = function (event) {
                                    _this.setState({
                                      zDepth: _this.state.initialZDepth
                                    });
                              
                                    if (_this.props.onTouchEnd) {
                                      _this.props.onTouchEnd(event);
                                    }
                                  }, _this.handleKeyboardFocus = function (event, keyboardFocused) {
                                    var zDepth = keyboardFocused && !_this.props.disabled ? _this.state.initialZDepth + 1 : _this.state.initialZDepth;
                              
                                    _this.setState({
                                      zDepth: zDepth,
                                      keyboardFocused: keyboardFocused
                                    });
                                  }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
                                }
                                        disabled={false}
                                        fullWidth={false}
                                        label="Submit"
                                        labelPosition="after"
                                        onClick={[Function]}
                                        primary={false}
                                        secondary={true} />
                    </div>
          </form>
</div>,
        "_debugID": 4,
        "_renderedOutput": <div
          style={
                    Object {
                              "backgroundColor": "#efefef",
                              "margin": "auto",
                              "marginTop": 200,
                              "padding": 20,
                              "width": 350,
                            }
          }>
          <form
                    onSubmit={[Function]}>
                    <legend
                              className="row">
                              Forgot Password
                    </legend>
                    <div
                              className="form-col">
                              <div
                                        style={
                                                  Object {
                                                            "marginTop": 20,
                                                          }
                                        }>
                                        Enter your email address and we will send you a link to reset your password.
                              </div>
                              <function TextField() {
                                  var _ref;
                              
                                  var _temp, _this, _ret;
                              
                                  (0, _classCallCheck3.default)(this, TextField);
                              
                                  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                                    args[_key] = arguments[_key];
                                  }
                              
                                  return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = TextField.__proto__ || (0, _getPrototypeOf2.default)(TextField)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
                                    isFocused: false,
                                    errorText: undefined,
                                    hasValue: false,
                                    isClean: true
                                  }, _this.handleInputBlur = function (event) {
                                    _this.setState({ isFocused: false });
                                    if (_this.props.onBlur) _this.props.onBlur(event);
                                  }, _this.handleInputChange = function (event) {
                                    _this.setState({ hasValue: isValid(event.target.value), isClean: false });
                                    if (_this.props.onChange) _this.props.onChange(event, event.target.value);
                                  }, _this.handleInputFocus = function (event) {
                                    if (_this.props.disabled) {
                                      return;
                                    }
                                    _this.setState({ isFocused: true });
                                    if (_this.props.onFocus) {
                                      _this.props.onFocus(event);
                                    }
                                  }, _this.handleHeightChange = function (event, height) {
                                    var newHeight = height + 24;
                                    if (_this.props.floatingLabelText) {
                                      newHeight += 24;
                                    }
                                    _reactDom2.default.findDOMNode(_this).style.height = newHeight + 'px';
                                  }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
                                }
                                        autoFocus={true}
                                        disabled={false}
                                        floatingLabelFixed={false}
                                        floatingLabelText="Email"
                                        fullWidth={false}
                                        multiLine={false}
                                        rows={1}
                                        type="text"
                                        underlineShow={true} />
                              <div
                                        style={
                                                  Object {
                                                            "marginTop": 20,
                                                          }
                                        } />
                              <function RaisedButton() {
                                  var _ref;
                              
                                  var _temp, _this, _ret;
                              
                                  (0, _classCallCheck3.default)(this, RaisedButton);
                              
                                  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                                    args[_key] = arguments[_key];
                                  }
                              
                                  return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = RaisedButton.__proto__ || (0, _getPrototypeOf2.default)(RaisedButton)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
                                    hovered: false,
                                    keyboardFocused: false,
                                    touched: false,
                                    initialZDepth: 0,
                                    zDepth: 0
                                  }, _this.handleMouseDown = function (event) {
                                    // only listen to left clicks
                                    if (event.button === 0) {
                                      _this.setState({
                                        zDepth: _this.state.initialZDepth + 1
                                      });
                                    }
                                    if (_this.props.onMouseDown) {
                                      _this.props.onMouseDown(event);
                                    }
                                  }, _this.handleMouseUp = function (event) {
                                    _this.setState({
                                      zDepth: _this.state.initialZDepth
                                    });
                                    if (_this.props.onMouseUp) {
                                      _this.props.onMouseUp(event);
                                    }
                                  }, _this.handleMouseLeave = function (event) {
                                    if (!_this.state.keyboardFocused) {
                                      _this.setState({
                                        zDepth: _this.state.initialZDepth,
                                        hovered: false
                                      });
                                    }
                                    if (_this.props.onMouseLeave) {
                                      _this.props.onMouseLeave(event);
                                    }
                                  }, _this.handleMouseEnter = function (event) {
                                    if (!_this.state.keyboardFocused && !_this.state.touched) {
                                      _this.setState({
                                        hovered: true
                                      });
                                    }
                                    if (_this.props.onMouseEnter) {
                                      _this.props.onMouseEnter(event);
                                    }
                                  }, _this.handleTouchStart = function (event) {
                                    _this.setState({
                                      touched: true,
                                      zDepth: _this.state.initialZDepth + 1
                                    });
                              
                                    if (_this.props.onTouchStart) {
                                      _this.props.onTouchStart(event);
                                    }
                                  }, _this.handleTouchEnd = function (event) {
                                    _this.setState({
                                      zDepth: _this.state.initialZDepth
                                    });
                              
                                    if (_this.props.onTouchEnd) {
                                      _this.props.onTouchEnd(event);
                                    }
                                  }, _this.handleKeyboardFocus = function (event, keyboardFocused) {
                                    var zDepth = keyboardFocused && !_this.props.disabled ? _this.state.initialZDepth + 1 : _this.state.initialZDepth;
                              
                                    _this.setState({
                                      zDepth: zDepth,
                                      keyboardFocused: keyboardFocused
                                    });
                                  }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
                                }
                                        disabled={false}
                                        fullWidth={false}
                                        label="Submit"
                                        labelPosition="after"
                                        onClick={[Function]}
                                        primary={false}
                                        secondary={true} />
                    </div>
          </form>
</div>,
      },
      "_renderedNodeType": 0,
      "_rootNodeID": 0,
      "_topLevelWrapper": null,
      "_updateBatchNumber": null,
      "_warnedAboutRefsInRender": false,
    },
    "getRenderOutput": [Function],
    "render": [Function],
  },
  "root": [Circular],
  "unrendered": <class Forgotform extends /* istanbul ignore next */_react.Component {/* istanbul ignore next */constructor() {var _temp;return _temp = super(...arguments), this.

    _onSubmit = () => {

    }, _temp;}

  render() {

    return (
      /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ style: { width: 350, margin: 'auto', marginTop: 200, backgroundColor: '#efefef', padding: 20 }, __source: { fileName: _jsxFileName, lineNumber: 18 }, __self: this },
        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'form', /* istanbul ignore next */{ onSubmit: () => this._onSubmit(), __source: { fileName: _jsxFileName, lineNumber: 19 }, __self: this },

          /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'legend', /* istanbul ignore next */{ className: 'row', __source: { fileName: _jsxFileName, lineNumber: 21 }, __self: this }, /* istanbul ignore next */'Forgot Password'),
          /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'form-col', __source: { fileName: _jsxFileName, lineNumber: 22 }, __self: this },
            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ style: { marginTop: 20 }, __source: { fileName: _jsxFileName, lineNumber: 23 }, __self: this }, /* istanbul ignore next */'Enter your email address and we will send you a link to reset your password.'),
            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_TextField2.default, /* istanbul ignore next */{
              floatingLabelText: 'Email',
              autoFocus: true
              // onChange={() => this._onPropChange('name')}
              // onBlur={() => this._validate('name')}
              // ref='name'
              // value={scratch.name || ''}
              , __source: { fileName: _jsxFileName, lineNumber: 24 }, __self: this }),
            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ style: { marginTop: 20 }, __source: { fileName: _jsxFileName, lineNumber: 32 }, __self: this }),
            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_RaisedButton2.default
            // icon={<ActionDone />}
            , /* istanbul ignore next */{ label: 'Submit',
              onClick: () => this._onSubmit(),
              secondary: true, __source: { fileName: _jsxFileName, lineNumber: 33 }, __self: this })))));






  }} />,
}
`;

exports[`components <Loginform /> matches snapshot 1`] = `
ShallowWrapper {
  "complexSelector": ComplexSelector {
    "buildPredicate": [Function],
    "childrenOfNode": [Function],
    "findWhereUnwrapped": [Function],
  },
  "length": 1,
  "node": <div
    style={
        Object {
            "backgroundColor": "#efefef",
            "margin": "auto",
            "marginTop": 200,
            "padding": 20,
            "width": 350,
          }
    }>
    <form
        onSubmit={[Function]}>
        <legend
            className="row">
            Enter Login Credentials
        </legend>
        <div
            className="form-col">
            <function TextField() {
                var _ref;
            
                var _temp, _this, _ret;
            
                (0, _classCallCheck3.default)(this, TextField);
            
                for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                  args[_key] = arguments[_key];
                }
            
                return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = TextField.__proto__ || (0, _getPrototypeOf2.default)(TextField)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
                  isFocused: false,
                  errorText: undefined,
                  hasValue: false,
                  isClean: true
                }, _this.handleInputBlur = function (event) {
                  _this.setState({ isFocused: false });
                  if (_this.props.onBlur) _this.props.onBlur(event);
                }, _this.handleInputChange = function (event) {
                  _this.setState({ hasValue: isValid(event.target.value), isClean: false });
                  if (_this.props.onChange) _this.props.onChange(event, event.target.value);
                }, _this.handleInputFocus = function (event) {
                  if (_this.props.disabled) {
                    return;
                  }
                  _this.setState({ isFocused: true });
                  if (_this.props.onFocus) {
                    _this.props.onFocus(event);
                  }
                }, _this.handleHeightChange = function (event, height) {
                  var newHeight = height + 24;
                  if (_this.props.floatingLabelText) {
                    newHeight += 24;
                  }
                  _reactDom2.default.findDOMNode(_this).style.height = newHeight + 'px';
                }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
              }
                disabled={false}
                floatingLabelFixed={false}
                floatingLabelText="Email"
                fullWidth={false}
                multiLine={false}
                onChange={[Function]}
                rows={1}
                type="email"
                underlineShow={true} />
            <function TextField() {
                var _ref;
            
                var _temp, _this, _ret;
            
                (0, _classCallCheck3.default)(this, TextField);
            
                for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                  args[_key] = arguments[_key];
                }
            
                return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = TextField.__proto__ || (0, _getPrototypeOf2.default)(TextField)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
                  isFocused: false,
                  errorText: undefined,
                  hasValue: false,
                  isClean: true
                }, _this.handleInputBlur = function (event) {
                  _this.setState({ isFocused: false });
                  if (_this.props.onBlur) _this.props.onBlur(event);
                }, _this.handleInputChange = function (event) {
                  _this.setState({ hasValue: isValid(event.target.value), isClean: false });
                  if (_this.props.onChange) _this.props.onChange(event, event.target.value);
                }, _this.handleInputFocus = function (event) {
                  if (_this.props.disabled) {
                    return;
                  }
                  _this.setState({ isFocused: true });
                  if (_this.props.onFocus) {
                    _this.props.onFocus(event);
                  }
                }, _this.handleHeightChange = function (event, height) {
                  var newHeight = height + 24;
                  if (_this.props.floatingLabelText) {
                    newHeight += 24;
                  }
                  _reactDom2.default.findDOMNode(_this).style.height = newHeight + 'px';
                }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
              }
                disabled={false}
                floatingLabelFixed={false}
                floatingLabelText="Password"
                fullWidth={false}
                multiLine={false}
                onChange={[Function]}
                rows={1}
                type="password"
                underlineShow={true} />
            <div
                style={
                    Object {
                        "marginTop": 20,
                      }
                } />
            <function RaisedButton() {
                var _ref;
            
                var _temp, _this, _ret;
            
                (0, _classCallCheck3.default)(this, RaisedButton);
            
                for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                  args[_key] = arguments[_key];
                }
            
                return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = RaisedButton.__proto__ || (0, _getPrototypeOf2.default)(RaisedButton)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
                  hovered: false,
                  keyboardFocused: false,
                  touched: false,
                  initialZDepth: 0,
                  zDepth: 0
                }, _this.handleMouseDown = function (event) {
                  // only listen to left clicks
                  if (event.button === 0) {
                    _this.setState({
                      zDepth: _this.state.initialZDepth + 1
                    });
                  }
                  if (_this.props.onMouseDown) {
                    _this.props.onMouseDown(event);
                  }
                }, _this.handleMouseUp = function (event) {
                  _this.setState({
                    zDepth: _this.state.initialZDepth
                  });
                  if (_this.props.onMouseUp) {
                    _this.props.onMouseUp(event);
                  }
                }, _this.handleMouseLeave = function (event) {
                  if (!_this.state.keyboardFocused) {
                    _this.setState({
                      zDepth: _this.state.initialZDepth,
                      hovered: false
                    });
                  }
                  if (_this.props.onMouseLeave) {
                    _this.props.onMouseLeave(event);
                  }
                }, _this.handleMouseEnter = function (event) {
                  if (!_this.state.keyboardFocused && !_this.state.touched) {
                    _this.setState({
                      hovered: true
                    });
                  }
                  if (_this.props.onMouseEnter) {
                    _this.props.onMouseEnter(event);
                  }
                }, _this.handleTouchStart = function (event) {
                  _this.setState({
                    touched: true,
                    zDepth: _this.state.initialZDepth + 1
                  });
            
                  if (_this.props.onTouchStart) {
                    _this.props.onTouchStart(event);
                  }
                }, _this.handleTouchEnd = function (event) {
                  _this.setState({
                    zDepth: _this.state.initialZDepth
                  });
            
                  if (_this.props.onTouchEnd) {
                    _this.props.onTouchEnd(event);
                  }
                }, _this.handleKeyboardFocus = function (event, keyboardFocused) {
                  var zDepth = keyboardFocused && !_this.props.disabled ? _this.state.initialZDepth + 1 : _this.state.initialZDepth;
            
                  _this.setState({
                    zDepth: zDepth,
                    keyboardFocused: keyboardFocused
                  });
                }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
              }
                disabled={false}
                fullWidth={false}
                label="Login"
                labelPosition="after"
                onClick={[Function]}
                primary={false}
                secondary={true} />
            <div
                style={
                    Object {
                        "marginTop": 20,
                        "textAlign": "right",
                      }
                }>
                <function (props, context, updater) {
                      // This constructor gets overridden by mocks. The argument is used
                      // by mocks to assert on what gets mounted.
                
                      if (process.env.NODE_ENV !== 'production') {
                        process.env.NODE_ENV !== 'production' ? warning(this instanceof Constructor, 'Something is calling a React component directly. Use a factory or ' + 'JSX instead. See: https://fb.me/react-legacyfactory') : void 0;
                      }
                
                      // Wire up auto-binding
                      if (this.__reactAutoBindPairs.length) {
                        bindAutoBindMethods(this);
                      }
                
                      this.props = props;
                      this.context = context;
                      this.refs = emptyObject;
                      this.updater = updater || ReactNoopUpdateQueue;
                
                      this.state = null;
                
                      // ReactClasses doesn't have constructors. Instead, they use the
                      // getInitialState and componentWillMount methods for initialization.
                
                      var initialState = this.getInitialState ? this.getInitialState() : null;
                      if (process.env.NODE_ENV !== 'production') {
                        // We allow auto-mocks to proceed as if they're returning null.
                        if (initialState === undefined && this.getInitialState._isMockFunction) {
                          // This is probably bad practice. Consider warning here and
                          // deprecating this convenience.
                          initialState = null;
                        }
                      }
                      !(typeof initialState === 'object' && !Array.isArray(initialState)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.getInitialState(): must return an object or null', Constructor.displayName || 'ReactCompositeComponent') : _prodInvariant('82', Constructor.displayName || 'ReactCompositeComponent') : void 0;
                
                      this.state = initialState;
                    }
                    onlyActiveOnIndex={false}
                    style={Object {}}>
                    Forgot Password
                </function (props, context, updater) {
                      // This constructor gets overridden by mocks. The argument is used
                      // by mocks to assert on what gets mounted.
                
                      if (process.env.NODE_ENV !== 'production') {
                        process.env.NODE_ENV !== 'production' ? warning(this instanceof Constructor, 'Something is calling a React component directly. Use a factory or ' + 'JSX instead. See: https://fb.me/react-legacyfactory') : void 0;
                      }
                
                      // Wire up auto-binding
                      if (this.__reactAutoBindPairs.length) {
                        bindAutoBindMethods(this);
                      }
                
                      this.props = props;
                      this.context = context;
                      this.refs = emptyObject;
                      this.updater = updater || ReactNoopUpdateQueue;
                
                      this.state = null;
                
                      // ReactClasses doesn't have constructors. Instead, they use the
                      // getInitialState and componentWillMount methods for initialization.
                
                      var initialState = this.getInitialState ? this.getInitialState() : null;
                      if (process.env.NODE_ENV !== 'production') {
                        // We allow auto-mocks to proceed as if they're returning null.
                        if (initialState === undefined && this.getInitialState._isMockFunction) {
                          // This is probably bad practice. Consider warning here and
                          // deprecating this convenience.
                          initialState = null;
                        }
                      }
                      !(typeof initialState === 'object' && !Array.isArray(initialState)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.getInitialState(): must return an object or null', Constructor.displayName || 'ReactCompositeComponent') : _prodInvariant('82', Constructor.displayName || 'ReactCompositeComponent') : void 0;
                
                      this.state = initialState;
                    }>
            </div>
        </div>
    </form>
</div>,
  "nodes": Array [
    <div
      style={
            Object {
                  "backgroundColor": "#efefef",
                  "margin": "auto",
                  "marginTop": 200,
                  "padding": 20,
                  "width": 350,
                }
      }>
      <form
            onSubmit={[Function]}>
            <legend
                  className="row">
                  Enter Login Credentials
            </legend>
            <div
                  className="form-col">
                  <function TextField() {
                      var _ref;
                  
                      var _temp, _this, _ret;
                  
                      (0, _classCallCheck3.default)(this, TextField);
                  
                      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                        args[_key] = arguments[_key];
                      }
                  
                      return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = TextField.__proto__ || (0, _getPrototypeOf2.default)(TextField)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
                        isFocused: false,
                        errorText: undefined,
                        hasValue: false,
                        isClean: true
                      }, _this.handleInputBlur = function (event) {
                        _this.setState({ isFocused: false });
                        if (_this.props.onBlur) _this.props.onBlur(event);
                      }, _this.handleInputChange = function (event) {
                        _this.setState({ hasValue: isValid(event.target.value), isClean: false });
                        if (_this.props.onChange) _this.props.onChange(event, event.target.value);
                      }, _this.handleInputFocus = function (event) {
                        if (_this.props.disabled) {
                          return;
                        }
                        _this.setState({ isFocused: true });
                        if (_this.props.onFocus) {
                          _this.props.onFocus(event);
                        }
                      }, _this.handleHeightChange = function (event, height) {
                        var newHeight = height + 24;
                        if (_this.props.floatingLabelText) {
                          newHeight += 24;
                        }
                        _reactDom2.default.findDOMNode(_this).style.height = newHeight + 'px';
                      }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
                    }
                        disabled={false}
                        floatingLabelFixed={false}
                        floatingLabelText="Email"
                        fullWidth={false}
                        multiLine={false}
                        onChange={[Function]}
                        rows={1}
                        type="email"
                        underlineShow={true} />
                  <function TextField() {
                      var _ref;
                  
                      var _temp, _this, _ret;
                  
                      (0, _classCallCheck3.default)(this, TextField);
                  
                      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                        args[_key] = arguments[_key];
                      }
                  
                      return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = TextField.__proto__ || (0, _getPrototypeOf2.default)(TextField)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
                        isFocused: false,
                        errorText: undefined,
                        hasValue: false,
                        isClean: true
                      }, _this.handleInputBlur = function (event) {
                        _this.setState({ isFocused: false });
                        if (_this.props.onBlur) _this.props.onBlur(event);
                      }, _this.handleInputChange = function (event) {
                        _this.setState({ hasValue: isValid(event.target.value), isClean: false });
                        if (_this.props.onChange) _this.props.onChange(event, event.target.value);
                      }, _this.handleInputFocus = function (event) {
                        if (_this.props.disabled) {
                          return;
                        }
                        _this.setState({ isFocused: true });
                        if (_this.props.onFocus) {
                          _this.props.onFocus(event);
                        }
                      }, _this.handleHeightChange = function (event, height) {
                        var newHeight = height + 24;
                        if (_this.props.floatingLabelText) {
                          newHeight += 24;
                        }
                        _reactDom2.default.findDOMNode(_this).style.height = newHeight + 'px';
                      }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
                    }
                        disabled={false}
                        floatingLabelFixed={false}
                        floatingLabelText="Password"
                        fullWidth={false}
                        multiLine={false}
                        onChange={[Function]}
                        rows={1}
                        type="password"
                        underlineShow={true} />
                  <div
                        style={
                              Object {
                                    "marginTop": 20,
                                  }
                        } />
                  <function RaisedButton() {
                      var _ref;
                  
                      var _temp, _this, _ret;
                  
                      (0, _classCallCheck3.default)(this, RaisedButton);
                  
                      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                        args[_key] = arguments[_key];
                      }
                  
                      return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = RaisedButton.__proto__ || (0, _getPrototypeOf2.default)(RaisedButton)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
                        hovered: false,
                        keyboardFocused: false,
                        touched: false,
                        initialZDepth: 0,
                        zDepth: 0
                      }, _this.handleMouseDown = function (event) {
                        // only listen to left clicks
                        if (event.button === 0) {
                          _this.setState({
                            zDepth: _this.state.initialZDepth + 1
                          });
                        }
                        if (_this.props.onMouseDown) {
                          _this.props.onMouseDown(event);
                        }
                      }, _this.handleMouseUp = function (event) {
                        _this.setState({
                          zDepth: _this.state.initialZDepth
                        });
                        if (_this.props.onMouseUp) {
                          _this.props.onMouseUp(event);
                        }
                      }, _this.handleMouseLeave = function (event) {
                        if (!_this.state.keyboardFocused) {
                          _this.setState({
                            zDepth: _this.state.initialZDepth,
                            hovered: false
                          });
                        }
                        if (_this.props.onMouseLeave) {
                          _this.props.onMouseLeave(event);
                        }
                      }, _this.handleMouseEnter = function (event) {
                        if (!_this.state.keyboardFocused && !_this.state.touched) {
                          _this.setState({
                            hovered: true
                          });
                        }
                        if (_this.props.onMouseEnter) {
                          _this.props.onMouseEnter(event);
                        }
                      }, _this.handleTouchStart = function (event) {
                        _this.setState({
                          touched: true,
                          zDepth: _this.state.initialZDepth + 1
                        });
                  
                        if (_this.props.onTouchStart) {
                          _this.props.onTouchStart(event);
                        }
                      }, _this.handleTouchEnd = function (event) {
                        _this.setState({
                          zDepth: _this.state.initialZDepth
                        });
                  
                        if (_this.props.onTouchEnd) {
                          _this.props.onTouchEnd(event);
                        }
                      }, _this.handleKeyboardFocus = function (event, keyboardFocused) {
                        var zDepth = keyboardFocused && !_this.props.disabled ? _this.state.initialZDepth + 1 : _this.state.initialZDepth;
                  
                        _this.setState({
                          zDepth: zDepth,
                          keyboardFocused: keyboardFocused
                        });
                      }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
                    }
                        disabled={false}
                        fullWidth={false}
                        label="Login"
                        labelPosition="after"
                        onClick={[Function]}
                        primary={false}
                        secondary={true} />
                  <div
                        style={
                              Object {
                                    "marginTop": 20,
                                    "textAlign": "right",
                                  }
                        }>
                        <function (props, context, updater) {
                              // This constructor gets overridden by mocks. The argument is used
                              // by mocks to assert on what gets mounted.
                        
                              if (process.env.NODE_ENV !== 'production') {
                                process.env.NODE_ENV !== 'production' ? warning(this instanceof Constructor, 'Something is calling a React component directly. Use a factory or ' + 'JSX instead. See: https://fb.me/react-legacyfactory') : void 0;
                              }
                        
                              // Wire up auto-binding
                              if (this.__reactAutoBindPairs.length) {
                                bindAutoBindMethods(this);
                              }
                        
                              this.props = props;
                              this.context = context;
                              this.refs = emptyObject;
                              this.updater = updater || ReactNoopUpdateQueue;
                        
                              this.state = null;
                        
                              // ReactClasses doesn't have constructors. Instead, they use the
                              // getInitialState and componentWillMount methods for initialization.
                        
                              var initialState = this.getInitialState ? this.getInitialState() : null;
                              if (process.env.NODE_ENV !== 'production') {
                                // We allow auto-mocks to proceed as if they're returning null.
                                if (initialState === undefined && this.getInitialState._isMockFunction) {
                                  // This is probably bad practice. Consider warning here and
                                  // deprecating this convenience.
                                  initialState = null;
                                }
                              }
                              !(typeof initialState === 'object' && !Array.isArray(initialState)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.getInitialState(): must return an object or null', Constructor.displayName || 'ReactCompositeComponent') : _prodInvariant('82', Constructor.displayName || 'ReactCompositeComponent') : void 0;
                        
                              this.state = initialState;
                            }
                              onlyActiveOnIndex={false}
                              style={Object {}}>
                              Forgot Password
                        </function (props, context, updater) {
                              // This constructor gets overridden by mocks. The argument is used
                              // by mocks to assert on what gets mounted.
                        
                              if (process.env.NODE_ENV !== 'production') {
                                process.env.NODE_ENV !== 'production' ? warning(this instanceof Constructor, 'Something is calling a React component directly. Use a factory or ' + 'JSX instead. See: https://fb.me/react-legacyfactory') : void 0;
                              }
                        
                              // Wire up auto-binding
                              if (this.__reactAutoBindPairs.length) {
                                bindAutoBindMethods(this);
                              }
                        
                              this.props = props;
                              this.context = context;
                              this.refs = emptyObject;
                              this.updater = updater || ReactNoopUpdateQueue;
                        
                              this.state = null;
                        
                              // ReactClasses doesn't have constructors. Instead, they use the
                              // getInitialState and componentWillMount methods for initialization.
                        
                              var initialState = this.getInitialState ? this.getInitialState() : null;
                              if (process.env.NODE_ENV !== 'production') {
                                // We allow auto-mocks to proceed as if they're returning null.
                                if (initialState === undefined && this.getInitialState._isMockFunction) {
                                  // This is probably bad practice. Consider warning here and
                                  // deprecating this convenience.
                                  initialState = null;
                                }
                              }
                              !(typeof initialState === 'object' && !Array.isArray(initialState)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.getInitialState(): must return an object or null', Constructor.displayName || 'ReactCompositeComponent') : _prodInvariant('82', Constructor.displayName || 'ReactCompositeComponent') : void 0;
                        
                              this.state = initialState;
                            }>
                  </div>
            </div>
      </form>
</div>,
  ],
  "options": Object {},
  "renderer": ReactShallowRenderer {
    "_instance": ShallowComponentWrapper {
      "_calledComponentWillUnmount": false,
      "_compositeType": 0,
      "_context": Object {},
      "_currentElement": <class Loginform extends /* istanbul ignore next */_react.Component {
  constructor(props) {
    super(props); /* istanbul ignore next */this.






    _onChange = field => {
      const val = this.refs[field].input.value;
      this.setState({ [field]: val });
      console.log('val:', val);
    }; /* istanbul ignore next */this.

    _onSubmit = () => {

    };this.state = { email: null, password: null };}

  render() {

    console.log('state:', this.state);

    return (
      /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ style: { width: 350, margin: 'auto', marginTop: 200, backgroundColor: '#efefef', padding: 20 }, __source: { fileName: _jsxFileName, lineNumber: 33 }, __self: this },
        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'form', /* istanbul ignore next */{ onSubmit: () => this._onSubmit(), __source: { fileName: _jsxFileName, lineNumber: 34 }, __self: this },

          /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'legend', /* istanbul ignore next */{ className: 'row', __source: { fileName: _jsxFileName, lineNumber: 36 }, __self: this }, /* istanbul ignore next */'Enter Login Credentials'),
          /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'form-col', __source: { fileName: _jsxFileName, lineNumber: 37 }, __self: this },
            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_TextField2.default, /* istanbul ignore next */{
              floatingLabelText: 'Email',
              type: 'email',
              onChange: () => this._onChange('email')
              // onBlur={() => this._validate('name')}
              , ref: 'email'
              // value={scratch.name || ''}
              , __source: { fileName: _jsxFileName, lineNumber: 38 }, __self: this }),
            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_TextField2.default, /* istanbul ignore next */{
              floatingLabelText: 'Password',
              type: 'password',
              onChange: () => this._onChange('password')
              // onBlur={() => this._validate('name')}
              , ref: 'password'
              // value={scratch.name || ''}
              , __source: { fileName: _jsxFileName, lineNumber: 46 }, __self: this }),
            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ style: { marginTop: 20 }, __source: { fileName: _jsxFileName, lineNumber: 54 }, __self: this }),
            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_RaisedButton2.default
            // icon={<ActionDone />}
            , /* istanbul ignore next */{ label: 'Login',
              onClick: () => this._onSubmit(),
              secondary: true, __source: { fileName: _jsxFileName, lineNumber: 55 }, __self: this }),

            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ style: { marginTop: 20, textAlign: 'right' }, __source: { fileName: _jsxFileName, lineNumber: 61 }, __self: this },
              /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactRouter.Link, /* istanbul ignore next */{ __source: { fileName: _jsxFileName, lineNumber: 62 }, __self: this }, /* istanbul ignore next */'Forgot Password'))))));






  }} />,
      "_debugID": 1,
      "_hostContainerInfo": null,
      "_hostParent": null,
      "_instance": Loginform {
        "_onChange": [Function],
        "_onSubmit": [Function],
        "_reactInternalInstance": [Circular],
        "context": Object {},
        "props": Object {},
        "refs": Object {},
        "state": Object {
          "email": null,
          "password": null,
        },
        "updater": Object {
          "enqueueCallback": [Function],
          "enqueueCallbackInternal": [Function],
          "enqueueElementInternal": [Function],
          "enqueueForceUpdate": [Function],
          "enqueueReplaceState": [Function],
          "enqueueSetState": [Function],
          "isMounted": [Function],
          "validateCallback": [Function],
        },
      },
      "_mountOrder": 1,
      "_pendingCallbacks": null,
      "_pendingElement": null,
      "_pendingForceUpdate": false,
      "_pendingReplaceState": false,
      "_pendingStateQueue": null,
      "_renderedComponent": NoopInternalComponent {
        "_currentElement": <div
          style={
                    Object {
                              "backgroundColor": "#efefef",
                              "margin": "auto",
                              "marginTop": 200,
                              "padding": 20,
                              "width": 350,
                            }
          }>
          <form
                    onSubmit={[Function]}>
                    <legend
                              className="row">
                              Enter Login Credentials
                    </legend>
                    <div
                              className="form-col">
                              <function TextField() {
                                  var _ref;
                              
                                  var _temp, _this, _ret;
                              
                                  (0, _classCallCheck3.default)(this, TextField);
                              
                                  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                                    args[_key] = arguments[_key];
                                  }
                              
                                  return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = TextField.__proto__ || (0, _getPrototypeOf2.default)(TextField)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
                                    isFocused: false,
                                    errorText: undefined,
                                    hasValue: false,
                                    isClean: true
                                  }, _this.handleInputBlur = function (event) {
                                    _this.setState({ isFocused: false });
                                    if (_this.props.onBlur) _this.props.onBlur(event);
                                  }, _this.handleInputChange = function (event) {
                                    _this.setState({ hasValue: isValid(event.target.value), isClean: false });
                                    if (_this.props.onChange) _this.props.onChange(event, event.target.value);
                                  }, _this.handleInputFocus = function (event) {
                                    if (_this.props.disabled) {
                                      return;
                                    }
                                    _this.setState({ isFocused: true });
                                    if (_this.props.onFocus) {
                                      _this.props.onFocus(event);
                                    }
                                  }, _this.handleHeightChange = function (event, height) {
                                    var newHeight = height + 24;
                                    if (_this.props.floatingLabelText) {
                                      newHeight += 24;
                                    }
                                    _reactDom2.default.findDOMNode(_this).style.height = newHeight + 'px';
                                  }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
                                }
                                        disabled={false}
                                        floatingLabelFixed={false}
                                        floatingLabelText="Email"
                                        fullWidth={false}
                                        multiLine={false}
                                        onChange={[Function]}
                                        rows={1}
                                        type="email"
                                        underlineShow={true} />
                              <function TextField() {
                                  var _ref;
                              
                                  var _temp, _this, _ret;
                              
                                  (0, _classCallCheck3.default)(this, TextField);
                              
                                  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                                    args[_key] = arguments[_key];
                                  }
                              
                                  return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = TextField.__proto__ || (0, _getPrototypeOf2.default)(TextField)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
                                    isFocused: false,
                                    errorText: undefined,
                                    hasValue: false,
                                    isClean: true
                                  }, _this.handleInputBlur = function (event) {
                                    _this.setState({ isFocused: false });
                                    if (_this.props.onBlur) _this.props.onBlur(event);
                                  }, _this.handleInputChange = function (event) {
                                    _this.setState({ hasValue: isValid(event.target.value), isClean: false });
                                    if (_this.props.onChange) _this.props.onChange(event, event.target.value);
                                  }, _this.handleInputFocus = function (event) {
                                    if (_this.props.disabled) {
                                      return;
                                    }
                                    _this.setState({ isFocused: true });
                                    if (_this.props.onFocus) {
                                      _this.props.onFocus(event);
                                    }
                                  }, _this.handleHeightChange = function (event, height) {
                                    var newHeight = height + 24;
                                    if (_this.props.floatingLabelText) {
                                      newHeight += 24;
                                    }
                                    _reactDom2.default.findDOMNode(_this).style.height = newHeight + 'px';
                                  }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
                                }
                                        disabled={false}
                                        floatingLabelFixed={false}
                                        floatingLabelText="Password"
                                        fullWidth={false}
                                        multiLine={false}
                                        onChange={[Function]}
                                        rows={1}
                                        type="password"
                                        underlineShow={true} />
                              <div
                                        style={
                                                  Object {
                                                            "marginTop": 20,
                                                          }
                                        } />
                              <function RaisedButton() {
                                  var _ref;
                              
                                  var _temp, _this, _ret;
                              
                                  (0, _classCallCheck3.default)(this, RaisedButton);
                              
                                  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                                    args[_key] = arguments[_key];
                                  }
                              
                                  return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = RaisedButton.__proto__ || (0, _getPrototypeOf2.default)(RaisedButton)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
                                    hovered: false,
                                    keyboardFocused: false,
                                    touched: false,
                                    initialZDepth: 0,
                                    zDepth: 0
                                  }, _this.handleMouseDown = function (event) {
                                    // only listen to left clicks
                                    if (event.button === 0) {
                                      _this.setState({
                                        zDepth: _this.state.initialZDepth + 1
                                      });
                                    }
                                    if (_this.props.onMouseDown) {
                                      _this.props.onMouseDown(event);
                                    }
                                  }, _this.handleMouseUp = function (event) {
                                    _this.setState({
                                      zDepth: _this.state.initialZDepth
                                    });
                                    if (_this.props.onMouseUp) {
                                      _this.props.onMouseUp(event);
                                    }
                                  }, _this.handleMouseLeave = function (event) {
                                    if (!_this.state.keyboardFocused) {
                                      _this.setState({
                                        zDepth: _this.state.initialZDepth,
                                        hovered: false
                                      });
                                    }
                                    if (_this.props.onMouseLeave) {
                                      _this.props.onMouseLeave(event);
                                    }
                                  }, _this.handleMouseEnter = function (event) {
                                    if (!_this.state.keyboardFocused && !_this.state.touched) {
                                      _this.setState({
                                        hovered: true
                                      });
                                    }
                                    if (_this.props.onMouseEnter) {
                                      _this.props.onMouseEnter(event);
                                    }
                                  }, _this.handleTouchStart = function (event) {
                                    _this.setState({
                                      touched: true,
                                      zDepth: _this.state.initialZDepth + 1
                                    });
                              
                                    if (_this.props.onTouchStart) {
                                      _this.props.onTouchStart(event);
                                    }
                                  }, _this.handleTouchEnd = function (event) {
                                    _this.setState({
                                      zDepth: _this.state.initialZDepth
                                    });
                              
                                    if (_this.props.onTouchEnd) {
                                      _this.props.onTouchEnd(event);
                                    }
                                  }, _this.handleKeyboardFocus = function (event, keyboardFocused) {
                                    var zDepth = keyboardFocused && !_this.props.disabled ? _this.state.initialZDepth + 1 : _this.state.initialZDepth;
                              
                                    _this.setState({
                                      zDepth: zDepth,
                                      keyboardFocused: keyboardFocused
                                    });
                                  }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
                                }
                                        disabled={false}
                                        fullWidth={false}
                                        label="Login"
                                        labelPosition="after"
                                        onClick={[Function]}
                                        primary={false}
                                        secondary={true} />
                              <div
                                        style={
                                                  Object {
                                                            "marginTop": 20,
                                                            "textAlign": "right",
                                                          }
                                        }>
                                        <function (props, context, updater) {
                                              // This constructor gets overridden by mocks. The argument is used
                                              // by mocks to assert on what gets mounted.
                                        
                                              if (process.env.NODE_ENV !== 'production') {
                                                process.env.NODE_ENV !== 'production' ? warning(this instanceof Constructor, 'Something is calling a React component directly. Use a factory or ' + 'JSX instead. See: https://fb.me/react-legacyfactory') : void 0;
                                              }
                                        
                                              // Wire up auto-binding
                                              if (this.__reactAutoBindPairs.length) {
                                                bindAutoBindMethods(this);
                                              }
                                        
                                              this.props = props;
                                              this.context = context;
                                              this.refs = emptyObject;
                                              this.updater = updater || ReactNoopUpdateQueue;
                                        
                                              this.state = null;
                                        
                                              // ReactClasses doesn't have constructors. Instead, they use the
                                              // getInitialState and componentWillMount methods for initialization.
                                        
                                              var initialState = this.getInitialState ? this.getInitialState() : null;
                                              if (process.env.NODE_ENV !== 'production') {
                                                // We allow auto-mocks to proceed as if they're returning null.
                                                if (initialState === undefined && this.getInitialState._isMockFunction) {
                                                  // This is probably bad practice. Consider warning here and
                                                  // deprecating this convenience.
                                                  initialState = null;
                                                }
                                              }
                                              !(typeof initialState === 'object' && !Array.isArray(initialState)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.getInitialState(): must return an object or null', Constructor.displayName || 'ReactCompositeComponent') : _prodInvariant('82', Constructor.displayName || 'ReactCompositeComponent') : void 0;
                                        
                                              this.state = initialState;
                                            }
                                                  onlyActiveOnIndex={false}
                                                  style={Object {}}>
                                                  Forgot Password
                                        </function (props, context, updater) {
                                              // This constructor gets overridden by mocks. The argument is used
                                              // by mocks to assert on what gets mounted.
                                        
                                              if (process.env.NODE_ENV !== 'production') {
                                                process.env.NODE_ENV !== 'production' ? warning(this instanceof Constructor, 'Something is calling a React component directly. Use a factory or ' + 'JSX instead. See: https://fb.me/react-legacyfactory') : void 0;
                                              }
                                        
                                              // Wire up auto-binding
                                              if (this.__reactAutoBindPairs.length) {
                                                bindAutoBindMethods(this);
                                              }
                                        
                                              this.props = props;
                                              this.context = context;
                                              this.refs = emptyObject;
                                              this.updater = updater || ReactNoopUpdateQueue;
                                        
                                              this.state = null;
                                        
                                              // ReactClasses doesn't have constructors. Instead, they use the
                                              // getInitialState and componentWillMount methods for initialization.
                                        
                                              var initialState = this.getInitialState ? this.getInitialState() : null;
                                              if (process.env.NODE_ENV !== 'production') {
                                                // We allow auto-mocks to proceed as if they're returning null.
                                                if (initialState === undefined && this.getInitialState._isMockFunction) {
                                                  // This is probably bad practice. Consider warning here and
                                                  // deprecating this convenience.
                                                  initialState = null;
                                                }
                                              }
                                              !(typeof initialState === 'object' && !Array.isArray(initialState)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.getInitialState(): must return an object or null', Constructor.displayName || 'ReactCompositeComponent') : _prodInvariant('82', Constructor.displayName || 'ReactCompositeComponent') : void 0;
                                        
                                              this.state = initialState;
                                            }>
                              </div>
                    </div>
          </form>
</div>,
        "_debugID": 2,
        "_renderedOutput": <div
          style={
                    Object {
                              "backgroundColor": "#efefef",
                              "margin": "auto",
                              "marginTop": 200,
                              "padding": 20,
                              "width": 350,
                            }
          }>
          <form
                    onSubmit={[Function]}>
                    <legend
                              className="row">
                              Enter Login Credentials
                    </legend>
                    <div
                              className="form-col">
                              <function TextField() {
                                  var _ref;
                              
                                  var _temp, _this, _ret;
                              
                                  (0, _classCallCheck3.default)(this, TextField);
                              
                                  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                                    args[_key] = arguments[_key];
                                  }
                              
                                  return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = TextField.__proto__ || (0, _getPrototypeOf2.default)(TextField)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
                                    isFocused: false,
                                    errorText: undefined,
                                    hasValue: false,
                                    isClean: true
                                  }, _this.handleInputBlur = function (event) {
                                    _this.setState({ isFocused: false });
                                    if (_this.props.onBlur) _this.props.onBlur(event);
                                  }, _this.handleInputChange = function (event) {
                                    _this.setState({ hasValue: isValid(event.target.value), isClean: false });
                                    if (_this.props.onChange) _this.props.onChange(event, event.target.value);
                                  }, _this.handleInputFocus = function (event) {
                                    if (_this.props.disabled) {
                                      return;
                                    }
                                    _this.setState({ isFocused: true });
                                    if (_this.props.onFocus) {
                                      _this.props.onFocus(event);
                                    }
                                  }, _this.handleHeightChange = function (event, height) {
                                    var newHeight = height + 24;
                                    if (_this.props.floatingLabelText) {
                                      newHeight += 24;
                                    }
                                    _reactDom2.default.findDOMNode(_this).style.height = newHeight + 'px';
                                  }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
                                }
                                        disabled={false}
                                        floatingLabelFixed={false}
                                        floatingLabelText="Email"
                                        fullWidth={false}
                                        multiLine={false}
                                        onChange={[Function]}
                                        rows={1}
                                        type="email"
                                        underlineShow={true} />
                              <function TextField() {
                                  var _ref;
                              
                                  var _temp, _this, _ret;
                              
                                  (0, _classCallCheck3.default)(this, TextField);
                              
                                  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                                    args[_key] = arguments[_key];
                                  }
                              
                                  return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = TextField.__proto__ || (0, _getPrototypeOf2.default)(TextField)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
                                    isFocused: false,
                                    errorText: undefined,
                                    hasValue: false,
                                    isClean: true
                                  }, _this.handleInputBlur = function (event) {
                                    _this.setState({ isFocused: false });
                                    if (_this.props.onBlur) _this.props.onBlur(event);
                                  }, _this.handleInputChange = function (event) {
                                    _this.setState({ hasValue: isValid(event.target.value), isClean: false });
                                    if (_this.props.onChange) _this.props.onChange(event, event.target.value);
                                  }, _this.handleInputFocus = function (event) {
                                    if (_this.props.disabled) {
                                      return;
                                    }
                                    _this.setState({ isFocused: true });
                                    if (_this.props.onFocus) {
                                      _this.props.onFocus(event);
                                    }
                                  }, _this.handleHeightChange = function (event, height) {
                                    var newHeight = height + 24;
                                    if (_this.props.floatingLabelText) {
                                      newHeight += 24;
                                    }
                                    _reactDom2.default.findDOMNode(_this).style.height = newHeight + 'px';
                                  }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
                                }
                                        disabled={false}
                                        floatingLabelFixed={false}
                                        floatingLabelText="Password"
                                        fullWidth={false}
                                        multiLine={false}
                                        onChange={[Function]}
                                        rows={1}
                                        type="password"
                                        underlineShow={true} />
                              <div
                                        style={
                                                  Object {
                                                            "marginTop": 20,
                                                          }
                                        } />
                              <function RaisedButton() {
                                  var _ref;
                              
                                  var _temp, _this, _ret;
                              
                                  (0, _classCallCheck3.default)(this, RaisedButton);
                              
                                  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                                    args[_key] = arguments[_key];
                                  }
                              
                                  return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = RaisedButton.__proto__ || (0, _getPrototypeOf2.default)(RaisedButton)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
                                    hovered: false,
                                    keyboardFocused: false,
                                    touched: false,
                                    initialZDepth: 0,
                                    zDepth: 0
                                  }, _this.handleMouseDown = function (event) {
                                    // only listen to left clicks
                                    if (event.button === 0) {
                                      _this.setState({
                                        zDepth: _this.state.initialZDepth + 1
                                      });
                                    }
                                    if (_this.props.onMouseDown) {
                                      _this.props.onMouseDown(event);
                                    }
                                  }, _this.handleMouseUp = function (event) {
                                    _this.setState({
                                      zDepth: _this.state.initialZDepth
                                    });
                                    if (_this.props.onMouseUp) {
                                      _this.props.onMouseUp(event);
                                    }
                                  }, _this.handleMouseLeave = function (event) {
                                    if (!_this.state.keyboardFocused) {
                                      _this.setState({
                                        zDepth: _this.state.initialZDepth,
                                        hovered: false
                                      });
                                    }
                                    if (_this.props.onMouseLeave) {
                                      _this.props.onMouseLeave(event);
                                    }
                                  }, _this.handleMouseEnter = function (event) {
                                    if (!_this.state.keyboardFocused && !_this.state.touched) {
                                      _this.setState({
                                        hovered: true
                                      });
                                    }
                                    if (_this.props.onMouseEnter) {
                                      _this.props.onMouseEnter(event);
                                    }
                                  }, _this.handleTouchStart = function (event) {
                                    _this.setState({
                                      touched: true,
                                      zDepth: _this.state.initialZDepth + 1
                                    });
                              
                                    if (_this.props.onTouchStart) {
                                      _this.props.onTouchStart(event);
                                    }
                                  }, _this.handleTouchEnd = function (event) {
                                    _this.setState({
                                      zDepth: _this.state.initialZDepth
                                    });
                              
                                    if (_this.props.onTouchEnd) {
                                      _this.props.onTouchEnd(event);
                                    }
                                  }, _this.handleKeyboardFocus = function (event, keyboardFocused) {
                                    var zDepth = keyboardFocused && !_this.props.disabled ? _this.state.initialZDepth + 1 : _this.state.initialZDepth;
                              
                                    _this.setState({
                                      zDepth: zDepth,
                                      keyboardFocused: keyboardFocused
                                    });
                                  }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
                                }
                                        disabled={false}
                                        fullWidth={false}
                                        label="Login"
                                        labelPosition="after"
                                        onClick={[Function]}
                                        primary={false}
                                        secondary={true} />
                              <div
                                        style={
                                                  Object {
                                                            "marginTop": 20,
                                                            "textAlign": "right",
                                                          }
                                        }>
                                        <function (props, context, updater) {
                                              // This constructor gets overridden by mocks. The argument is used
                                              // by mocks to assert on what gets mounted.
                                        
                                              if (process.env.NODE_ENV !== 'production') {
                                                process.env.NODE_ENV !== 'production' ? warning(this instanceof Constructor, 'Something is calling a React component directly. Use a factory or ' + 'JSX instead. See: https://fb.me/react-legacyfactory') : void 0;
                                              }
                                        
                                              // Wire up auto-binding
                                              if (this.__reactAutoBindPairs.length) {
                                                bindAutoBindMethods(this);
                                              }
                                        
                                              this.props = props;
                                              this.context = context;
                                              this.refs = emptyObject;
                                              this.updater = updater || ReactNoopUpdateQueue;
                                        
                                              this.state = null;
                                        
                                              // ReactClasses doesn't have constructors. Instead, they use the
                                              // getInitialState and componentWillMount methods for initialization.
                                        
                                              var initialState = this.getInitialState ? this.getInitialState() : null;
                                              if (process.env.NODE_ENV !== 'production') {
                                                // We allow auto-mocks to proceed as if they're returning null.
                                                if (initialState === undefined && this.getInitialState._isMockFunction) {
                                                  // This is probably bad practice. Consider warning here and
                                                  // deprecating this convenience.
                                                  initialState = null;
                                                }
                                              }
                                              !(typeof initialState === 'object' && !Array.isArray(initialState)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.getInitialState(): must return an object or null', Constructor.displayName || 'ReactCompositeComponent') : _prodInvariant('82', Constructor.displayName || 'ReactCompositeComponent') : void 0;
                                        
                                              this.state = initialState;
                                            }
                                                  onlyActiveOnIndex={false}
                                                  style={Object {}}>
                                                  Forgot Password
                                        </function (props, context, updater) {
                                              // This constructor gets overridden by mocks. The argument is used
                                              // by mocks to assert on what gets mounted.
                                        
                                              if (process.env.NODE_ENV !== 'production') {
                                                process.env.NODE_ENV !== 'production' ? warning(this instanceof Constructor, 'Something is calling a React component directly. Use a factory or ' + 'JSX instead. See: https://fb.me/react-legacyfactory') : void 0;
                                              }
                                        
                                              // Wire up auto-binding
                                              if (this.__reactAutoBindPairs.length) {
                                                bindAutoBindMethods(this);
                                              }
                                        
                                              this.props = props;
                                              this.context = context;
                                              this.refs = emptyObject;
                                              this.updater = updater || ReactNoopUpdateQueue;
                                        
                                              this.state = null;
                                        
                                              // ReactClasses doesn't have constructors. Instead, they use the
                                              // getInitialState and componentWillMount methods for initialization.
                                        
                                              var initialState = this.getInitialState ? this.getInitialState() : null;
                                              if (process.env.NODE_ENV !== 'production') {
                                                // We allow auto-mocks to proceed as if they're returning null.
                                                if (initialState === undefined && this.getInitialState._isMockFunction) {
                                                  // This is probably bad practice. Consider warning here and
                                                  // deprecating this convenience.
                                                  initialState = null;
                                                }
                                              }
                                              !(typeof initialState === 'object' && !Array.isArray(initialState)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.getInitialState(): must return an object or null', Constructor.displayName || 'ReactCompositeComponent') : _prodInvariant('82', Constructor.displayName || 'ReactCompositeComponent') : void 0;
                                        
                                              this.state = initialState;
                                            }>
                              </div>
                    </div>
          </form>
</div>,
      },
      "_renderedNodeType": 0,
      "_rootNodeID": 0,
      "_topLevelWrapper": null,
      "_updateBatchNumber": null,
      "_warnedAboutRefsInRender": false,
    },
    "getRenderOutput": [Function],
    "render": [Function],
  },
  "root": [Circular],
  "unrendered": <class Loginform extends /* istanbul ignore next */_react.Component {
  constructor(props) {
    super(props); /* istanbul ignore next */this.






    _onChange = field => {
      const val = this.refs[field].input.value;
      this.setState({ [field]: val });
      console.log('val:', val);
    }; /* istanbul ignore next */this.

    _onSubmit = () => {

    };this.state = { email: null, password: null };}

  render() {

    console.log('state:', this.state);

    return (
      /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ style: { width: 350, margin: 'auto', marginTop: 200, backgroundColor: '#efefef', padding: 20 }, __source: { fileName: _jsxFileName, lineNumber: 33 }, __self: this },
        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'form', /* istanbul ignore next */{ onSubmit: () => this._onSubmit(), __source: { fileName: _jsxFileName, lineNumber: 34 }, __self: this },

          /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'legend', /* istanbul ignore next */{ className: 'row', __source: { fileName: _jsxFileName, lineNumber: 36 }, __self: this }, /* istanbul ignore next */'Enter Login Credentials'),
          /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'form-col', __source: { fileName: _jsxFileName, lineNumber: 37 }, __self: this },
            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_TextField2.default, /* istanbul ignore next */{
              floatingLabelText: 'Email',
              type: 'email',
              onChange: () => this._onChange('email')
              // onBlur={() => this._validate('name')}
              , ref: 'email'
              // value={scratch.name || ''}
              , __source: { fileName: _jsxFileName, lineNumber: 38 }, __self: this }),
            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_TextField2.default, /* istanbul ignore next */{
              floatingLabelText: 'Password',
              type: 'password',
              onChange: () => this._onChange('password')
              // onBlur={() => this._validate('name')}
              , ref: 'password'
              // value={scratch.name || ''}
              , __source: { fileName: _jsxFileName, lineNumber: 46 }, __self: this }),
            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ style: { marginTop: 20 }, __source: { fileName: _jsxFileName, lineNumber: 54 }, __self: this }),
            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_RaisedButton2.default
            // icon={<ActionDone />}
            , /* istanbul ignore next */{ label: 'Login',
              onClick: () => this._onSubmit(),
              secondary: true, __source: { fileName: _jsxFileName, lineNumber: 55 }, __self: this }),

            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ style: { marginTop: 20, textAlign: 'right' }, __source: { fileName: _jsxFileName, lineNumber: 61 }, __self: this },
              /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactRouter.Link, /* istanbul ignore next */{ __source: { fileName: _jsxFileName, lineNumber: 62 }, __self: this }, /* istanbul ignore next */'Forgot Password'))))));






  }} />,
}
`;
