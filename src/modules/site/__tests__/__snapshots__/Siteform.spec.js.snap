exports[`components <Siteform /> renders without crashing 1`] = `
ShallowWrapper {
  "complexSelector": ComplexSelector {
    "buildPredicate": [Function],
    "childrenOfNode": [Function],
    "findWhereUnwrapped": [Function],
  },
  "length": 1,
  "node": <div
    style={
        Object {
            "margin": "auto",
            "width": "auto",
          }
    }>
    <form
        onSubmit={[Function]}>
        <div
            className="form-row">
            <div
                className="form-col">
                <legend
                    className="row">
                    Domain
                </legend>
                <function TextField() {
                    var _ref;
                
                    var _temp, _this, _ret;
                
                    (0, _classCallCheck3.default)(this, TextField);
                
                    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                      args[_key] = arguments[_key];
                    }
                
                    return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = TextField.__proto__ || (0, _getPrototypeOf2.default)(TextField)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
                      isFocused: false,
                      errorText: undefined,
                      hasValue: false,
                      isClean: true
                    }, _this.handleInputBlur = function (event) {
                      _this.setState({ isFocused: false });
                      if (_this.props.onBlur) _this.props.onBlur(event);
                    }, _this.handleInputChange = function (event) {
                      _this.setState({ hasValue: isValid(event.target.value), isClean: false });
                      if (_this.props.onChange) _this.props.onChange(event, event.target.value);
                    }, _this.handleInputFocus = function (event) {
                      if (_this.props.disabled) {
                        return;
                      }
                      _this.setState({ isFocused: true });
                      if (_this.props.onFocus) {
                        _this.props.onFocus(event);
                      }
                    }, _this.handleHeightChange = function (event, height) {
                      var newHeight = height + 24;
                      if (_this.props.floatingLabelText) {
                        newHeight += 24;
                      }
                      _reactDom2.default.findDOMNode(_this).style.height = newHeight + 'px';
                    }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
                  }
                    disabled={false}
                    floatingLabelFixed={false}
                    floatingLabelText="Identifier Name"
                    fullWidth={false}
                    multiLine={false}
                    onBlur={[Function]}
                    onChange={[Function]}
                    rows={1}
                    type="text"
                    underlineShow={true}
                    value="" />
                <function TextField() {
                    var _ref;
                
                    var _temp, _this, _ret;
                
                    (0, _classCallCheck3.default)(this, TextField);
                
                    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                      args[_key] = arguments[_key];
                    }
                
                    return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = TextField.__proto__ || (0, _getPrototypeOf2.default)(TextField)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
                      isFocused: false,
                      errorText: undefined,
                      hasValue: false,
                      isClean: true
                    }, _this.handleInputBlur = function (event) {
                      _this.setState({ isFocused: false });
                      if (_this.props.onBlur) _this.props.onBlur(event);
                    }, _this.handleInputChange = function (event) {
                      _this.setState({ hasValue: isValid(event.target.value), isClean: false });
                      if (_this.props.onChange) _this.props.onChange(event, event.target.value);
                    }, _this.handleInputFocus = function (event) {
                      if (_this.props.disabled) {
                        return;
                      }
                      _this.setState({ isFocused: true });
                      if (_this.props.onFocus) {
                        _this.props.onFocus(event);
                      }
                    }, _this.handleHeightChange = function (event, height) {
                      var newHeight = height + 24;
                      if (_this.props.floatingLabelText) {
                        newHeight += 24;
                      }
                      _reactDom2.default.findDOMNode(_this).style.height = newHeight + 'px';
                    }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
                  }
                    disabled={false}
                    floatingLabelFixed={false}
                    floatingLabelText="Domain ID"
                    fullWidth={false}
                    multiLine={false}
                    onBlur={[Function]}
                    onChange={[Function]}
                    rows={1}
                    type="text"
                    underlineShow={true}
                    value="" />
                <br />
                <br />
                <legend
                    className="row">
                    Security
                </legend>
                <function TextField() {
                    var _ref;
                
                    var _temp, _this, _ret;
                
                    (0, _classCallCheck3.default)(this, TextField);
                
                    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                      args[_key] = arguments[_key];
                    }
                
                    return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = TextField.__proto__ || (0, _getPrototypeOf2.default)(TextField)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
                      isFocused: false,
                      errorText: undefined,
                      hasValue: false,
                      isClean: true
                    }, _this.handleInputBlur = function (event) {
                      _this.setState({ isFocused: false });
                      if (_this.props.onBlur) _this.props.onBlur(event);
                    }, _this.handleInputChange = function (event) {
                      _this.setState({ hasValue: isValid(event.target.value), isClean: false });
                      if (_this.props.onChange) _this.props.onChange(event, event.target.value);
                    }, _this.handleInputFocus = function (event) {
                      if (_this.props.disabled) {
                        return;
                      }
                      _this.setState({ isFocused: true });
                      if (_this.props.onFocus) {
                        _this.props.onFocus(event);
                      }
                    }, _this.handleHeightChange = function (event, height) {
                      var newHeight = height + 24;
                      if (_this.props.floatingLabelText) {
                        newHeight += 24;
                      }
                      _reactDom2.default.findDOMNode(_this).style.height = newHeight + 'px';
                    }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
                  }
                    disabled={false}
                    floatingLabelFixed={false}
                    floatingLabelText="Public PEM File"
                    fullWidth={false}
                    multiLine={false}
                    onBlur={[Function]}
                    onChange={[Function]}
                    rows={1}
                    type="text"
                    underlineShow={true}
                    value="" />
                <function TextField() {
                    var _ref;
                
                    var _temp, _this, _ret;
                
                    (0, _classCallCheck3.default)(this, TextField);
                
                    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                      args[_key] = arguments[_key];
                    }
                
                    return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = TextField.__proto__ || (0, _getPrototypeOf2.default)(TextField)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
                      isFocused: false,
                      errorText: undefined,
                      hasValue: false,
                      isClean: true
                    }, _this.handleInputBlur = function (event) {
                      _this.setState({ isFocused: false });
                      if (_this.props.onBlur) _this.props.onBlur(event);
                    }, _this.handleInputChange = function (event) {
                      _this.setState({ hasValue: isValid(event.target.value), isClean: false });
                      if (_this.props.onChange) _this.props.onChange(event, event.target.value);
                    }, _this.handleInputFocus = function (event) {
                      if (_this.props.disabled) {
                        return;
                      }
                      _this.setState({ isFocused: true });
                      if (_this.props.onFocus) {
                        _this.props.onFocus(event);
                      }
                    }, _this.handleHeightChange = function (event, height) {
                      var newHeight = height + 24;
                      if (_this.props.floatingLabelText) {
                        newHeight += 24;
                      }
                      _reactDom2.default.findDOMNode(_this).style.height = newHeight + 'px';
                    }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
                  }
                    disabled={false}
                    floatingLabelFixed={false}
                    floatingLabelText="Private PEM File"
                    fullWidth={false}
                    multiLine={false}
                    onBlur={[Function]}
                    onChange={[Function]}
                    rows={1}
                    type="text"
                    underlineShow={true}
                    value="" />
                <function TextField() {
                    var _ref;
                
                    var _temp, _this, _ret;
                
                    (0, _classCallCheck3.default)(this, TextField);
                
                    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                      args[_key] = arguments[_key];
                    }
                
                    return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = TextField.__proto__ || (0, _getPrototypeOf2.default)(TextField)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
                      isFocused: false,
                      errorText: undefined,
                      hasValue: false,
                      isClean: true
                    }, _this.handleInputBlur = function (event) {
                      _this.setState({ isFocused: false });
                      if (_this.props.onBlur) _this.props.onBlur(event);
                    }, _this.handleInputChange = function (event) {
                      _this.setState({ hasValue: isValid(event.target.value), isClean: false });
                      if (_this.props.onChange) _this.props.onChange(event, event.target.value);
                    }, _this.handleInputFocus = function (event) {
                      if (_this.props.disabled) {
                        return;
                      }
                      _this.setState({ isFocused: true });
                      if (_this.props.onFocus) {
                        _this.props.onFocus(event);
                      }
                    }, _this.handleHeightChange = function (event, height) {
                      var newHeight = height + 24;
                      if (_this.props.floatingLabelText) {
                        newHeight += 24;
                      }
                      _reactDom2.default.findDOMNode(_this).style.height = newHeight + 'px';
                    }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
                  }
                    disabled={true}
                    floatingLabelFixed={false}
                    floatingLabelText="Signing Method"
                    fullWidth={false}
                    multiLine={false}
                    onBlur={[Function]}
                    onChange={[Function]}
                    rows={1}
                    type="text"
                    underlineShow={true}
                    value="RSA" />
            </div>
            <div
                className="form-row-spacer" />
            <div
                className="form-row-spacer" />
            <div
                className="form-col">
                <legend
                    className="row">
                    Database
                </legend>
                <function TextField() {
                    var _ref;
                
                    var _temp, _this, _ret;
                
                    (0, _classCallCheck3.default)(this, TextField);
                
                    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                      args[_key] = arguments[_key];
                    }
                
                    return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = TextField.__proto__ || (0, _getPrototypeOf2.default)(TextField)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
                      isFocused: false,
                      errorText: undefined,
                      hasValue: false,
                      isClean: true
                    }, _this.handleInputBlur = function (event) {
                      _this.setState({ isFocused: false });
                      if (_this.props.onBlur) _this.props.onBlur(event);
                    }, _this.handleInputChange = function (event) {
                      _this.setState({ hasValue: isValid(event.target.value), isClean: false });
                      if (_this.props.onChange) _this.props.onChange(event, event.target.value);
                    }, _this.handleInputFocus = function (event) {
                      if (_this.props.disabled) {
                        return;
                      }
                      _this.setState({ isFocused: true });
                      if (_this.props.onFocus) {
                        _this.props.onFocus(event);
                      }
                    }, _this.handleHeightChange = function (event, height) {
                      var newHeight = height + 24;
                      if (_this.props.floatingLabelText) {
                        newHeight += 24;
                      }
                      _reactDom2.default.findDOMNode(_this).style.height = newHeight + 'px';
                    }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
                  }
                    disabled={false}
                    floatingLabelFixed={false}
                    floatingLabelText="DB Name"
                    fullWidth={false}
                    multiLine={false}
                    onBlur={[Function]}
                    onChange={[Function]}
                    rows={1}
                    type="text"
                    underlineShow={true}
                    value="" />
                <function TextField() {
                    var _ref;
                
                    var _temp, _this, _ret;
                
                    (0, _classCallCheck3.default)(this, TextField);
                
                    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                      args[_key] = arguments[_key];
                    }
                
                    return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = TextField.__proto__ || (0, _getPrototypeOf2.default)(TextField)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
                      isFocused: false,
                      errorText: undefined,
                      hasValue: false,
                      isClean: true
                    }, _this.handleInputBlur = function (event) {
                      _this.setState({ isFocused: false });
                      if (_this.props.onBlur) _this.props.onBlur(event);
                    }, _this.handleInputChange = function (event) {
                      _this.setState({ hasValue: isValid(event.target.value), isClean: false });
                      if (_this.props.onChange) _this.props.onChange(event, event.target.value);
                    }, _this.handleInputFocus = function (event) {
                      if (_this.props.disabled) {
                        return;
                      }
                      _this.setState({ isFocused: true });
                      if (_this.props.onFocus) {
                        _this.props.onFocus(event);
                      }
                    }, _this.handleHeightChange = function (event, height) {
                      var newHeight = height + 24;
                      if (_this.props.floatingLabelText) {
                        newHeight += 24;
                      }
                      _reactDom2.default.findDOMNode(_this).style.height = newHeight + 'px';
                    }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
                  }
                    disabled={false}
                    floatingLabelFixed={false}
                    floatingLabelText="User Collection"
                    fullWidth={false}
                    multiLine={false}
                    onBlur={[Function]}
                    onChange={[Function]}
                    rows={1}
                    type="text"
                    underlineShow={true}
                    value="" />
                <function TextField() {
                    var _ref;
                
                    var _temp, _this, _ret;
                
                    (0, _classCallCheck3.default)(this, TextField);
                
                    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                      args[_key] = arguments[_key];
                    }
                
                    return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = TextField.__proto__ || (0, _getPrototypeOf2.default)(TextField)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
                      isFocused: false,
                      errorText: undefined,
                      hasValue: false,
                      isClean: true
                    }, _this.handleInputBlur = function (event) {
                      _this.setState({ isFocused: false });
                      if (_this.props.onBlur) _this.props.onBlur(event);
                    }, _this.handleInputChange = function (event) {
                      _this.setState({ hasValue: isValid(event.target.value), isClean: false });
                      if (_this.props.onChange) _this.props.onChange(event, event.target.value);
                    }, _this.handleInputFocus = function (event) {
                      if (_this.props.disabled) {
                        return;
                      }
                      _this.setState({ isFocused: true });
                      if (_this.props.onFocus) {
                        _this.props.onFocus(event);
                      }
                    }, _this.handleHeightChange = function (event, height) {
                      var newHeight = height + 24;
                      if (_this.props.floatingLabelText) {
                        newHeight += 24;
                      }
                      _reactDom2.default.findDOMNode(_this).style.height = newHeight + 'px';
                    }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
                  }
                    disabled={false}
                    floatingLabelFixed={false}
                    floatingLabelText="Contact Collection"
                    fullWidth={false}
                    multiLine={false}
                    onBlur={[Function]}
                    onChange={[Function]}
                    rows={1}
                    type="text"
                    underlineShow={true}
                    value="" />
                <br />
                <br />
                <legend
                    className="row">
                    Site Info
                </legend>
                <function TextField() {
                    var _ref;
                
                    var _temp, _this, _ret;
                
                    (0, _classCallCheck3.default)(this, TextField);
                
                    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                      args[_key] = arguments[_key];
                    }
                
                    return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = TextField.__proto__ || (0, _getPrototypeOf2.default)(TextField)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
                      isFocused: false,
                      errorText: undefined,
                      hasValue: false,
                      isClean: true
                    }, _this.handleInputBlur = function (event) {
                      _this.setState({ isFocused: false });
                      if (_this.props.onBlur) _this.props.onBlur(event);
                    }, _this.handleInputChange = function (event) {
                      _this.setState({ hasValue: isValid(event.target.value), isClean: false });
                      if (_this.props.onChange) _this.props.onChange(event, event.target.value);
                    }, _this.handleInputFocus = function (event) {
                      if (_this.props.disabled) {
                        return;
                      }
                      _this.setState({ isFocused: true });
                      if (_this.props.onFocus) {
                        _this.props.onFocus(event);
                      }
                    }, _this.handleHeightChange = function (event, height) {
                      var newHeight = height + 24;
                      if (_this.props.floatingLabelText) {
                        newHeight += 24;
                      }
                      _reactDom2.default.findDOMNode(_this).style.height = newHeight + 'px';
                    }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
                  }
                    disabled={false}
                    floatingLabelFixed={false}
                    floatingLabelText="Credential Password Field"
                    fullWidth={false}
                    multiLine={false}
                    onBlur={[Function]}
                    onChange={[Function]}
                    rows={1}
                    type="text"
                    underlineShow={true}
                    value="password" />
                <function TextField() {
                    var _ref;
                
                    var _temp, _this, _ret;
                
                    (0, _classCallCheck3.default)(this, TextField);
                
                    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                      args[_key] = arguments[_key];
                    }
                
                    return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = TextField.__proto__ || (0, _getPrototypeOf2.default)(TextField)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
                      isFocused: false,
                      errorText: undefined,
                      hasValue: false,
                      isClean: true
                    }, _this.handleInputBlur = function (event) {
                      _this.setState({ isFocused: false });
                      if (_this.props.onBlur) _this.props.onBlur(event);
                    }, _this.handleInputChange = function (event) {
                      _this.setState({ hasValue: isValid(event.target.value), isClean: false });
                      if (_this.props.onChange) _this.props.onChange(event, event.target.value);
                    }, _this.handleInputFocus = function (event) {
                      if (_this.props.disabled) {
                        return;
                      }
                      _this.setState({ isFocused: true });
                      if (_this.props.onFocus) {
                        _this.props.onFocus(event);
                      }
                    }, _this.handleHeightChange = function (event, height) {
                      var newHeight = height + 24;
                      if (_this.props.floatingLabelText) {
                        newHeight += 24;
                      }
                      _reactDom2.default.findDOMNode(_this).style.height = newHeight + 'px';
                    }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
                  }
                    disabled={false}
                    floatingLabelFixed={false}
                    floatingLabelText="Credential Sitename Field"
                    fullWidth={false}
                    multiLine={false}
                    onBlur={[Function]}
                    onChange={[Function]}
                    rows={1}
                    type="text"
                    underlineShow={true}
                    value="email" />
                <function TextField() {
                    var _ref;
                
                    var _temp, _this, _ret;
                
                    (0, _classCallCheck3.default)(this, TextField);
                
                    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                      args[_key] = arguments[_key];
                    }
                
                    return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = TextField.__proto__ || (0, _getPrototypeOf2.default)(TextField)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
                      isFocused: false,
                      errorText: undefined,
                      hasValue: false,
                      isClean: true
                    }, _this.handleInputBlur = function (event) {
                      _this.setState({ isFocused: false });
                      if (_this.props.onBlur) _this.props.onBlur(event);
                    }, _this.handleInputChange = function (event) {
                      _this.setState({ hasValue: isValid(event.target.value), isClean: false });
                      if (_this.props.onChange) _this.props.onChange(event, event.target.value);
                    }, _this.handleInputFocus = function (event) {
                      if (_this.props.disabled) {
                        return;
                      }
                      _this.setState({ isFocused: true });
                      if (_this.props.onFocus) {
                        _this.props.onFocus(event);
                      }
                    }, _this.handleHeightChange = function (event, height) {
                      var newHeight = height + 24;
                      if (_this.props.floatingLabelText) {
                        newHeight += 24;
                      }
                      _reactDom2.default.findDOMNode(_this).style.height = newHeight + 'px';
                    }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
                  }
                    disabled={false}
                    floatingLabelFixed={false}
                    floatingLabelText="Reset URI"
                    fullWidth={false}
                    multiLine={false}
                    onBlur={[Function]}
                    onChange={[Function]}
                    rows={1}
                    type="text"
                    underlineShow={true}
                    value="" />
            </div>
        </div>
        <div
            className="form-row">
            <div
                style={
                    Object {
                        "flex": 1,
                      }
                }>
                <function Subheader(props, context) {
                  var children = props.children;
                  var inset = props.inset;
                  var style = props.style;
                  var other = (0, _objectWithoutProperties3.default)(props, ['children', 'inset', 'style']);
                  var _context$muiTheme = context.muiTheme;
                  var prepareStyles = _context$muiTheme.prepareStyles;
                  var subheader = _context$muiTheme.subheader;
                
                
                  var styles = {
                    root: {
                      boxSizing: 'border-box',
                      color: subheader.color,
                      fontSize: 14,
                      fontWeight: subheader.fontWeight,
                      lineHeight: '48px',
                      paddingLeft: inset ? 72 : 16,
                      width: '100%'
                    }
                  };
                
                  return _react2.default.createElement(
                    'div',
                    (0, _extends3.default)({}, other, { style: prepareStyles((0, _simpleAssign2.default)(styles.root, style)) }),
                    children
                  );
                }
                    inset={false}>
                    Status
                </function Subheader(props, context) {
                  var children = props.children;
                  var inset = props.inset;
                  var style = props.style;
                  var other = (0, _objectWithoutProperties3.default)(props, ['children', 'inset', 'style']);
                  var _context$muiTheme = context.muiTheme;
                  var prepareStyles = _context$muiTheme.prepareStyles;
                  var subheader = _context$muiTheme.subheader;
                
                
                  var styles = {
                    root: {
                      boxSizing: 'border-box',
                      color: subheader.color,
                      fontSize: 14,
                      fontWeight: subheader.fontWeight,
                      lineHeight: '48px',
                      paddingLeft: inset ? 72 : 16,
                      width: '100%'
                    }
                  };
                
                  return _react2.default.createElement(
                    'div',
                    (0, _extends3.default)({}, other, { style: prepareStyles((0, _simpleAssign2.default)(styles.root, style)) }),
                    children
                  );
                }>
                <function Checkbox() {
                    var _ref;
                
                    var _temp, _this, _ret;
                
                    (0, _classCallCheck3.default)(this, Checkbox);
                
                    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                      args[_key] = arguments[_key];
                    }
                
                    return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = Checkbox.__proto__ || (0, _getPrototypeOf2.default)(Checkbox)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
                      switched: false
                    }, _this.handleStateChange = function (newSwitched) {
                      _this.setState({
                        switched: newSwitched
                      });
                    }, _this.handleCheck = function (event, isInputChecked) {
                      if (_this.props.onCheck) {
                        _this.props.onCheck(event, isInputChecked);
                      }
                    }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
                  }
                    checked={false}
                    disabled={false}
                    label="Active"
                    labelPosition="right"
                    onCheck={[Function]} />
            </div>
        </div>
        <div
            className="form-row"
            style={
                Object {
                    "justifyContent": "space-around",
                  }
            }>
            <function RaisedButton() {
                var _ref;
            
                var _temp, _this, _ret;
            
                (0, _classCallCheck3.default)(this, RaisedButton);
            
                for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                  args[_key] = arguments[_key];
                }
            
                return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = RaisedButton.__proto__ || (0, _getPrototypeOf2.default)(RaisedButton)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
                  hovered: false,
                  keyboardFocused: false,
                  touched: false,
                  initialZDepth: 0,
                  zDepth: 0
                }, _this.handleMouseDown = function (event) {
                  // only listen to left clicks
                  if (event.button === 0) {
                    _this.setState({
                      zDepth: _this.state.initialZDepth + 1
                    });
                  }
                  if (_this.props.onMouseDown) {
                    _this.props.onMouseDown(event);
                  }
                }, _this.handleMouseUp = function (event) {
                  _this.setState({
                    zDepth: _this.state.initialZDepth
                  });
                  if (_this.props.onMouseUp) {
                    _this.props.onMouseUp(event);
                  }
                }, _this.handleMouseLeave = function (event) {
                  if (!_this.state.keyboardFocused) {
                    _this.setState({
                      zDepth: _this.state.initialZDepth,
                      hovered: false
                    });
                  }
                  if (_this.props.onMouseLeave) {
                    _this.props.onMouseLeave(event);
                  }
                }, _this.handleMouseEnter = function (event) {
                  if (!_this.state.keyboardFocused && !_this.state.touched) {
                    _this.setState({
                      hovered: true
                    });
                  }
                  if (_this.props.onMouseEnter) {
                    _this.props.onMouseEnter(event);
                  }
                }, _this.handleTouchStart = function (event) {
                  _this.setState({
                    touched: true,
                    zDepth: _this.state.initialZDepth + 1
                  });
            
                  if (_this.props.onTouchStart) {
                    _this.props.onTouchStart(event);
                  }
                }, _this.handleTouchEnd = function (event) {
                  _this.setState({
                    zDepth: _this.state.initialZDepth
                  });
            
                  if (_this.props.onTouchEnd) {
                    _this.props.onTouchEnd(event);
                  }
                }, _this.handleKeyboardFocus = function (event, keyboardFocused) {
                  var zDepth = keyboardFocused && !_this.props.disabled ? _this.state.initialZDepth + 1 : _this.state.initialZDepth;
            
                  _this.setState({
                    zDepth: zDepth,
                    keyboardFocused: keyboardFocused
                  });
                }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
              }
                disabled={false}
                fullWidth={false}
                icon={
                    <function _class() {
                            _classCallCheck(this, _class);
                    
                            return _possibleConstructorReturn(this, _Component.apply(this, arguments));
                          } />
                }
                label="Cancel"
                labelPosition="after"
                onClick={[Function]}
                primary={false}
                secondary={false} />
            <function RaisedButton() {
                var _ref;
            
                var _temp, _this, _ret;
            
                (0, _classCallCheck3.default)(this, RaisedButton);
            
                for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                  args[_key] = arguments[_key];
                }
            
                return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = RaisedButton.__proto__ || (0, _getPrototypeOf2.default)(RaisedButton)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
                  hovered: false,
                  keyboardFocused: false,
                  touched: false,
                  initialZDepth: 0,
                  zDepth: 0
                }, _this.handleMouseDown = function (event) {
                  // only listen to left clicks
                  if (event.button === 0) {
                    _this.setState({
                      zDepth: _this.state.initialZDepth + 1
                    });
                  }
                  if (_this.props.onMouseDown) {
                    _this.props.onMouseDown(event);
                  }
                }, _this.handleMouseUp = function (event) {
                  _this.setState({
                    zDepth: _this.state.initialZDepth
                  });
                  if (_this.props.onMouseUp) {
                    _this.props.onMouseUp(event);
                  }
                }, _this.handleMouseLeave = function (event) {
                  if (!_this.state.keyboardFocused) {
                    _this.setState({
                      zDepth: _this.state.initialZDepth,
                      hovered: false
                    });
                  }
                  if (_this.props.onMouseLeave) {
                    _this.props.onMouseLeave(event);
                  }
                }, _this.handleMouseEnter = function (event) {
                  if (!_this.state.keyboardFocused && !_this.state.touched) {
                    _this.setState({
                      hovered: true
                    });
                  }
                  if (_this.props.onMouseEnter) {
                    _this.props.onMouseEnter(event);
                  }
                }, _this.handleTouchStart = function (event) {
                  _this.setState({
                    touched: true,
                    zDepth: _this.state.initialZDepth + 1
                  });
            
                  if (_this.props.onTouchStart) {
                    _this.props.onTouchStart(event);
                  }
                }, _this.handleTouchEnd = function (event) {
                  _this.setState({
                    zDepth: _this.state.initialZDepth
                  });
            
                  if (_this.props.onTouchEnd) {
                    _this.props.onTouchEnd(event);
                  }
                }, _this.handleKeyboardFocus = function (event, keyboardFocused) {
                  var zDepth = keyboardFocused && !_this.props.disabled ? _this.state.initialZDepth + 1 : _this.state.initialZDepth;
            
                  _this.setState({
                    zDepth: zDepth,
                    keyboardFocused: keyboardFocused
                  });
                }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
              }
                disabled={false}
                fullWidth={false}
                icon={
                    <function _class() {
                            _classCallCheck(this, _class);
                    
                            return _possibleConstructorReturn(this, _Component.apply(this, arguments));
                          } />
                }
                label="Submit Site Info"
                labelPosition="after"
                onClick={[Function]}
                primary={false}
                secondary={true} />
        </div>
    </form>
</div>,
  "nodes": Array [
    <div
      style={
            Object {
                  "margin": "auto",
                  "width": "auto",
                }
      }>
      <form
            onSubmit={[Function]}>
            <div
                  className="form-row">
                  <div
                        className="form-col">
                        <legend
                              className="row">
                              Domain
                        </legend>
                        <function TextField() {
                            var _ref;
                        
                            var _temp, _this, _ret;
                        
                            (0, _classCallCheck3.default)(this, TextField);
                        
                            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                              args[_key] = arguments[_key];
                            }
                        
                            return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = TextField.__proto__ || (0, _getPrototypeOf2.default)(TextField)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
                              isFocused: false,
                              errorText: undefined,
                              hasValue: false,
                              isClean: true
                            }, _this.handleInputBlur = function (event) {
                              _this.setState({ isFocused: false });
                              if (_this.props.onBlur) _this.props.onBlur(event);
                            }, _this.handleInputChange = function (event) {
                              _this.setState({ hasValue: isValid(event.target.value), isClean: false });
                              if (_this.props.onChange) _this.props.onChange(event, event.target.value);
                            }, _this.handleInputFocus = function (event) {
                              if (_this.props.disabled) {
                                return;
                              }
                              _this.setState({ isFocused: true });
                              if (_this.props.onFocus) {
                                _this.props.onFocus(event);
                              }
                            }, _this.handleHeightChange = function (event, height) {
                              var newHeight = height + 24;
                              if (_this.props.floatingLabelText) {
                                newHeight += 24;
                              }
                              _reactDom2.default.findDOMNode(_this).style.height = newHeight + 'px';
                            }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
                          }
                              disabled={false}
                              floatingLabelFixed={false}
                              floatingLabelText="Identifier Name"
                              fullWidth={false}
                              multiLine={false}
                              onBlur={[Function]}
                              onChange={[Function]}
                              rows={1}
                              type="text"
                              underlineShow={true}
                              value="" />
                        <function TextField() {
                            var _ref;
                        
                            var _temp, _this, _ret;
                        
                            (0, _classCallCheck3.default)(this, TextField);
                        
                            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                              args[_key] = arguments[_key];
                            }
                        
                            return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = TextField.__proto__ || (0, _getPrototypeOf2.default)(TextField)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
                              isFocused: false,
                              errorText: undefined,
                              hasValue: false,
                              isClean: true
                            }, _this.handleInputBlur = function (event) {
                              _this.setState({ isFocused: false });
                              if (_this.props.onBlur) _this.props.onBlur(event);
                            }, _this.handleInputChange = function (event) {
                              _this.setState({ hasValue: isValid(event.target.value), isClean: false });
                              if (_this.props.onChange) _this.props.onChange(event, event.target.value);
                            }, _this.handleInputFocus = function (event) {
                              if (_this.props.disabled) {
                                return;
                              }
                              _this.setState({ isFocused: true });
                              if (_this.props.onFocus) {
                                _this.props.onFocus(event);
                              }
                            }, _this.handleHeightChange = function (event, height) {
                              var newHeight = height + 24;
                              if (_this.props.floatingLabelText) {
                                newHeight += 24;
                              }
                              _reactDom2.default.findDOMNode(_this).style.height = newHeight + 'px';
                            }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
                          }
                              disabled={false}
                              floatingLabelFixed={false}
                              floatingLabelText="Domain ID"
                              fullWidth={false}
                              multiLine={false}
                              onBlur={[Function]}
                              onChange={[Function]}
                              rows={1}
                              type="text"
                              underlineShow={true}
                              value="" />
                        <br />
                        <br />
                        <legend
                              className="row">
                              Security
                        </legend>
                        <function TextField() {
                            var _ref;
                        
                            var _temp, _this, _ret;
                        
                            (0, _classCallCheck3.default)(this, TextField);
                        
                            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                              args[_key] = arguments[_key];
                            }
                        
                            return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = TextField.__proto__ || (0, _getPrototypeOf2.default)(TextField)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
                              isFocused: false,
                              errorText: undefined,
                              hasValue: false,
                              isClean: true
                            }, _this.handleInputBlur = function (event) {
                              _this.setState({ isFocused: false });
                              if (_this.props.onBlur) _this.props.onBlur(event);
                            }, _this.handleInputChange = function (event) {
                              _this.setState({ hasValue: isValid(event.target.value), isClean: false });
                              if (_this.props.onChange) _this.props.onChange(event, event.target.value);
                            }, _this.handleInputFocus = function (event) {
                              if (_this.props.disabled) {
                                return;
                              }
                              _this.setState({ isFocused: true });
                              if (_this.props.onFocus) {
                                _this.props.onFocus(event);
                              }
                            }, _this.handleHeightChange = function (event, height) {
                              var newHeight = height + 24;
                              if (_this.props.floatingLabelText) {
                                newHeight += 24;
                              }
                              _reactDom2.default.findDOMNode(_this).style.height = newHeight + 'px';
                            }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
                          }
                              disabled={false}
                              floatingLabelFixed={false}
                              floatingLabelText="Public PEM File"
                              fullWidth={false}
                              multiLine={false}
                              onBlur={[Function]}
                              onChange={[Function]}
                              rows={1}
                              type="text"
                              underlineShow={true}
                              value="" />
                        <function TextField() {
                            var _ref;
                        
                            var _temp, _this, _ret;
                        
                            (0, _classCallCheck3.default)(this, TextField);
                        
                            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                              args[_key] = arguments[_key];
                            }
                        
                            return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = TextField.__proto__ || (0, _getPrototypeOf2.default)(TextField)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
                              isFocused: false,
                              errorText: undefined,
                              hasValue: false,
                              isClean: true
                            }, _this.handleInputBlur = function (event) {
                              _this.setState({ isFocused: false });
                              if (_this.props.onBlur) _this.props.onBlur(event);
                            }, _this.handleInputChange = function (event) {
                              _this.setState({ hasValue: isValid(event.target.value), isClean: false });
                              if (_this.props.onChange) _this.props.onChange(event, event.target.value);
                            }, _this.handleInputFocus = function (event) {
                              if (_this.props.disabled) {
                                return;
                              }
                              _this.setState({ isFocused: true });
                              if (_this.props.onFocus) {
                                _this.props.onFocus(event);
                              }
                            }, _this.handleHeightChange = function (event, height) {
                              var newHeight = height + 24;
                              if (_this.props.floatingLabelText) {
                                newHeight += 24;
                              }
                              _reactDom2.default.findDOMNode(_this).style.height = newHeight + 'px';
                            }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
                          }
                              disabled={false}
                              floatingLabelFixed={false}
                              floatingLabelText="Private PEM File"
                              fullWidth={false}
                              multiLine={false}
                              onBlur={[Function]}
                              onChange={[Function]}
                              rows={1}
                              type="text"
                              underlineShow={true}
                              value="" />
                        <function TextField() {
                            var _ref;
                        
                            var _temp, _this, _ret;
                        
                            (0, _classCallCheck3.default)(this, TextField);
                        
                            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                              args[_key] = arguments[_key];
                            }
                        
                            return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = TextField.__proto__ || (0, _getPrototypeOf2.default)(TextField)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
                              isFocused: false,
                              errorText: undefined,
                              hasValue: false,
                              isClean: true
                            }, _this.handleInputBlur = function (event) {
                              _this.setState({ isFocused: false });
                              if (_this.props.onBlur) _this.props.onBlur(event);
                            }, _this.handleInputChange = function (event) {
                              _this.setState({ hasValue: isValid(event.target.value), isClean: false });
                              if (_this.props.onChange) _this.props.onChange(event, event.target.value);
                            }, _this.handleInputFocus = function (event) {
                              if (_this.props.disabled) {
                                return;
                              }
                              _this.setState({ isFocused: true });
                              if (_this.props.onFocus) {
                                _this.props.onFocus(event);
                              }
                            }, _this.handleHeightChange = function (event, height) {
                              var newHeight = height + 24;
                              if (_this.props.floatingLabelText) {
                                newHeight += 24;
                              }
                              _reactDom2.default.findDOMNode(_this).style.height = newHeight + 'px';
                            }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
                          }
                              disabled={true}
                              floatingLabelFixed={false}
                              floatingLabelText="Signing Method"
                              fullWidth={false}
                              multiLine={false}
                              onBlur={[Function]}
                              onChange={[Function]}
                              rows={1}
                              type="text"
                              underlineShow={true}
                              value="RSA" />
                  </div>
                  <div
                        className="form-row-spacer" />
                  <div
                        className="form-row-spacer" />
                  <div
                        className="form-col">
                        <legend
                              className="row">
                              Database
                        </legend>
                        <function TextField() {
                            var _ref;
                        
                            var _temp, _this, _ret;
                        
                            (0, _classCallCheck3.default)(this, TextField);
                        
                            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                              args[_key] = arguments[_key];
                            }
                        
                            return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = TextField.__proto__ || (0, _getPrototypeOf2.default)(TextField)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
                              isFocused: false,
                              errorText: undefined,
                              hasValue: false,
                              isClean: true
                            }, _this.handleInputBlur = function (event) {
                              _this.setState({ isFocused: false });
                              if (_this.props.onBlur) _this.props.onBlur(event);
                            }, _this.handleInputChange = function (event) {
                              _this.setState({ hasValue: isValid(event.target.value), isClean: false });
                              if (_this.props.onChange) _this.props.onChange(event, event.target.value);
                            }, _this.handleInputFocus = function (event) {
                              if (_this.props.disabled) {
                                return;
                              }
                              _this.setState({ isFocused: true });
                              if (_this.props.onFocus) {
                                _this.props.onFocus(event);
                              }
                            }, _this.handleHeightChange = function (event, height) {
                              var newHeight = height + 24;
                              if (_this.props.floatingLabelText) {
                                newHeight += 24;
                              }
                              _reactDom2.default.findDOMNode(_this).style.height = newHeight + 'px';
                            }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
                          }
                              disabled={false}
                              floatingLabelFixed={false}
                              floatingLabelText="DB Name"
                              fullWidth={false}
                              multiLine={false}
                              onBlur={[Function]}
                              onChange={[Function]}
                              rows={1}
                              type="text"
                              underlineShow={true}
                              value="" />
                        <function TextField() {
                            var _ref;
                        
                            var _temp, _this, _ret;
                        
                            (0, _classCallCheck3.default)(this, TextField);
                        
                            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                              args[_key] = arguments[_key];
                            }
                        
                            return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = TextField.__proto__ || (0, _getPrototypeOf2.default)(TextField)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
                              isFocused: false,
                              errorText: undefined,
                              hasValue: false,
                              isClean: true
                            }, _this.handleInputBlur = function (event) {
                              _this.setState({ isFocused: false });
                              if (_this.props.onBlur) _this.props.onBlur(event);
                            }, _this.handleInputChange = function (event) {
                              _this.setState({ hasValue: isValid(event.target.value), isClean: false });
                              if (_this.props.onChange) _this.props.onChange(event, event.target.value);
                            }, _this.handleInputFocus = function (event) {
                              if (_this.props.disabled) {
                                return;
                              }
                              _this.setState({ isFocused: true });
                              if (_this.props.onFocus) {
                                _this.props.onFocus(event);
                              }
                            }, _this.handleHeightChange = function (event, height) {
                              var newHeight = height + 24;
                              if (_this.props.floatingLabelText) {
                                newHeight += 24;
                              }
                              _reactDom2.default.findDOMNode(_this).style.height = newHeight + 'px';
                            }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
                          }
                              disabled={false}
                              floatingLabelFixed={false}
                              floatingLabelText="User Collection"
                              fullWidth={false}
                              multiLine={false}
                              onBlur={[Function]}
                              onChange={[Function]}
                              rows={1}
                              type="text"
                              underlineShow={true}
                              value="" />
                        <function TextField() {
                            var _ref;
                        
                            var _temp, _this, _ret;
                        
                            (0, _classCallCheck3.default)(this, TextField);
                        
                            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                              args[_key] = arguments[_key];
                            }
                        
                            return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = TextField.__proto__ || (0, _getPrototypeOf2.default)(TextField)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
                              isFocused: false,
                              errorText: undefined,
                              hasValue: false,
                              isClean: true
                            }, _this.handleInputBlur = function (event) {
                              _this.setState({ isFocused: false });
                              if (_this.props.onBlur) _this.props.onBlur(event);
                            }, _this.handleInputChange = function (event) {
                              _this.setState({ hasValue: isValid(event.target.value), isClean: false });
                              if (_this.props.onChange) _this.props.onChange(event, event.target.value);
                            }, _this.handleInputFocus = function (event) {
                              if (_this.props.disabled) {
                                return;
                              }
                              _this.setState({ isFocused: true });
                              if (_this.props.onFocus) {
                                _this.props.onFocus(event);
                              }
                            }, _this.handleHeightChange = function (event, height) {
                              var newHeight = height + 24;
                              if (_this.props.floatingLabelText) {
                                newHeight += 24;
                              }
                              _reactDom2.default.findDOMNode(_this).style.height = newHeight + 'px';
                            }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
                          }
                              disabled={false}
                              floatingLabelFixed={false}
                              floatingLabelText="Contact Collection"
                              fullWidth={false}
                              multiLine={false}
                              onBlur={[Function]}
                              onChange={[Function]}
                              rows={1}
                              type="text"
                              underlineShow={true}
                              value="" />
                        <br />
                        <br />
                        <legend
                              className="row">
                              Site Info
                        </legend>
                        <function TextField() {
                            var _ref;
                        
                            var _temp, _this, _ret;
                        
                            (0, _classCallCheck3.default)(this, TextField);
                        
                            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                              args[_key] = arguments[_key];
                            }
                        
                            return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = TextField.__proto__ || (0, _getPrototypeOf2.default)(TextField)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
                              isFocused: false,
                              errorText: undefined,
                              hasValue: false,
                              isClean: true
                            }, _this.handleInputBlur = function (event) {
                              _this.setState({ isFocused: false });
                              if (_this.props.onBlur) _this.props.onBlur(event);
                            }, _this.handleInputChange = function (event) {
                              _this.setState({ hasValue: isValid(event.target.value), isClean: false });
                              if (_this.props.onChange) _this.props.onChange(event, event.target.value);
                            }, _this.handleInputFocus = function (event) {
                              if (_this.props.disabled) {
                                return;
                              }
                              _this.setState({ isFocused: true });
                              if (_this.props.onFocus) {
                                _this.props.onFocus(event);
                              }
                            }, _this.handleHeightChange = function (event, height) {
                              var newHeight = height + 24;
                              if (_this.props.floatingLabelText) {
                                newHeight += 24;
                              }
                              _reactDom2.default.findDOMNode(_this).style.height = newHeight + 'px';
                            }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
                          }
                              disabled={false}
                              floatingLabelFixed={false}
                              floatingLabelText="Credential Password Field"
                              fullWidth={false}
                              multiLine={false}
                              onBlur={[Function]}
                              onChange={[Function]}
                              rows={1}
                              type="text"
                              underlineShow={true}
                              value="password" />
                        <function TextField() {
                            var _ref;
                        
                            var _temp, _this, _ret;
                        
                            (0, _classCallCheck3.default)(this, TextField);
                        
                            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                              args[_key] = arguments[_key];
                            }
                        
                            return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = TextField.__proto__ || (0, _getPrototypeOf2.default)(TextField)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
                              isFocused: false,
                              errorText: undefined,
                              hasValue: false,
                              isClean: true
                            }, _this.handleInputBlur = function (event) {
                              _this.setState({ isFocused: false });
                              if (_this.props.onBlur) _this.props.onBlur(event);
                            }, _this.handleInputChange = function (event) {
                              _this.setState({ hasValue: isValid(event.target.value), isClean: false });
                              if (_this.props.onChange) _this.props.onChange(event, event.target.value);
                            }, _this.handleInputFocus = function (event) {
                              if (_this.props.disabled) {
                                return;
                              }
                              _this.setState({ isFocused: true });
                              if (_this.props.onFocus) {
                                _this.props.onFocus(event);
                              }
                            }, _this.handleHeightChange = function (event, height) {
                              var newHeight = height + 24;
                              if (_this.props.floatingLabelText) {
                                newHeight += 24;
                              }
                              _reactDom2.default.findDOMNode(_this).style.height = newHeight + 'px';
                            }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
                          }
                              disabled={false}
                              floatingLabelFixed={false}
                              floatingLabelText="Credential Sitename Field"
                              fullWidth={false}
                              multiLine={false}
                              onBlur={[Function]}
                              onChange={[Function]}
                              rows={1}
                              type="text"
                              underlineShow={true}
                              value="email" />
                        <function TextField() {
                            var _ref;
                        
                            var _temp, _this, _ret;
                        
                            (0, _classCallCheck3.default)(this, TextField);
                        
                            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                              args[_key] = arguments[_key];
                            }
                        
                            return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = TextField.__proto__ || (0, _getPrototypeOf2.default)(TextField)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
                              isFocused: false,
                              errorText: undefined,
                              hasValue: false,
                              isClean: true
                            }, _this.handleInputBlur = function (event) {
                              _this.setState({ isFocused: false });
                              if (_this.props.onBlur) _this.props.onBlur(event);
                            }, _this.handleInputChange = function (event) {
                              _this.setState({ hasValue: isValid(event.target.value), isClean: false });
                              if (_this.props.onChange) _this.props.onChange(event, event.target.value);
                            }, _this.handleInputFocus = function (event) {
                              if (_this.props.disabled) {
                                return;
                              }
                              _this.setState({ isFocused: true });
                              if (_this.props.onFocus) {
                                _this.props.onFocus(event);
                              }
                            }, _this.handleHeightChange = function (event, height) {
                              var newHeight = height + 24;
                              if (_this.props.floatingLabelText) {
                                newHeight += 24;
                              }
                              _reactDom2.default.findDOMNode(_this).style.height = newHeight + 'px';
                            }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
                          }
                              disabled={false}
                              floatingLabelFixed={false}
                              floatingLabelText="Reset URI"
                              fullWidth={false}
                              multiLine={false}
                              onBlur={[Function]}
                              onChange={[Function]}
                              rows={1}
                              type="text"
                              underlineShow={true}
                              value="" />
                  </div>
            </div>
            <div
                  className="form-row">
                  <div
                        style={
                              Object {
                                    "flex": 1,
                                  }
                        }>
                        <function Subheader(props, context) {
                          var children = props.children;
                          var inset = props.inset;
                          var style = props.style;
                          var other = (0, _objectWithoutProperties3.default)(props, ['children', 'inset', 'style']);
                          var _context$muiTheme = context.muiTheme;
                          var prepareStyles = _context$muiTheme.prepareStyles;
                          var subheader = _context$muiTheme.subheader;
                        
                        
                          var styles = {
                            root: {
                              boxSizing: 'border-box',
                              color: subheader.color,
                              fontSize: 14,
                              fontWeight: subheader.fontWeight,
                              lineHeight: '48px',
                              paddingLeft: inset ? 72 : 16,
                              width: '100%'
                            }
                          };
                        
                          return _react2.default.createElement(
                            'div',
                            (0, _extends3.default)({}, other, { style: prepareStyles((0, _simpleAssign2.default)(styles.root, style)) }),
                            children
                          );
                        }
                              inset={false}>
                              Status
                        </function Subheader(props, context) {
                          var children = props.children;
                          var inset = props.inset;
                          var style = props.style;
                          var other = (0, _objectWithoutProperties3.default)(props, ['children', 'inset', 'style']);
                          var _context$muiTheme = context.muiTheme;
                          var prepareStyles = _context$muiTheme.prepareStyles;
                          var subheader = _context$muiTheme.subheader;
                        
                        
                          var styles = {
                            root: {
                              boxSizing: 'border-box',
                              color: subheader.color,
                              fontSize: 14,
                              fontWeight: subheader.fontWeight,
                              lineHeight: '48px',
                              paddingLeft: inset ? 72 : 16,
                              width: '100%'
                            }
                          };
                        
                          return _react2.default.createElement(
                            'div',
                            (0, _extends3.default)({}, other, { style: prepareStyles((0, _simpleAssign2.default)(styles.root, style)) }),
                            children
                          );
                        }>
                        <function Checkbox() {
                            var _ref;
                        
                            var _temp, _this, _ret;
                        
                            (0, _classCallCheck3.default)(this, Checkbox);
                        
                            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                              args[_key] = arguments[_key];
                            }
                        
                            return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = Checkbox.__proto__ || (0, _getPrototypeOf2.default)(Checkbox)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
                              switched: false
                            }, _this.handleStateChange = function (newSwitched) {
                              _this.setState({
                                switched: newSwitched
                              });
                            }, _this.handleCheck = function (event, isInputChecked) {
                              if (_this.props.onCheck) {
                                _this.props.onCheck(event, isInputChecked);
                              }
                            }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
                          }
                              checked={false}
                              disabled={false}
                              label="Active"
                              labelPosition="right"
                              onCheck={[Function]} />
                  </div>
            </div>
            <div
                  className="form-row"
                  style={
                        Object {
                              "justifyContent": "space-around",
                            }
                  }>
                  <function RaisedButton() {
                      var _ref;
                  
                      var _temp, _this, _ret;
                  
                      (0, _classCallCheck3.default)(this, RaisedButton);
                  
                      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                        args[_key] = arguments[_key];
                      }
                  
                      return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = RaisedButton.__proto__ || (0, _getPrototypeOf2.default)(RaisedButton)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
                        hovered: false,
                        keyboardFocused: false,
                        touched: false,
                        initialZDepth: 0,
                        zDepth: 0
                      }, _this.handleMouseDown = function (event) {
                        // only listen to left clicks
                        if (event.button === 0) {
                          _this.setState({
                            zDepth: _this.state.initialZDepth + 1
                          });
                        }
                        if (_this.props.onMouseDown) {
                          _this.props.onMouseDown(event);
                        }
                      }, _this.handleMouseUp = function (event) {
                        _this.setState({
                          zDepth: _this.state.initialZDepth
                        });
                        if (_this.props.onMouseUp) {
                          _this.props.onMouseUp(event);
                        }
                      }, _this.handleMouseLeave = function (event) {
                        if (!_this.state.keyboardFocused) {
                          _this.setState({
                            zDepth: _this.state.initialZDepth,
                            hovered: false
                          });
                        }
                        if (_this.props.onMouseLeave) {
                          _this.props.onMouseLeave(event);
                        }
                      }, _this.handleMouseEnter = function (event) {
                        if (!_this.state.keyboardFocused && !_this.state.touched) {
                          _this.setState({
                            hovered: true
                          });
                        }
                        if (_this.props.onMouseEnter) {
                          _this.props.onMouseEnter(event);
                        }
                      }, _this.handleTouchStart = function (event) {
                        _this.setState({
                          touched: true,
                          zDepth: _this.state.initialZDepth + 1
                        });
                  
                        if (_this.props.onTouchStart) {
                          _this.props.onTouchStart(event);
                        }
                      }, _this.handleTouchEnd = function (event) {
                        _this.setState({
                          zDepth: _this.state.initialZDepth
                        });
                  
                        if (_this.props.onTouchEnd) {
                          _this.props.onTouchEnd(event);
                        }
                      }, _this.handleKeyboardFocus = function (event, keyboardFocused) {
                        var zDepth = keyboardFocused && !_this.props.disabled ? _this.state.initialZDepth + 1 : _this.state.initialZDepth;
                  
                        _this.setState({
                          zDepth: zDepth,
                          keyboardFocused: keyboardFocused
                        });
                      }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
                    }
                        disabled={false}
                        fullWidth={false}
                        icon={
                              <function _class() {
                                      _classCallCheck(this, _class);
                              
                                      return _possibleConstructorReturn(this, _Component.apply(this, arguments));
                                    } />
                        }
                        label="Cancel"
                        labelPosition="after"
                        onClick={[Function]}
                        primary={false}
                        secondary={false} />
                  <function RaisedButton() {
                      var _ref;
                  
                      var _temp, _this, _ret;
                  
                      (0, _classCallCheck3.default)(this, RaisedButton);
                  
                      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                        args[_key] = arguments[_key];
                      }
                  
                      return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = RaisedButton.__proto__ || (0, _getPrototypeOf2.default)(RaisedButton)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
                        hovered: false,
                        keyboardFocused: false,
                        touched: false,
                        initialZDepth: 0,
                        zDepth: 0
                      }, _this.handleMouseDown = function (event) {
                        // only listen to left clicks
                        if (event.button === 0) {
                          _this.setState({
                            zDepth: _this.state.initialZDepth + 1
                          });
                        }
                        if (_this.props.onMouseDown) {
                          _this.props.onMouseDown(event);
                        }
                      }, _this.handleMouseUp = function (event) {
                        _this.setState({
                          zDepth: _this.state.initialZDepth
                        });
                        if (_this.props.onMouseUp) {
                          _this.props.onMouseUp(event);
                        }
                      }, _this.handleMouseLeave = function (event) {
                        if (!_this.state.keyboardFocused) {
                          _this.setState({
                            zDepth: _this.state.initialZDepth,
                            hovered: false
                          });
                        }
                        if (_this.props.onMouseLeave) {
                          _this.props.onMouseLeave(event);
                        }
                      }, _this.handleMouseEnter = function (event) {
                        if (!_this.state.keyboardFocused && !_this.state.touched) {
                          _this.setState({
                            hovered: true
                          });
                        }
                        if (_this.props.onMouseEnter) {
                          _this.props.onMouseEnter(event);
                        }
                      }, _this.handleTouchStart = function (event) {
                        _this.setState({
                          touched: true,
                          zDepth: _this.state.initialZDepth + 1
                        });
                  
                        if (_this.props.onTouchStart) {
                          _this.props.onTouchStart(event);
                        }
                      }, _this.handleTouchEnd = function (event) {
                        _this.setState({
                          zDepth: _this.state.initialZDepth
                        });
                  
                        if (_this.props.onTouchEnd) {
                          _this.props.onTouchEnd(event);
                        }
                      }, _this.handleKeyboardFocus = function (event, keyboardFocused) {
                        var zDepth = keyboardFocused && !_this.props.disabled ? _this.state.initialZDepth + 1 : _this.state.initialZDepth;
                  
                        _this.setState({
                          zDepth: zDepth,
                          keyboardFocused: keyboardFocused
                        });
                      }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
                    }
                        disabled={false}
                        fullWidth={false}
                        icon={
                              <function _class() {
                                      _classCallCheck(this, _class);
                              
                                      return _possibleConstructorReturn(this, _Component.apply(this, arguments));
                                    } />
                        }
                        label="Submit Site Info"
                        labelPosition="after"
                        onClick={[Function]}
                        primary={false}
                        secondary={true} />
            </div>
      </form>
</div>,
  ],
  "options": Object {},
  "renderer": ReactShallowRenderer {
    "_instance": ShallowComponentWrapper {
      "_calledComponentWillUnmount": false,
      "_compositeType": 0,
      "_context": Object {},
      "_currentElement": <class Siteform extends /* istanbul ignore next */_react.Component {/* istanbul ignore next */constructor() {var _temp;return _temp = super(...arguments), this.

    _onPropChange = field => {
      const val = this.refs[field].input.value;
      this.props.actions.setSiteProp({ [field]: val });
    }, this.

    _onCheck = (e, val, field) => {
      console.log('check val:', val);
      this.props.actions.setSiteProp({ [field]: val });
    }, this.

    _validate = field => {
    }, this.

    _onCancelForm = () => {
      this.props.closeFormFunc();
    }, this.

    _onSubmit = () => {/* istanbul ignore next */var _props =
      this.props; /* istanbul ignore next */const createSite = _props.createSite; /* istanbul ignore next */const scratch = _props.scratch; /* istanbul ignore next */const updateSite = _props.updateSite;
      const edit = scratch._id ? true : false;
      const successMsg = edit ? 'Site info successfully updated' : 'Site successfully created';

      let p;
      if (edit) {
        p = updateSite(scratch._id, scratch);
      } else {
        p = createSite(scratch);
      }
      p.then(res => {
        this._onCancelForm();
        this.props.actions.alertSend({
          dismissAfter: 2000,
          message: successMsg,
          type: 'success' });

      }).catch(err => {
        this._onCancelForm();
        this.props.actions.alertSend({
          message: \`ERROR: ${ err.message }\`,
          type: 'danger' });

      });
    }, _temp;}

  render() {/* istanbul ignore next */const

    scratch = this.props.scratch;

    return (
      /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ style: { width: 'auto', margin: 'auto' }, __source: { fileName: _jsxFileName, lineNumber: 82 }, __self: this },
        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'form', /* istanbul ignore next */{ onSubmit: () => this._onSubmit(), __source: { fileName: _jsxFileName, lineNumber: 83 }, __self: this },

          /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'form-row', __source: { fileName: _jsxFileName, lineNumber: 85 }, __self: this },

            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'form-col', __source: { fileName: _jsxFileName, lineNumber: 87 }, __self: this },
              /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'legend', /* istanbul ignore next */{ className: 'row', __source: { fileName: _jsxFileName, lineNumber: 88 }, __self: this }, /* istanbul ignore next */'Domain'),
              /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_TextField2.default, /* istanbul ignore next */{
                floatingLabelText: 'Identifier Name',
                onChange: () => this._onPropChange('name'),
                onBlur: () => this._validate('name'),
                ref: 'name',
                value: scratch.name || '', __source: { fileName: _jsxFileName, lineNumber: 89 }, __self: this }),

              /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_TextField2.default, /* istanbul ignore next */{
                floatingLabelText: 'Domain ID',
                onChange: () => this._onPropChange('domainID'),
                onBlur: () => this._validate('domainID'),
                ref: 'domainID',
                value: scratch.domainID || '', __source: { fileName: _jsxFileName, lineNumber: 96 }, __self: this }),


              /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'br', /* istanbul ignore next */{ __source: { fileName: _jsxFileName, lineNumber: 104 }, __self: this }), /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'br', /* istanbul ignore next */{ __source: { fileName: _jsxFileName, lineNumber: 104 }, __self: this }),
              /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'legend', /* istanbul ignore next */{ className: 'row', __source: { fileName: _jsxFileName, lineNumber: 105 }, __self: this }, /* istanbul ignore next */'Security'),
              /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_TextField2.default, /* istanbul ignore next */{
                floatingLabelText: 'Public PEM File',
                onChange: () => this._onPropChange('pemFiles.public'),
                onBlur: () => this._validate('pemFiles.public'),
                ref: 'pemFiles.public',
                value: scratch.pemFiles.public || '', __source: { fileName: _jsxFileName, lineNumber: 106 }, __self: this }),

              /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_TextField2.default, /* istanbul ignore next */{
                floatingLabelText: 'Private PEM File',
                onChange: () => this._onPropChange('pemFiles.private'),
                onBlur: () => this._validate('pemFiles.private'),
                ref: 'pemFiles.private',
                value: scratch.pemFiles.private || '', __source: { fileName: _jsxFileName, lineNumber: 113 }, __self: this }),

              /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_TextField2.default, /* istanbul ignore next */{
                disabled: true,
                floatingLabelText: 'Signing Method',
                onChange: () => this._onPropChange('signingMethod'),
                onBlur: () => this._validate('signingMethod'),
                ref: 'signingMethod',
                value: scratch.signingMethod || '', __source: { fileName: _jsxFileName, lineNumber: 120 }, __self: this })),



            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'form-row-spacer', __source: { fileName: _jsxFileName, lineNumber: 130 }, __self: this }),
            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'form-row-spacer', __source: { fileName: _jsxFileName, lineNumber: 131 }, __self: this }),

            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'form-col', __source: { fileName: _jsxFileName, lineNumber: 133 }, __self: this },
              /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'legend', /* istanbul ignore next */{ className: 'row', __source: { fileName: _jsxFileName, lineNumber: 134 }, __self: this }, /* istanbul ignore next */'Database'),
              /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_TextField2.default, /* istanbul ignore next */{
                floatingLabelText: 'DB Name',
                onChange: () => this._onPropChange('dbNm'),
                onBlur: () => this._validate('dbNm'),
                ref: 'dbNm',
                value: scratch.dbNm || '', __source: { fileName: _jsxFileName, lineNumber: 135 }, __self: this }),

              /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_TextField2.default, /* istanbul ignore next */{
                floatingLabelText: 'User Collection',
                onChange: () => this._onPropChange('collections.user'),
                onBlur: () => this._validate('collections.user'),
                ref: 'collections.user',
                value: scratch.collections.user || '', __source: { fileName: _jsxFileName, lineNumber: 142 }, __self: this }),

              /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_TextField2.default, /* istanbul ignore next */{
                floatingLabelText: 'Contact Collection',
                onChange: () => this._onPropChange('collections.contact'),
                onBlur: () => this._validate('collections.contact'),
                ref: 'collections.contact',
                value: scratch.collections.contact || '', __source: { fileName: _jsxFileName, lineNumber: 149 }, __self: this }),


              /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'br', /* istanbul ignore next */{ __source: { fileName: _jsxFileName, lineNumber: 157 }, __self: this }), /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'br', /* istanbul ignore next */{ __source: { fileName: _jsxFileName, lineNumber: 157 }, __self: this }),
              /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'legend', /* istanbul ignore next */{ className: 'row', __source: { fileName: _jsxFileName, lineNumber: 158 }, __self: this }, /* istanbul ignore next */'Site Info'),
              /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_TextField2.default, /* istanbul ignore next */{
                floatingLabelText: 'Credential Password Field',
                onChange: () => this._onPropChange('credentials.password'),
                onBlur: () => this._validate('credentials.password'),
                ref: 'credentials.password',
                value: scratch.credentials.password || '', __source: { fileName: _jsxFileName, lineNumber: 159 }, __self: this }),

              /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_TextField2.default, /* istanbul ignore next */{
                floatingLabelText: 'Credential Sitename Field',
                onChange: () => this._onPropChange('credentials.username'),
                onBlur: () => this._validate('credentials.username'),
                ref: 'credentials.username',
                value: scratch.credentials.username || '', __source: { fileName: _jsxFileName, lineNumber: 166 }, __self: this }),

              /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_TextField2.default, /* istanbul ignore next */{
                floatingLabelText: 'Reset URI',
                onChange: () => this._onPropChange('resetURI'),
                onBlur: () => this._validate('resetURI'),
                ref: 'resetURI',
                value: scratch.resetURI || '', __source: { fileName: _jsxFileName, lineNumber: 173 }, __self: this }))),





          /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'form-row', __source: { fileName: _jsxFileName, lineNumber: 184 }, __self: this },
            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ style: { flex: 1 }, __source: { fileName: _jsxFileName, lineNumber: 185 }, __self: this },
              /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_Subheader2.default, /* istanbul ignore next */{ __source: { fileName: _jsxFileName, lineNumber: 186 }, __self: this }, /* istanbul ignore next */'Status'),
              /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_Checkbox2.default, /* istanbul ignore next */{
                label: 'Active',
                labelPosition: 'right',
                onCheck: (e, val) => this._onCheck(e, val, 'active'),
                ref: 'active',
                checked: scratch.active, __source: { fileName: _jsxFileName, lineNumber: 187 }, __self: this }))),




          /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'form-row', style: { justifyContent: 'space-around' }, __source: { fileName: _jsxFileName, lineNumber: 197 }, __self: this },
            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_RaisedButton2.default, /* istanbul ignore next */{
              icon: /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_clear2.default, /* istanbul ignore next */{ __source: { fileName: _jsxFileName, lineNumber: 199 }, __self: this }),
              label: 'Cancel',
              onClick: () => this._onCancelForm(), __source: { fileName: _jsxFileName, lineNumber: 198 }, __self: this }),

            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_RaisedButton2.default, /* istanbul ignore next */{
              icon: /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_done2.default, /* istanbul ignore next */{ __source: { fileName: _jsxFileName, lineNumber: 204 }, __self: this }),
              label: 'Submit Site Info',
              onClick: () => this._onSubmit(),
              secondary: true, __source: { fileName: _jsxFileName, lineNumber: 203 }, __self: this })))));





  }}
        actions={
                Object {
                        "setSiteProp": [Function],
                      }
        }
        scratch={
                Object {
                        "active": false,
                        "collections": Object {
                          "contact": null,
                          "user": null,
                        },
                        "credentials": Object {
                          "password": "password",
                          "username": "email",
                        },
                        "dbNm": null,
                        "domainID": null,
                        "name": null,
                        "pemFiles": Object {
                          "private": null,
                          "public": null,
                        },
                        "resetURI": null,
                        "roles": Array [],
                        "signingMethod": "RSA",
                      }
        } />,
      "_debugID": 1,
      "_hostContainerInfo": null,
      "_hostParent": null,
      "_instance": Siteform {
        "_onCancelForm": [Function],
        "_onCheck": [Function],
        "_onPropChange": [Function],
        "_onSubmit": [Function],
        "_reactInternalInstance": [Circular],
        "_validate": [Function],
        "context": Object {},
        "props": Object {
          "actions": Object {
            "setSiteProp": [Function],
          },
          "scratch": Object {
            "active": false,
            "collections": Object {
              "contact": null,
              "user": null,
            },
            "credentials": Object {
              "password": "password",
              "username": "email",
            },
            "dbNm": null,
            "domainID": null,
            "name": null,
            "pemFiles": Object {
              "private": null,
              "public": null,
            },
            "resetURI": null,
            "roles": Array [],
            "signingMethod": "RSA",
          },
        },
        "refs": Object {},
        "state": null,
        "updater": Object {
          "enqueueCallback": [Function],
          "enqueueCallbackInternal": [Function],
          "enqueueElementInternal": [Function],
          "enqueueForceUpdate": [Function],
          "enqueueReplaceState": [Function],
          "enqueueSetState": [Function],
          "isMounted": [Function],
          "validateCallback": [Function],
        },
      },
      "_mountOrder": 1,
      "_pendingCallbacks": null,
      "_pendingElement": null,
      "_pendingForceUpdate": false,
      "_pendingReplaceState": false,
      "_pendingStateQueue": null,
      "_renderedComponent": Object {
        "_currentElement": <div
          style={
                    Object {
                              "margin": "auto",
                              "width": "auto",
                            }
          }>
          <form
                    onSubmit={[Function]}>
                    <div
                              className="form-row">
                              <div
                                        className="form-col">
                                        <legend
                                                  className="row">
                                                  Domain
                                        </legend>
                                        <function TextField() {
                                            var _ref;
                                        
                                            var _temp, _this, _ret;
                                        
                                            (0, _classCallCheck3.default)(this, TextField);
                                        
                                            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                                              args[_key] = arguments[_key];
                                            }
                                        
                                            return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = TextField.__proto__ || (0, _getPrototypeOf2.default)(TextField)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
                                              isFocused: false,
                                              errorText: undefined,
                                              hasValue: false,
                                              isClean: true
                                            }, _this.handleInputBlur = function (event) {
                                              _this.setState({ isFocused: false });
                                              if (_this.props.onBlur) _this.props.onBlur(event);
                                            }, _this.handleInputChange = function (event) {
                                              _this.setState({ hasValue: isValid(event.target.value), isClean: false });
                                              if (_this.props.onChange) _this.props.onChange(event, event.target.value);
                                            }, _this.handleInputFocus = function (event) {
                                              if (_this.props.disabled) {
                                                return;
                                              }
                                              _this.setState({ isFocused: true });
                                              if (_this.props.onFocus) {
                                                _this.props.onFocus(event);
                                              }
                                            }, _this.handleHeightChange = function (event, height) {
                                              var newHeight = height + 24;
                                              if (_this.props.floatingLabelText) {
                                                newHeight += 24;
                                              }
                                              _reactDom2.default.findDOMNode(_this).style.height = newHeight + 'px';
                                            }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
                                          }
                                                  disabled={false}
                                                  floatingLabelFixed={false}
                                                  floatingLabelText="Identifier Name"
                                                  fullWidth={false}
                                                  multiLine={false}
                                                  onBlur={[Function]}
                                                  onChange={[Function]}
                                                  rows={1}
                                                  type="text"
                                                  underlineShow={true}
                                                  value="" />
                                        <function TextField() {
                                            var _ref;
                                        
                                            var _temp, _this, _ret;
                                        
                                            (0, _classCallCheck3.default)(this, TextField);
                                        
                                            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                                              args[_key] = arguments[_key];
                                            }
                                        
                                            return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = TextField.__proto__ || (0, _getPrototypeOf2.default)(TextField)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
                                              isFocused: false,
                                              errorText: undefined,
                                              hasValue: false,
                                              isClean: true
                                            }, _this.handleInputBlur = function (event) {
                                              _this.setState({ isFocused: false });
                                              if (_this.props.onBlur) _this.props.onBlur(event);
                                            }, _this.handleInputChange = function (event) {
                                              _this.setState({ hasValue: isValid(event.target.value), isClean: false });
                                              if (_this.props.onChange) _this.props.onChange(event, event.target.value);
                                            }, _this.handleInputFocus = function (event) {
                                              if (_this.props.disabled) {
                                                return;
                                              }
                                              _this.setState({ isFocused: true });
                                              if (_this.props.onFocus) {
                                                _this.props.onFocus(event);
                                              }
                                            }, _this.handleHeightChange = function (event, height) {
                                              var newHeight = height + 24;
                                              if (_this.props.floatingLabelText) {
                                                newHeight += 24;
                                              }
                                              _reactDom2.default.findDOMNode(_this).style.height = newHeight + 'px';
                                            }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
                                          }
                                                  disabled={false}
                                                  floatingLabelFixed={false}
                                                  floatingLabelText="Domain ID"
                                                  fullWidth={false}
                                                  multiLine={false}
                                                  onBlur={[Function]}
                                                  onChange={[Function]}
                                                  rows={1}
                                                  type="text"
                                                  underlineShow={true}
                                                  value="" />
                                        <br />
                                        <br />
                                        <legend
                                                  className="row">
                                                  Security
                                        </legend>
                                        <function TextField() {
                                            var _ref;
                                        
                                            var _temp, _this, _ret;
                                        
                                            (0, _classCallCheck3.default)(this, TextField);
                                        
                                            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                                              args[_key] = arguments[_key];
                                            }
                                        
                                            return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = TextField.__proto__ || (0, _getPrototypeOf2.default)(TextField)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
                                              isFocused: false,
                                              errorText: undefined,
                                              hasValue: false,
                                              isClean: true
                                            }, _this.handleInputBlur = function (event) {
                                              _this.setState({ isFocused: false });
                                              if (_this.props.onBlur) _this.props.onBlur(event);
                                            }, _this.handleInputChange = function (event) {
                                              _this.setState({ hasValue: isValid(event.target.value), isClean: false });
                                              if (_this.props.onChange) _this.props.onChange(event, event.target.value);
                                            }, _this.handleInputFocus = function (event) {
                                              if (_this.props.disabled) {
                                                return;
                                              }
                                              _this.setState({ isFocused: true });
                                              if (_this.props.onFocus) {
                                                _this.props.onFocus(event);
                                              }
                                            }, _this.handleHeightChange = function (event, height) {
                                              var newHeight = height + 24;
                                              if (_this.props.floatingLabelText) {
                                                newHeight += 24;
                                              }
                                              _reactDom2.default.findDOMNode(_this).style.height = newHeight + 'px';
                                            }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
                                          }
                                                  disabled={false}
                                                  floatingLabelFixed={false}
                                                  floatingLabelText="Public PEM File"
                                                  fullWidth={false}
                                                  multiLine={false}
                                                  onBlur={[Function]}
                                                  onChange={[Function]}
                                                  rows={1}
                                                  type="text"
                                                  underlineShow={true}
                                                  value="" />
                                        <function TextField() {
                                            var _ref;
                                        
                                            var _temp, _this, _ret;
                                        
                                            (0, _classCallCheck3.default)(this, TextField);
                                        
                                            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                                              args[_key] = arguments[_key];
                                            }
                                        
                                            return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = TextField.__proto__ || (0, _getPrototypeOf2.default)(TextField)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
                                              isFocused: false,
                                              errorText: undefined,
                                              hasValue: false,
                                              isClean: true
                                            }, _this.handleInputBlur = function (event) {
                                              _this.setState({ isFocused: false });
                                              if (_this.props.onBlur) _this.props.onBlur(event);
                                            }, _this.handleInputChange = function (event) {
                                              _this.setState({ hasValue: isValid(event.target.value), isClean: false });
                                              if (_this.props.onChange) _this.props.onChange(event, event.target.value);
                                            }, _this.handleInputFocus = function (event) {
                                              if (_this.props.disabled) {
                                                return;
                                              }
                                              _this.setState({ isFocused: true });
                                              if (_this.props.onFocus) {
                                                _this.props.onFocus(event);
                                              }
                                            }, _this.handleHeightChange = function (event, height) {
                                              var newHeight = height + 24;
                                              if (_this.props.floatingLabelText) {
                                                newHeight += 24;
                                              }
                                              _reactDom2.default.findDOMNode(_this).style.height = newHeight + 'px';
                                            }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
                                          }
                                                  disabled={false}
                                                  floatingLabelFixed={false}
                                                  floatingLabelText="Private PEM File"
                                                  fullWidth={false}
                                                  multiLine={false}
                                                  onBlur={[Function]}
                                                  onChange={[Function]}
                                                  rows={1}
                                                  type="text"
                                                  underlineShow={true}
                                                  value="" />
                                        <function TextField() {
                                            var _ref;
                                        
                                            var _temp, _this, _ret;
                                        
                                            (0, _classCallCheck3.default)(this, TextField);
                                        
                                            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                                              args[_key] = arguments[_key];
                                            }
                                        
                                            return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = TextField.__proto__ || (0, _getPrototypeOf2.default)(TextField)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
                                              isFocused: false,
                                              errorText: undefined,
                                              hasValue: false,
                                              isClean: true
                                            }, _this.handleInputBlur = function (event) {
                                              _this.setState({ isFocused: false });
                                              if (_this.props.onBlur) _this.props.onBlur(event);
                                            }, _this.handleInputChange = function (event) {
                                              _this.setState({ hasValue: isValid(event.target.value), isClean: false });
                                              if (_this.props.onChange) _this.props.onChange(event, event.target.value);
                                            }, _this.handleInputFocus = function (event) {
                                              if (_this.props.disabled) {
                                                return;
                                              }
                                              _this.setState({ isFocused: true });
                                              if (_this.props.onFocus) {
                                                _this.props.onFocus(event);
                                              }
                                            }, _this.handleHeightChange = function (event, height) {
                                              var newHeight = height + 24;
                                              if (_this.props.floatingLabelText) {
                                                newHeight += 24;
                                              }
                                              _reactDom2.default.findDOMNode(_this).style.height = newHeight + 'px';
                                            }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
                                          }
                                                  disabled={true}
                                                  floatingLabelFixed={false}
                                                  floatingLabelText="Signing Method"
                                                  fullWidth={false}
                                                  multiLine={false}
                                                  onBlur={[Function]}
                                                  onChange={[Function]}
                                                  rows={1}
                                                  type="text"
                                                  underlineShow={true}
                                                  value="RSA" />
                              </div>
                              <div
                                        className="form-row-spacer" />
                              <div
                                        className="form-row-spacer" />
                              <div
                                        className="form-col">
                                        <legend
                                                  className="row">
                                                  Database
                                        </legend>
                                        <function TextField() {
                                            var _ref;
                                        
                                            var _temp, _this, _ret;
                                        
                                            (0, _classCallCheck3.default)(this, TextField);
                                        
                                            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                                              args[_key] = arguments[_key];
                                            }
                                        
                                            return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = TextField.__proto__ || (0, _getPrototypeOf2.default)(TextField)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
                                              isFocused: false,
                                              errorText: undefined,
                                              hasValue: false,
                                              isClean: true
                                            }, _this.handleInputBlur = function (event) {
                                              _this.setState({ isFocused: false });
                                              if (_this.props.onBlur) _this.props.onBlur(event);
                                            }, _this.handleInputChange = function (event) {
                                              _this.setState({ hasValue: isValid(event.target.value), isClean: false });
                                              if (_this.props.onChange) _this.props.onChange(event, event.target.value);
                                            }, _this.handleInputFocus = function (event) {
                                              if (_this.props.disabled) {
                                                return;
                                              }
                                              _this.setState({ isFocused: true });
                                              if (_this.props.onFocus) {
                                                _this.props.onFocus(event);
                                              }
                                            }, _this.handleHeightChange = function (event, height) {
                                              var newHeight = height + 24;
                                              if (_this.props.floatingLabelText) {
                                                newHeight += 24;
                                              }
                                              _reactDom2.default.findDOMNode(_this).style.height = newHeight + 'px';
                                            }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
                                          }
                                                  disabled={false}
                                                  floatingLabelFixed={false}
                                                  floatingLabelText="DB Name"
                                                  fullWidth={false}
                                                  multiLine={false}
                                                  onBlur={[Function]}
                                                  onChange={[Function]}
                                                  rows={1}
                                                  type="text"
                                                  underlineShow={true}
                                                  value="" />
                                        <function TextField() {
                                            var _ref;
                                        
                                            var _temp, _this, _ret;
                                        
                                            (0, _classCallCheck3.default)(this, TextField);
                                        
                                            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                                              args[_key] = arguments[_key];
                                            }
                                        
                                            return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = TextField.__proto__ || (0, _getPrototypeOf2.default)(TextField)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
                                              isFocused: false,
                                              errorText: undefined,
                                              hasValue: false,
                                              isClean: true
                                            }, _this.handleInputBlur = function (event) {
                                              _this.setState({ isFocused: false });
                                              if (_this.props.onBlur) _this.props.onBlur(event);
                                            }, _this.handleInputChange = function (event) {
                                              _this.setState({ hasValue: isValid(event.target.value), isClean: false });
                                              if (_this.props.onChange) _this.props.onChange(event, event.target.value);
                                            }, _this.handleInputFocus = function (event) {
                                              if (_this.props.disabled) {
                                                return;
                                              }
                                              _this.setState({ isFocused: true });
                                              if (_this.props.onFocus) {
                                                _this.props.onFocus(event);
                                              }
                                            }, _this.handleHeightChange = function (event, height) {
                                              var newHeight = height + 24;
                                              if (_this.props.floatingLabelText) {
                                                newHeight += 24;
                                              }
                                              _reactDom2.default.findDOMNode(_this).style.height = newHeight + 'px';
                                            }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
                                          }
                                                  disabled={false}
                                                  floatingLabelFixed={false}
                                                  floatingLabelText="User Collection"
                                                  fullWidth={false}
                                                  multiLine={false}
                                                  onBlur={[Function]}
                                                  onChange={[Function]}
                                                  rows={1}
                                                  type="text"
                                                  underlineShow={true}
                                                  value="" />
                                        <function TextField() {
                                            var _ref;
                                        
                                            var _temp, _this, _ret;
                                        
                                            (0, _classCallCheck3.default)(this, TextField);
                                        
                                            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                                              args[_key] = arguments[_key];
                                            }
                                        
                                            return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = TextField.__proto__ || (0, _getPrototypeOf2.default)(TextField)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
                                              isFocused: false,
                                              errorText: undefined,
                                              hasValue: false,
                                              isClean: true
                                            }, _this.handleInputBlur = function (event) {
                                              _this.setState({ isFocused: false });
                                              if (_this.props.onBlur) _this.props.onBlur(event);
                                            }, _this.handleInputChange = function (event) {
                                              _this.setState({ hasValue: isValid(event.target.value), isClean: false });
                                              if (_this.props.onChange) _this.props.onChange(event, event.target.value);
                                            }, _this.handleInputFocus = function (event) {
                                              if (_this.props.disabled) {
                                                return;
                                              }
                                              _this.setState({ isFocused: true });
                                              if (_this.props.onFocus) {
                                                _this.props.onFocus(event);
                                              }
                                            }, _this.handleHeightChange = function (event, height) {
                                              var newHeight = height + 24;
                                              if (_this.props.floatingLabelText) {
                                                newHeight += 24;
                                              }
                                              _reactDom2.default.findDOMNode(_this).style.height = newHeight + 'px';
                                            }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
                                          }
                                                  disabled={false}
                                                  floatingLabelFixed={false}
                                                  floatingLabelText="Contact Collection"
                                                  fullWidth={false}
                                                  multiLine={false}
                                                  onBlur={[Function]}
                                                  onChange={[Function]}
                                                  rows={1}
                                                  type="text"
                                                  underlineShow={true}
                                                  value="" />
                                        <br />
                                        <br />
                                        <legend
                                                  className="row">
                                                  Site Info
                                        </legend>
                                        <function TextField() {
                                            var _ref;
                                        
                                            var _temp, _this, _ret;
                                        
                                            (0, _classCallCheck3.default)(this, TextField);
                                        
                                            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                                              args[_key] = arguments[_key];
                                            }
                                        
                                            return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = TextField.__proto__ || (0, _getPrototypeOf2.default)(TextField)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
                                              isFocused: false,
                                              errorText: undefined,
                                              hasValue: false,
                                              isClean: true
                                            }, _this.handleInputBlur = function (event) {
                                              _this.setState({ isFocused: false });
                                              if (_this.props.onBlur) _this.props.onBlur(event);
                                            }, _this.handleInputChange = function (event) {
                                              _this.setState({ hasValue: isValid(event.target.value), isClean: false });
                                              if (_this.props.onChange) _this.props.onChange(event, event.target.value);
                                            }, _this.handleInputFocus = function (event) {
                                              if (_this.props.disabled) {
                                                return;
                                              }
                                              _this.setState({ isFocused: true });
                                              if (_this.props.onFocus) {
                                                _this.props.onFocus(event);
                                              }
                                            }, _this.handleHeightChange = function (event, height) {
                                              var newHeight = height + 24;
                                              if (_this.props.floatingLabelText) {
                                                newHeight += 24;
                                              }
                                              _reactDom2.default.findDOMNode(_this).style.height = newHeight + 'px';
                                            }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
                                          }
                                                  disabled={false}
                                                  floatingLabelFixed={false}
                                                  floatingLabelText="Credential Password Field"
                                                  fullWidth={false}
                                                  multiLine={false}
                                                  onBlur={[Function]}
                                                  onChange={[Function]}
                                                  rows={1}
                                                  type="text"
                                                  underlineShow={true}
                                                  value="password" />
                                        <function TextField() {
                                            var _ref;
                                        
                                            var _temp, _this, _ret;
                                        
                                            (0, _classCallCheck3.default)(this, TextField);
                                        
                                            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                                              args[_key] = arguments[_key];
                                            }
                                        
                                            return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = TextField.__proto__ || (0, _getPrototypeOf2.default)(TextField)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
                                              isFocused: false,
                                              errorText: undefined,
                                              hasValue: false,
                                              isClean: true
                                            }, _this.handleInputBlur = function (event) {
                                              _this.setState({ isFocused: false });
                                              if (_this.props.onBlur) _this.props.onBlur(event);
                                            }, _this.handleInputChange = function (event) {
                                              _this.setState({ hasValue: isValid(event.target.value), isClean: false });
                                              if (_this.props.onChange) _this.props.onChange(event, event.target.value);
                                            }, _this.handleInputFocus = function (event) {
                                              if (_this.props.disabled) {
                                                return;
                                              }
                                              _this.setState({ isFocused: true });
                                              if (_this.props.onFocus) {
                                                _this.props.onFocus(event);
                                              }
                                            }, _this.handleHeightChange = function (event, height) {
                                              var newHeight = height + 24;
                                              if (_this.props.floatingLabelText) {
                                                newHeight += 24;
                                              }
                                              _reactDom2.default.findDOMNode(_this).style.height = newHeight + 'px';
                                            }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
                                          }
                                                  disabled={false}
                                                  floatingLabelFixed={false}
                                                  floatingLabelText="Credential Sitename Field"
                                                  fullWidth={false}
                                                  multiLine={false}
                                                  onBlur={[Function]}
                                                  onChange={[Function]}
                                                  rows={1}
                                                  type="text"
                                                  underlineShow={true}
                                                  value="email" />
                                        <function TextField() {
                                            var _ref;
                                        
                                            var _temp, _this, _ret;
                                        
                                            (0, _classCallCheck3.default)(this, TextField);
                                        
                                            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                                              args[_key] = arguments[_key];
                                            }
                                        
                                            return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = TextField.__proto__ || (0, _getPrototypeOf2.default)(TextField)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
                                              isFocused: false,
                                              errorText: undefined,
                                              hasValue: false,
                                              isClean: true
                                            }, _this.handleInputBlur = function (event) {
                                              _this.setState({ isFocused: false });
                                              if (_this.props.onBlur) _this.props.onBlur(event);
                                            }, _this.handleInputChange = function (event) {
                                              _this.setState({ hasValue: isValid(event.target.value), isClean: false });
                                              if (_this.props.onChange) _this.props.onChange(event, event.target.value);
                                            }, _this.handleInputFocus = function (event) {
                                              if (_this.props.disabled) {
                                                return;
                                              }
                                              _this.setState({ isFocused: true });
                                              if (_this.props.onFocus) {
                                                _this.props.onFocus(event);
                                              }
                                            }, _this.handleHeightChange = function (event, height) {
                                              var newHeight = height + 24;
                                              if (_this.props.floatingLabelText) {
                                                newHeight += 24;
                                              }
                                              _reactDom2.default.findDOMNode(_this).style.height = newHeight + 'px';
                                            }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
                                          }
                                                  disabled={false}
                                                  floatingLabelFixed={false}
                                                  floatingLabelText="Reset URI"
                                                  fullWidth={false}
                                                  multiLine={false}
                                                  onBlur={[Function]}
                                                  onChange={[Function]}
                                                  rows={1}
                                                  type="text"
                                                  underlineShow={true}
                                                  value="" />
                              </div>
                    </div>
                    <div
                              className="form-row">
                              <div
                                        style={
                                                  Object {
                                                            "flex": 1,
                                                          }
                                        }>
                                        <function Subheader(props, context) {
                                          var children = props.children;
                                          var inset = props.inset;
                                          var style = props.style;
                                          var other = (0, _objectWithoutProperties3.default)(props, ['children', 'inset', 'style']);
                                          var _context$muiTheme = context.muiTheme;
                                          var prepareStyles = _context$muiTheme.prepareStyles;
                                          var subheader = _context$muiTheme.subheader;
                                        
                                        
                                          var styles = {
                                            root: {
                                              boxSizing: 'border-box',
                                              color: subheader.color,
                                              fontSize: 14,
                                              fontWeight: subheader.fontWeight,
                                              lineHeight: '48px',
                                              paddingLeft: inset ? 72 : 16,
                                              width: '100%'
                                            }
                                          };
                                        
                                          return _react2.default.createElement(
                                            'div',
                                            (0, _extends3.default)({}, other, { style: prepareStyles((0, _simpleAssign2.default)(styles.root, style)) }),
                                            children
                                          );
                                        }
                                                  inset={false}>
                                                  Status
                                        </function Subheader(props, context) {
                                          var children = props.children;
                                          var inset = props.inset;
                                          var style = props.style;
                                          var other = (0, _objectWithoutProperties3.default)(props, ['children', 'inset', 'style']);
                                          var _context$muiTheme = context.muiTheme;
                                          var prepareStyles = _context$muiTheme.prepareStyles;
                                          var subheader = _context$muiTheme.subheader;
                                        
                                        
                                          var styles = {
                                            root: {
                                              boxSizing: 'border-box',
                                              color: subheader.color,
                                              fontSize: 14,
                                              fontWeight: subheader.fontWeight,
                                              lineHeight: '48px',
                                              paddingLeft: inset ? 72 : 16,
                                              width: '100%'
                                            }
                                          };
                                        
                                          return _react2.default.createElement(
                                            'div',
                                            (0, _extends3.default)({}, other, { style: prepareStyles((0, _simpleAssign2.default)(styles.root, style)) }),
                                            children
                                          );
                                        }>
                                        <function Checkbox() {
                                            var _ref;
                                        
                                            var _temp, _this, _ret;
                                        
                                            (0, _classCallCheck3.default)(this, Checkbox);
                                        
                                            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                                              args[_key] = arguments[_key];
                                            }
                                        
                                            return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = Checkbox.__proto__ || (0, _getPrototypeOf2.default)(Checkbox)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
                                              switched: false
                                            }, _this.handleStateChange = function (newSwitched) {
                                              _this.setState({
                                                switched: newSwitched
                                              });
                                            }, _this.handleCheck = function (event, isInputChecked) {
                                              if (_this.props.onCheck) {
                                                _this.props.onCheck(event, isInputChecked);
                                              }
                                            }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
                                          }
                                                  checked={false}
                                                  disabled={false}
                                                  label="Active"
                                                  labelPosition="right"
                                                  onCheck={[Function]} />
                              </div>
                    </div>
                    <div
                              className="form-row"
                              style={
                                        Object {
                                                  "justifyContent": "space-around",
                                                }
                              }>
                              <function RaisedButton() {
                                  var _ref;
                              
                                  var _temp, _this, _ret;
                              
                                  (0, _classCallCheck3.default)(this, RaisedButton);
                              
                                  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                                    args[_key] = arguments[_key];
                                  }
                              
                                  return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = RaisedButton.__proto__ || (0, _getPrototypeOf2.default)(RaisedButton)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
                                    hovered: false,
                                    keyboardFocused: false,
                                    touched: false,
                                    initialZDepth: 0,
                                    zDepth: 0
                                  }, _this.handleMouseDown = function (event) {
                                    // only listen to left clicks
                                    if (event.button === 0) {
                                      _this.setState({
                                        zDepth: _this.state.initialZDepth + 1
                                      });
                                    }
                                    if (_this.props.onMouseDown) {
                                      _this.props.onMouseDown(event);
                                    }
                                  }, _this.handleMouseUp = function (event) {
                                    _this.setState({
                                      zDepth: _this.state.initialZDepth
                                    });
                                    if (_this.props.onMouseUp) {
                                      _this.props.onMouseUp(event);
                                    }
                                  }, _this.handleMouseLeave = function (event) {
                                    if (!_this.state.keyboardFocused) {
                                      _this.setState({
                                        zDepth: _this.state.initialZDepth,
                                        hovered: false
                                      });
                                    }
                                    if (_this.props.onMouseLeave) {
                                      _this.props.onMouseLeave(event);
                                    }
                                  }, _this.handleMouseEnter = function (event) {
                                    if (!_this.state.keyboardFocused && !_this.state.touched) {
                                      _this.setState({
                                        hovered: true
                                      });
                                    }
                                    if (_this.props.onMouseEnter) {
                                      _this.props.onMouseEnter(event);
                                    }
                                  }, _this.handleTouchStart = function (event) {
                                    _this.setState({
                                      touched: true,
                                      zDepth: _this.state.initialZDepth + 1
                                    });
                              
                                    if (_this.props.onTouchStart) {
                                      _this.props.onTouchStart(event);
                                    }
                                  }, _this.handleTouchEnd = function (event) {
                                    _this.setState({
                                      zDepth: _this.state.initialZDepth
                                    });
                              
                                    if (_this.props.onTouchEnd) {
                                      _this.props.onTouchEnd(event);
                                    }
                                  }, _this.handleKeyboardFocus = function (event, keyboardFocused) {
                                    var zDepth = keyboardFocused && !_this.props.disabled ? _this.state.initialZDepth + 1 : _this.state.initialZDepth;
                              
                                    _this.setState({
                                      zDepth: zDepth,
                                      keyboardFocused: keyboardFocused
                                    });
                                  }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
                                }
                                        disabled={false}
                                        fullWidth={false}
                                        icon={
                                                  <function _class() {
                                                          _classCallCheck(this, _class);
                                                  
                                                          return _possibleConstructorReturn(this, _Component.apply(this, arguments));
                                                        } />
                                        }
                                        label="Cancel"
                                        labelPosition="after"
                                        onClick={[Function]}
                                        primary={false}
                                        secondary={false} />
                              <function RaisedButton() {
                                  var _ref;
                              
                                  var _temp, _this, _ret;
                              
                                  (0, _classCallCheck3.default)(this, RaisedButton);
                              
                                  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                                    args[_key] = arguments[_key];
                                  }
                              
                                  return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = RaisedButton.__proto__ || (0, _getPrototypeOf2.default)(RaisedButton)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
                                    hovered: false,
                                    keyboardFocused: false,
                                    touched: false,
                                    initialZDepth: 0,
                                    zDepth: 0
                                  }, _this.handleMouseDown = function (event) {
                                    // only listen to left clicks
                                    if (event.button === 0) {
                                      _this.setState({
                                        zDepth: _this.state.initialZDepth + 1
                                      });
                                    }
                                    if (_this.props.onMouseDown) {
                                      _this.props.onMouseDown(event);
                                    }
                                  }, _this.handleMouseUp = function (event) {
                                    _this.setState({
                                      zDepth: _this.state.initialZDepth
                                    });
                                    if (_this.props.onMouseUp) {
                                      _this.props.onMouseUp(event);
                                    }
                                  }, _this.handleMouseLeave = function (event) {
                                    if (!_this.state.keyboardFocused) {
                                      _this.setState({
                                        zDepth: _this.state.initialZDepth,
                                        hovered: false
                                      });
                                    }
                                    if (_this.props.onMouseLeave) {
                                      _this.props.onMouseLeave(event);
                                    }
                                  }, _this.handleMouseEnter = function (event) {
                                    if (!_this.state.keyboardFocused && !_this.state.touched) {
                                      _this.setState({
                                        hovered: true
                                      });
                                    }
                                    if (_this.props.onMouseEnter) {
                                      _this.props.onMouseEnter(event);
                                    }
                                  }, _this.handleTouchStart = function (event) {
                                    _this.setState({
                                      touched: true,
                                      zDepth: _this.state.initialZDepth + 1
                                    });
                              
                                    if (_this.props.onTouchStart) {
                                      _this.props.onTouchStart(event);
                                    }
                                  }, _this.handleTouchEnd = function (event) {
                                    _this.setState({
                                      zDepth: _this.state.initialZDepth
                                    });
                              
                                    if (_this.props.onTouchEnd) {
                                      _this.props.onTouchEnd(event);
                                    }
                                  }, _this.handleKeyboardFocus = function (event, keyboardFocused) {
                                    var zDepth = keyboardFocused && !_this.props.disabled ? _this.state.initialZDepth + 1 : _this.state.initialZDepth;
                              
                                    _this.setState({
                                      zDepth: zDepth,
                                      keyboardFocused: keyboardFocused
                                    });
                                  }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
                                }
                                        disabled={false}
                                        fullWidth={false}
                                        icon={
                                                  <function _class() {
                                                          _classCallCheck(this, _class);
                                                  
                                                          return _possibleConstructorReturn(this, _Component.apply(this, arguments));
                                                        } />
                                        }
                                        label="Submit Site Info"
                                        labelPosition="after"
                                        onClick={[Function]}
                                        primary={false}
                                        secondary={true} />
                    </div>
          </form>
</div>,
        "_debugID": 2,
        "_renderedOutput": <div
          style={
                    Object {
                              "margin": "auto",
                              "width": "auto",
                            }
          }>
          <form
                    onSubmit={[Function]}>
                    <div
                              className="form-row">
                              <div
                                        className="form-col">
                                        <legend
                                                  className="row">
                                                  Domain
                                        </legend>
                                        <function TextField() {
                                            var _ref;
                                        
                                            var _temp, _this, _ret;
                                        
                                            (0, _classCallCheck3.default)(this, TextField);
                                        
                                            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                                              args[_key] = arguments[_key];
                                            }
                                        
                                            return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = TextField.__proto__ || (0, _getPrototypeOf2.default)(TextField)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
                                              isFocused: false,
                                              errorText: undefined,
                                              hasValue: false,
                                              isClean: true
                                            }, _this.handleInputBlur = function (event) {
                                              _this.setState({ isFocused: false });
                                              if (_this.props.onBlur) _this.props.onBlur(event);
                                            }, _this.handleInputChange = function (event) {
                                              _this.setState({ hasValue: isValid(event.target.value), isClean: false });
                                              if (_this.props.onChange) _this.props.onChange(event, event.target.value);
                                            }, _this.handleInputFocus = function (event) {
                                              if (_this.props.disabled) {
                                                return;
                                              }
                                              _this.setState({ isFocused: true });
                                              if (_this.props.onFocus) {
                                                _this.props.onFocus(event);
                                              }
                                            }, _this.handleHeightChange = function (event, height) {
                                              var newHeight = height + 24;
                                              if (_this.props.floatingLabelText) {
                                                newHeight += 24;
                                              }
                                              _reactDom2.default.findDOMNode(_this).style.height = newHeight + 'px';
                                            }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
                                          }
                                                  disabled={false}
                                                  floatingLabelFixed={false}
                                                  floatingLabelText="Identifier Name"
                                                  fullWidth={false}
                                                  multiLine={false}
                                                  onBlur={[Function]}
                                                  onChange={[Function]}
                                                  rows={1}
                                                  type="text"
                                                  underlineShow={true}
                                                  value="" />
                                        <function TextField() {
                                            var _ref;
                                        
                                            var _temp, _this, _ret;
                                        
                                            (0, _classCallCheck3.default)(this, TextField);
                                        
                                            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                                              args[_key] = arguments[_key];
                                            }
                                        
                                            return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = TextField.__proto__ || (0, _getPrototypeOf2.default)(TextField)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
                                              isFocused: false,
                                              errorText: undefined,
                                              hasValue: false,
                                              isClean: true
                                            }, _this.handleInputBlur = function (event) {
                                              _this.setState({ isFocused: false });
                                              if (_this.props.onBlur) _this.props.onBlur(event);
                                            }, _this.handleInputChange = function (event) {
                                              _this.setState({ hasValue: isValid(event.target.value), isClean: false });
                                              if (_this.props.onChange) _this.props.onChange(event, event.target.value);
                                            }, _this.handleInputFocus = function (event) {
                                              if (_this.props.disabled) {
                                                return;
                                              }
                                              _this.setState({ isFocused: true });
                                              if (_this.props.onFocus) {
                                                _this.props.onFocus(event);
                                              }
                                            }, _this.handleHeightChange = function (event, height) {
                                              var newHeight = height + 24;
                                              if (_this.props.floatingLabelText) {
                                                newHeight += 24;
                                              }
                                              _reactDom2.default.findDOMNode(_this).style.height = newHeight + 'px';
                                            }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
                                          }
                                                  disabled={false}
                                                  floatingLabelFixed={false}
                                                  floatingLabelText="Domain ID"
                                                  fullWidth={false}
                                                  multiLine={false}
                                                  onBlur={[Function]}
                                                  onChange={[Function]}
                                                  rows={1}
                                                  type="text"
                                                  underlineShow={true}
                                                  value="" />
                                        <br />
                                        <br />
                                        <legend
                                                  className="row">
                                                  Security
                                        </legend>
                                        <function TextField() {
                                            var _ref;
                                        
                                            var _temp, _this, _ret;
                                        
                                            (0, _classCallCheck3.default)(this, TextField);
                                        
                                            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                                              args[_key] = arguments[_key];
                                            }
                                        
                                            return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = TextField.__proto__ || (0, _getPrototypeOf2.default)(TextField)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
                                              isFocused: false,
                                              errorText: undefined,
                                              hasValue: false,
                                              isClean: true
                                            }, _this.handleInputBlur = function (event) {
                                              _this.setState({ isFocused: false });
                                              if (_this.props.onBlur) _this.props.onBlur(event);
                                            }, _this.handleInputChange = function (event) {
                                              _this.setState({ hasValue: isValid(event.target.value), isClean: false });
                                              if (_this.props.onChange) _this.props.onChange(event, event.target.value);
                                            }, _this.handleInputFocus = function (event) {
                                              if (_this.props.disabled) {
                                                return;
                                              }
                                              _this.setState({ isFocused: true });
                                              if (_this.props.onFocus) {
                                                _this.props.onFocus(event);
                                              }
                                            }, _this.handleHeightChange = function (event, height) {
                                              var newHeight = height + 24;
                                              if (_this.props.floatingLabelText) {
                                                newHeight += 24;
                                              }
                                              _reactDom2.default.findDOMNode(_this).style.height = newHeight + 'px';
                                            }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
                                          }
                                                  disabled={false}
                                                  floatingLabelFixed={false}
                                                  floatingLabelText="Public PEM File"
                                                  fullWidth={false}
                                                  multiLine={false}
                                                  onBlur={[Function]}
                                                  onChange={[Function]}
                                                  rows={1}
                                                  type="text"
                                                  underlineShow={true}
                                                  value="" />
                                        <function TextField() {
                                            var _ref;
                                        
                                            var _temp, _this, _ret;
                                        
                                            (0, _classCallCheck3.default)(this, TextField);
                                        
                                            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                                              args[_key] = arguments[_key];
                                            }
                                        
                                            return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = TextField.__proto__ || (0, _getPrototypeOf2.default)(TextField)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
                                              isFocused: false,
                                              errorText: undefined,
                                              hasValue: false,
                                              isClean: true
                                            }, _this.handleInputBlur = function (event) {
                                              _this.setState({ isFocused: false });
                                              if (_this.props.onBlur) _this.props.onBlur(event);
                                            }, _this.handleInputChange = function (event) {
                                              _this.setState({ hasValue: isValid(event.target.value), isClean: false });
                                              if (_this.props.onChange) _this.props.onChange(event, event.target.value);
                                            }, _this.handleInputFocus = function (event) {
                                              if (_this.props.disabled) {
                                                return;
                                              }
                                              _this.setState({ isFocused: true });
                                              if (_this.props.onFocus) {
                                                _this.props.onFocus(event);
                                              }
                                            }, _this.handleHeightChange = function (event, height) {
                                              var newHeight = height + 24;
                                              if (_this.props.floatingLabelText) {
                                                newHeight += 24;
                                              }
                                              _reactDom2.default.findDOMNode(_this).style.height = newHeight + 'px';
                                            }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
                                          }
                                                  disabled={false}
                                                  floatingLabelFixed={false}
                                                  floatingLabelText="Private PEM File"
                                                  fullWidth={false}
                                                  multiLine={false}
                                                  onBlur={[Function]}
                                                  onChange={[Function]}
                                                  rows={1}
                                                  type="text"
                                                  underlineShow={true}
                                                  value="" />
                                        <function TextField() {
                                            var _ref;
                                        
                                            var _temp, _this, _ret;
                                        
                                            (0, _classCallCheck3.default)(this, TextField);
                                        
                                            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                                              args[_key] = arguments[_key];
                                            }
                                        
                                            return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = TextField.__proto__ || (0, _getPrototypeOf2.default)(TextField)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
                                              isFocused: false,
                                              errorText: undefined,
                                              hasValue: false,
                                              isClean: true
                                            }, _this.handleInputBlur = function (event) {
                                              _this.setState({ isFocused: false });
                                              if (_this.props.onBlur) _this.props.onBlur(event);
                                            }, _this.handleInputChange = function (event) {
                                              _this.setState({ hasValue: isValid(event.target.value), isClean: false });
                                              if (_this.props.onChange) _this.props.onChange(event, event.target.value);
                                            }, _this.handleInputFocus = function (event) {
                                              if (_this.props.disabled) {
                                                return;
                                              }
                                              _this.setState({ isFocused: true });
                                              if (_this.props.onFocus) {
                                                _this.props.onFocus(event);
                                              }
                                            }, _this.handleHeightChange = function (event, height) {
                                              var newHeight = height + 24;
                                              if (_this.props.floatingLabelText) {
                                                newHeight += 24;
                                              }
                                              _reactDom2.default.findDOMNode(_this).style.height = newHeight + 'px';
                                            }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
                                          }
                                                  disabled={true}
                                                  floatingLabelFixed={false}
                                                  floatingLabelText="Signing Method"
                                                  fullWidth={false}
                                                  multiLine={false}
                                                  onBlur={[Function]}
                                                  onChange={[Function]}
                                                  rows={1}
                                                  type="text"
                                                  underlineShow={true}
                                                  value="RSA" />
                              </div>
                              <div
                                        className="form-row-spacer" />
                              <div
                                        className="form-row-spacer" />
                              <div
                                        className="form-col">
                                        <legend
                                                  className="row">
                                                  Database
                                        </legend>
                                        <function TextField() {
                                            var _ref;
                                        
                                            var _temp, _this, _ret;
                                        
                                            (0, _classCallCheck3.default)(this, TextField);
                                        
                                            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                                              args[_key] = arguments[_key];
                                            }
                                        
                                            return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = TextField.__proto__ || (0, _getPrototypeOf2.default)(TextField)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
                                              isFocused: false,
                                              errorText: undefined,
                                              hasValue: false,
                                              isClean: true
                                            }, _this.handleInputBlur = function (event) {
                                              _this.setState({ isFocused: false });
                                              if (_this.props.onBlur) _this.props.onBlur(event);
                                            }, _this.handleInputChange = function (event) {
                                              _this.setState({ hasValue: isValid(event.target.value), isClean: false });
                                              if (_this.props.onChange) _this.props.onChange(event, event.target.value);
                                            }, _this.handleInputFocus = function (event) {
                                              if (_this.props.disabled) {
                                                return;
                                              }
                                              _this.setState({ isFocused: true });
                                              if (_this.props.onFocus) {
                                                _this.props.onFocus(event);
                                              }
                                            }, _this.handleHeightChange = function (event, height) {
                                              var newHeight = height + 24;
                                              if (_this.props.floatingLabelText) {
                                                newHeight += 24;
                                              }
                                              _reactDom2.default.findDOMNode(_this).style.height = newHeight + 'px';
                                            }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
                                          }
                                                  disabled={false}
                                                  floatingLabelFixed={false}
                                                  floatingLabelText="DB Name"
                                                  fullWidth={false}
                                                  multiLine={false}
                                                  onBlur={[Function]}
                                                  onChange={[Function]}
                                                  rows={1}
                                                  type="text"
                                                  underlineShow={true}
                                                  value="" />
                                        <function TextField() {
                                            var _ref;
                                        
                                            var _temp, _this, _ret;
                                        
                                            (0, _classCallCheck3.default)(this, TextField);
                                        
                                            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                                              args[_key] = arguments[_key];
                                            }
                                        
                                            return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = TextField.__proto__ || (0, _getPrototypeOf2.default)(TextField)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
                                              isFocused: false,
                                              errorText: undefined,
                                              hasValue: false,
                                              isClean: true
                                            }, _this.handleInputBlur = function (event) {
                                              _this.setState({ isFocused: false });
                                              if (_this.props.onBlur) _this.props.onBlur(event);
                                            }, _this.handleInputChange = function (event) {
                                              _this.setState({ hasValue: isValid(event.target.value), isClean: false });
                                              if (_this.props.onChange) _this.props.onChange(event, event.target.value);
                                            }, _this.handleInputFocus = function (event) {
                                              if (_this.props.disabled) {
                                                return;
                                              }
                                              _this.setState({ isFocused: true });
                                              if (_this.props.onFocus) {
                                                _this.props.onFocus(event);
                                              }
                                            }, _this.handleHeightChange = function (event, height) {
                                              var newHeight = height + 24;
                                              if (_this.props.floatingLabelText) {
                                                newHeight += 24;
                                              }
                                              _reactDom2.default.findDOMNode(_this).style.height = newHeight + 'px';
                                            }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
                                          }
                                                  disabled={false}
                                                  floatingLabelFixed={false}
                                                  floatingLabelText="User Collection"
                                                  fullWidth={false}
                                                  multiLine={false}
                                                  onBlur={[Function]}
                                                  onChange={[Function]}
                                                  rows={1}
                                                  type="text"
                                                  underlineShow={true}
                                                  value="" />
                                        <function TextField() {
                                            var _ref;
                                        
                                            var _temp, _this, _ret;
                                        
                                            (0, _classCallCheck3.default)(this, TextField);
                                        
                                            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                                              args[_key] = arguments[_key];
                                            }
                                        
                                            return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = TextField.__proto__ || (0, _getPrototypeOf2.default)(TextField)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
                                              isFocused: false,
                                              errorText: undefined,
                                              hasValue: false,
                                              isClean: true
                                            }, _this.handleInputBlur = function (event) {
                                              _this.setState({ isFocused: false });
                                              if (_this.props.onBlur) _this.props.onBlur(event);
                                            }, _this.handleInputChange = function (event) {
                                              _this.setState({ hasValue: isValid(event.target.value), isClean: false });
                                              if (_this.props.onChange) _this.props.onChange(event, event.target.value);
                                            }, _this.handleInputFocus = function (event) {
                                              if (_this.props.disabled) {
                                                return;
                                              }
                                              _this.setState({ isFocused: true });
                                              if (_this.props.onFocus) {
                                                _this.props.onFocus(event);
                                              }
                                            }, _this.handleHeightChange = function (event, height) {
                                              var newHeight = height + 24;
                                              if (_this.props.floatingLabelText) {
                                                newHeight += 24;
                                              }
                                              _reactDom2.default.findDOMNode(_this).style.height = newHeight + 'px';
                                            }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
                                          }
                                                  disabled={false}
                                                  floatingLabelFixed={false}
                                                  floatingLabelText="Contact Collection"
                                                  fullWidth={false}
                                                  multiLine={false}
                                                  onBlur={[Function]}
                                                  onChange={[Function]}
                                                  rows={1}
                                                  type="text"
                                                  underlineShow={true}
                                                  value="" />
                                        <br />
                                        <br />
                                        <legend
                                                  className="row">
                                                  Site Info
                                        </legend>
                                        <function TextField() {
                                            var _ref;
                                        
                                            var _temp, _this, _ret;
                                        
                                            (0, _classCallCheck3.default)(this, TextField);
                                        
                                            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                                              args[_key] = arguments[_key];
                                            }
                                        
                                            return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = TextField.__proto__ || (0, _getPrototypeOf2.default)(TextField)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
                                              isFocused: false,
                                              errorText: undefined,
                                              hasValue: false,
                                              isClean: true
                                            }, _this.handleInputBlur = function (event) {
                                              _this.setState({ isFocused: false });
                                              if (_this.props.onBlur) _this.props.onBlur(event);
                                            }, _this.handleInputChange = function (event) {
                                              _this.setState({ hasValue: isValid(event.target.value), isClean: false });
                                              if (_this.props.onChange) _this.props.onChange(event, event.target.value);
                                            }, _this.handleInputFocus = function (event) {
                                              if (_this.props.disabled) {
                                                return;
                                              }
                                              _this.setState({ isFocused: true });
                                              if (_this.props.onFocus) {
                                                _this.props.onFocus(event);
                                              }
                                            }, _this.handleHeightChange = function (event, height) {
                                              var newHeight = height + 24;
                                              if (_this.props.floatingLabelText) {
                                                newHeight += 24;
                                              }
                                              _reactDom2.default.findDOMNode(_this).style.height = newHeight + 'px';
                                            }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
                                          }
                                                  disabled={false}
                                                  floatingLabelFixed={false}
                                                  floatingLabelText="Credential Password Field"
                                                  fullWidth={false}
                                                  multiLine={false}
                                                  onBlur={[Function]}
                                                  onChange={[Function]}
                                                  rows={1}
                                                  type="text"
                                                  underlineShow={true}
                                                  value="password" />
                                        <function TextField() {
                                            var _ref;
                                        
                                            var _temp, _this, _ret;
                                        
                                            (0, _classCallCheck3.default)(this, TextField);
                                        
                                            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                                              args[_key] = arguments[_key];
                                            }
                                        
                                            return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = TextField.__proto__ || (0, _getPrototypeOf2.default)(TextField)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
                                              isFocused: false,
                                              errorText: undefined,
                                              hasValue: false,
                                              isClean: true
                                            }, _this.handleInputBlur = function (event) {
                                              _this.setState({ isFocused: false });
                                              if (_this.props.onBlur) _this.props.onBlur(event);
                                            }, _this.handleInputChange = function (event) {
                                              _this.setState({ hasValue: isValid(event.target.value), isClean: false });
                                              if (_this.props.onChange) _this.props.onChange(event, event.target.value);
                                            }, _this.handleInputFocus = function (event) {
                                              if (_this.props.disabled) {
                                                return;
                                              }
                                              _this.setState({ isFocused: true });
                                              if (_this.props.onFocus) {
                                                _this.props.onFocus(event);
                                              }
                                            }, _this.handleHeightChange = function (event, height) {
                                              var newHeight = height + 24;
                                              if (_this.props.floatingLabelText) {
                                                newHeight += 24;
                                              }
                                              _reactDom2.default.findDOMNode(_this).style.height = newHeight + 'px';
                                            }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
                                          }
                                                  disabled={false}
                                                  floatingLabelFixed={false}
                                                  floatingLabelText="Credential Sitename Field"
                                                  fullWidth={false}
                                                  multiLine={false}
                                                  onBlur={[Function]}
                                                  onChange={[Function]}
                                                  rows={1}
                                                  type="text"
                                                  underlineShow={true}
                                                  value="email" />
                                        <function TextField() {
                                            var _ref;
                                        
                                            var _temp, _this, _ret;
                                        
                                            (0, _classCallCheck3.default)(this, TextField);
                                        
                                            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                                              args[_key] = arguments[_key];
                                            }
                                        
                                            return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = TextField.__proto__ || (0, _getPrototypeOf2.default)(TextField)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
                                              isFocused: false,
                                              errorText: undefined,
                                              hasValue: false,
                                              isClean: true
                                            }, _this.handleInputBlur = function (event) {
                                              _this.setState({ isFocused: false });
                                              if (_this.props.onBlur) _this.props.onBlur(event);
                                            }, _this.handleInputChange = function (event) {
                                              _this.setState({ hasValue: isValid(event.target.value), isClean: false });
                                              if (_this.props.onChange) _this.props.onChange(event, event.target.value);
                                            }, _this.handleInputFocus = function (event) {
                                              if (_this.props.disabled) {
                                                return;
                                              }
                                              _this.setState({ isFocused: true });
                                              if (_this.props.onFocus) {
                                                _this.props.onFocus(event);
                                              }
                                            }, _this.handleHeightChange = function (event, height) {
                                              var newHeight = height + 24;
                                              if (_this.props.floatingLabelText) {
                                                newHeight += 24;
                                              }
                                              _reactDom2.default.findDOMNode(_this).style.height = newHeight + 'px';
                                            }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
                                          }
                                                  disabled={false}
                                                  floatingLabelFixed={false}
                                                  floatingLabelText="Reset URI"
                                                  fullWidth={false}
                                                  multiLine={false}
                                                  onBlur={[Function]}
                                                  onChange={[Function]}
                                                  rows={1}
                                                  type="text"
                                                  underlineShow={true}
                                                  value="" />
                              </div>
                    </div>
                    <div
                              className="form-row">
                              <div
                                        style={
                                                  Object {
                                                            "flex": 1,
                                                          }
                                        }>
                                        <function Subheader(props, context) {
                                          var children = props.children;
                                          var inset = props.inset;
                                          var style = props.style;
                                          var other = (0, _objectWithoutProperties3.default)(props, ['children', 'inset', 'style']);
                                          var _context$muiTheme = context.muiTheme;
                                          var prepareStyles = _context$muiTheme.prepareStyles;
                                          var subheader = _context$muiTheme.subheader;
                                        
                                        
                                          var styles = {
                                            root: {
                                              boxSizing: 'border-box',
                                              color: subheader.color,
                                              fontSize: 14,
                                              fontWeight: subheader.fontWeight,
                                              lineHeight: '48px',
                                              paddingLeft: inset ? 72 : 16,
                                              width: '100%'
                                            }
                                          };
                                        
                                          return _react2.default.createElement(
                                            'div',
                                            (0, _extends3.default)({}, other, { style: prepareStyles((0, _simpleAssign2.default)(styles.root, style)) }),
                                            children
                                          );
                                        }
                                                  inset={false}>
                                                  Status
                                        </function Subheader(props, context) {
                                          var children = props.children;
                                          var inset = props.inset;
                                          var style = props.style;
                                          var other = (0, _objectWithoutProperties3.default)(props, ['children', 'inset', 'style']);
                                          var _context$muiTheme = context.muiTheme;
                                          var prepareStyles = _context$muiTheme.prepareStyles;
                                          var subheader = _context$muiTheme.subheader;
                                        
                                        
                                          var styles = {
                                            root: {
                                              boxSizing: 'border-box',
                                              color: subheader.color,
                                              fontSize: 14,
                                              fontWeight: subheader.fontWeight,
                                              lineHeight: '48px',
                                              paddingLeft: inset ? 72 : 16,
                                              width: '100%'
                                            }
                                          };
                                        
                                          return _react2.default.createElement(
                                            'div',
                                            (0, _extends3.default)({}, other, { style: prepareStyles((0, _simpleAssign2.default)(styles.root, style)) }),
                                            children
                                          );
                                        }>
                                        <function Checkbox() {
                                            var _ref;
                                        
                                            var _temp, _this, _ret;
                                        
                                            (0, _classCallCheck3.default)(this, Checkbox);
                                        
                                            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                                              args[_key] = arguments[_key];
                                            }
                                        
                                            return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = Checkbox.__proto__ || (0, _getPrototypeOf2.default)(Checkbox)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
                                              switched: false
                                            }, _this.handleStateChange = function (newSwitched) {
                                              _this.setState({
                                                switched: newSwitched
                                              });
                                            }, _this.handleCheck = function (event, isInputChecked) {
                                              if (_this.props.onCheck) {
                                                _this.props.onCheck(event, isInputChecked);
                                              }
                                            }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
                                          }
                                                  checked={false}
                                                  disabled={false}
                                                  label="Active"
                                                  labelPosition="right"
                                                  onCheck={[Function]} />
                              </div>
                    </div>
                    <div
                              className="form-row"
                              style={
                                        Object {
                                                  "justifyContent": "space-around",
                                                }
                              }>
                              <function RaisedButton() {
                                  var _ref;
                              
                                  var _temp, _this, _ret;
                              
                                  (0, _classCallCheck3.default)(this, RaisedButton);
                              
                                  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                                    args[_key] = arguments[_key];
                                  }
                              
                                  return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = RaisedButton.__proto__ || (0, _getPrototypeOf2.default)(RaisedButton)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
                                    hovered: false,
                                    keyboardFocused: false,
                                    touched: false,
                                    initialZDepth: 0,
                                    zDepth: 0
                                  }, _this.handleMouseDown = function (event) {
                                    // only listen to left clicks
                                    if (event.button === 0) {
                                      _this.setState({
                                        zDepth: _this.state.initialZDepth + 1
                                      });
                                    }
                                    if (_this.props.onMouseDown) {
                                      _this.props.onMouseDown(event);
                                    }
                                  }, _this.handleMouseUp = function (event) {
                                    _this.setState({
                                      zDepth: _this.state.initialZDepth
                                    });
                                    if (_this.props.onMouseUp) {
                                      _this.props.onMouseUp(event);
                                    }
                                  }, _this.handleMouseLeave = function (event) {
                                    if (!_this.state.keyboardFocused) {
                                      _this.setState({
                                        zDepth: _this.state.initialZDepth,
                                        hovered: false
                                      });
                                    }
                                    if (_this.props.onMouseLeave) {
                                      _this.props.onMouseLeave(event);
                                    }
                                  }, _this.handleMouseEnter = function (event) {
                                    if (!_this.state.keyboardFocused && !_this.state.touched) {
                                      _this.setState({
                                        hovered: true
                                      });
                                    }
                                    if (_this.props.onMouseEnter) {
                                      _this.props.onMouseEnter(event);
                                    }
                                  }, _this.handleTouchStart = function (event) {
                                    _this.setState({
                                      touched: true,
                                      zDepth: _this.state.initialZDepth + 1
                                    });
                              
                                    if (_this.props.onTouchStart) {
                                      _this.props.onTouchStart(event);
                                    }
                                  }, _this.handleTouchEnd = function (event) {
                                    _this.setState({
                                      zDepth: _this.state.initialZDepth
                                    });
                              
                                    if (_this.props.onTouchEnd) {
                                      _this.props.onTouchEnd(event);
                                    }
                                  }, _this.handleKeyboardFocus = function (event, keyboardFocused) {
                                    var zDepth = keyboardFocused && !_this.props.disabled ? _this.state.initialZDepth + 1 : _this.state.initialZDepth;
                              
                                    _this.setState({
                                      zDepth: zDepth,
                                      keyboardFocused: keyboardFocused
                                    });
                                  }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
                                }
                                        disabled={false}
                                        fullWidth={false}
                                        icon={
                                                  <function _class() {
                                                          _classCallCheck(this, _class);
                                                  
                                                          return _possibleConstructorReturn(this, _Component.apply(this, arguments));
                                                        } />
                                        }
                                        label="Cancel"
                                        labelPosition="after"
                                        onClick={[Function]}
                                        primary={false}
                                        secondary={false} />
                              <function RaisedButton() {
                                  var _ref;
                              
                                  var _temp, _this, _ret;
                              
                                  (0, _classCallCheck3.default)(this, RaisedButton);
                              
                                  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                                    args[_key] = arguments[_key];
                                  }
                              
                                  return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = RaisedButton.__proto__ || (0, _getPrototypeOf2.default)(RaisedButton)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
                                    hovered: false,
                                    keyboardFocused: false,
                                    touched: false,
                                    initialZDepth: 0,
                                    zDepth: 0
                                  }, _this.handleMouseDown = function (event) {
                                    // only listen to left clicks
                                    if (event.button === 0) {
                                      _this.setState({
                                        zDepth: _this.state.initialZDepth + 1
                                      });
                                    }
                                    if (_this.props.onMouseDown) {
                                      _this.props.onMouseDown(event);
                                    }
                                  }, _this.handleMouseUp = function (event) {
                                    _this.setState({
                                      zDepth: _this.state.initialZDepth
                                    });
                                    if (_this.props.onMouseUp) {
                                      _this.props.onMouseUp(event);
                                    }
                                  }, _this.handleMouseLeave = function (event) {
                                    if (!_this.state.keyboardFocused) {
                                      _this.setState({
                                        zDepth: _this.state.initialZDepth,
                                        hovered: false
                                      });
                                    }
                                    if (_this.props.onMouseLeave) {
                                      _this.props.onMouseLeave(event);
                                    }
                                  }, _this.handleMouseEnter = function (event) {
                                    if (!_this.state.keyboardFocused && !_this.state.touched) {
                                      _this.setState({
                                        hovered: true
                                      });
                                    }
                                    if (_this.props.onMouseEnter) {
                                      _this.props.onMouseEnter(event);
                                    }
                                  }, _this.handleTouchStart = function (event) {
                                    _this.setState({
                                      touched: true,
                                      zDepth: _this.state.initialZDepth + 1
                                    });
                              
                                    if (_this.props.onTouchStart) {
                                      _this.props.onTouchStart(event);
                                    }
                                  }, _this.handleTouchEnd = function (event) {
                                    _this.setState({
                                      zDepth: _this.state.initialZDepth
                                    });
                              
                                    if (_this.props.onTouchEnd) {
                                      _this.props.onTouchEnd(event);
                                    }
                                  }, _this.handleKeyboardFocus = function (event, keyboardFocused) {
                                    var zDepth = keyboardFocused && !_this.props.disabled ? _this.state.initialZDepth + 1 : _this.state.initialZDepth;
                              
                                    _this.setState({
                                      zDepth: zDepth,
                                      keyboardFocused: keyboardFocused
                                    });
                                  }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
                                }
                                        disabled={false}
                                        fullWidth={false}
                                        icon={
                                                  <function _class() {
                                                          _classCallCheck(this, _class);
                                                  
                                                          return _possibleConstructorReturn(this, _Component.apply(this, arguments));
                                                        } />
                                        }
                                        label="Submit Site Info"
                                        labelPosition="after"
                                        onClick={[Function]}
                                        primary={false}
                                        secondary={true} />
                    </div>
          </form>
</div>,
      },
      "_renderedNodeType": 0,
      "_rootNodeID": 0,
      "_topLevelWrapper": null,
      "_updateBatchNumber": null,
      "_warnedAboutRefsInRender": false,
    },
    "getRenderOutput": [Function],
    "render": [Function],
  },
  "root": [Circular],
  "unrendered": <class Siteform extends /* istanbul ignore next */_react.Component {/* istanbul ignore next */constructor() {var _temp;return _temp = super(...arguments), this.

    _onPropChange = field => {
      const val = this.refs[field].input.value;
      this.props.actions.setSiteProp({ [field]: val });
    }, this.

    _onCheck = (e, val, field) => {
      console.log('check val:', val);
      this.props.actions.setSiteProp({ [field]: val });
    }, this.

    _validate = field => {
    }, this.

    _onCancelForm = () => {
      this.props.closeFormFunc();
    }, this.

    _onSubmit = () => {/* istanbul ignore next */var _props =
      this.props; /* istanbul ignore next */const createSite = _props.createSite; /* istanbul ignore next */const scratch = _props.scratch; /* istanbul ignore next */const updateSite = _props.updateSite;
      const edit = scratch._id ? true : false;
      const successMsg = edit ? 'Site info successfully updated' : 'Site successfully created';

      let p;
      if (edit) {
        p = updateSite(scratch._id, scratch);
      } else {
        p = createSite(scratch);
      }
      p.then(res => {
        this._onCancelForm();
        this.props.actions.alertSend({
          dismissAfter: 2000,
          message: successMsg,
          type: 'success' });

      }).catch(err => {
        this._onCancelForm();
        this.props.actions.alertSend({
          message: \`ERROR: ${ err.message }\`,
          type: 'danger' });

      });
    }, _temp;}

  render() {/* istanbul ignore next */const

    scratch = this.props.scratch;

    return (
      /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ style: { width: 'auto', margin: 'auto' }, __source: { fileName: _jsxFileName, lineNumber: 82 }, __self: this },
        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'form', /* istanbul ignore next */{ onSubmit: () => this._onSubmit(), __source: { fileName: _jsxFileName, lineNumber: 83 }, __self: this },

          /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'form-row', __source: { fileName: _jsxFileName, lineNumber: 85 }, __self: this },

            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'form-col', __source: { fileName: _jsxFileName, lineNumber: 87 }, __self: this },
              /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'legend', /* istanbul ignore next */{ className: 'row', __source: { fileName: _jsxFileName, lineNumber: 88 }, __self: this }, /* istanbul ignore next */'Domain'),
              /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_TextField2.default, /* istanbul ignore next */{
                floatingLabelText: 'Identifier Name',
                onChange: () => this._onPropChange('name'),
                onBlur: () => this._validate('name'),
                ref: 'name',
                value: scratch.name || '', __source: { fileName: _jsxFileName, lineNumber: 89 }, __self: this }),

              /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_TextField2.default, /* istanbul ignore next */{
                floatingLabelText: 'Domain ID',
                onChange: () => this._onPropChange('domainID'),
                onBlur: () => this._validate('domainID'),
                ref: 'domainID',
                value: scratch.domainID || '', __source: { fileName: _jsxFileName, lineNumber: 96 }, __self: this }),


              /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'br', /* istanbul ignore next */{ __source: { fileName: _jsxFileName, lineNumber: 104 }, __self: this }), /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'br', /* istanbul ignore next */{ __source: { fileName: _jsxFileName, lineNumber: 104 }, __self: this }),
              /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'legend', /* istanbul ignore next */{ className: 'row', __source: { fileName: _jsxFileName, lineNumber: 105 }, __self: this }, /* istanbul ignore next */'Security'),
              /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_TextField2.default, /* istanbul ignore next */{
                floatingLabelText: 'Public PEM File',
                onChange: () => this._onPropChange('pemFiles.public'),
                onBlur: () => this._validate('pemFiles.public'),
                ref: 'pemFiles.public',
                value: scratch.pemFiles.public || '', __source: { fileName: _jsxFileName, lineNumber: 106 }, __self: this }),

              /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_TextField2.default, /* istanbul ignore next */{
                floatingLabelText: 'Private PEM File',
                onChange: () => this._onPropChange('pemFiles.private'),
                onBlur: () => this._validate('pemFiles.private'),
                ref: 'pemFiles.private',
                value: scratch.pemFiles.private || '', __source: { fileName: _jsxFileName, lineNumber: 113 }, __self: this }),

              /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_TextField2.default, /* istanbul ignore next */{
                disabled: true,
                floatingLabelText: 'Signing Method',
                onChange: () => this._onPropChange('signingMethod'),
                onBlur: () => this._validate('signingMethod'),
                ref: 'signingMethod',
                value: scratch.signingMethod || '', __source: { fileName: _jsxFileName, lineNumber: 120 }, __self: this })),



            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'form-row-spacer', __source: { fileName: _jsxFileName, lineNumber: 130 }, __self: this }),
            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'form-row-spacer', __source: { fileName: _jsxFileName, lineNumber: 131 }, __self: this }),

            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'form-col', __source: { fileName: _jsxFileName, lineNumber: 133 }, __self: this },
              /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'legend', /* istanbul ignore next */{ className: 'row', __source: { fileName: _jsxFileName, lineNumber: 134 }, __self: this }, /* istanbul ignore next */'Database'),
              /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_TextField2.default, /* istanbul ignore next */{
                floatingLabelText: 'DB Name',
                onChange: () => this._onPropChange('dbNm'),
                onBlur: () => this._validate('dbNm'),
                ref: 'dbNm',
                value: scratch.dbNm || '', __source: { fileName: _jsxFileName, lineNumber: 135 }, __self: this }),

              /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_TextField2.default, /* istanbul ignore next */{
                floatingLabelText: 'User Collection',
                onChange: () => this._onPropChange('collections.user'),
                onBlur: () => this._validate('collections.user'),
                ref: 'collections.user',
                value: scratch.collections.user || '', __source: { fileName: _jsxFileName, lineNumber: 142 }, __self: this }),

              /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_TextField2.default, /* istanbul ignore next */{
                floatingLabelText: 'Contact Collection',
                onChange: () => this._onPropChange('collections.contact'),
                onBlur: () => this._validate('collections.contact'),
                ref: 'collections.contact',
                value: scratch.collections.contact || '', __source: { fileName: _jsxFileName, lineNumber: 149 }, __self: this }),


              /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'br', /* istanbul ignore next */{ __source: { fileName: _jsxFileName, lineNumber: 157 }, __self: this }), /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'br', /* istanbul ignore next */{ __source: { fileName: _jsxFileName, lineNumber: 157 }, __self: this }),
              /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'legend', /* istanbul ignore next */{ className: 'row', __source: { fileName: _jsxFileName, lineNumber: 158 }, __self: this }, /* istanbul ignore next */'Site Info'),
              /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_TextField2.default, /* istanbul ignore next */{
                floatingLabelText: 'Credential Password Field',
                onChange: () => this._onPropChange('credentials.password'),
                onBlur: () => this._validate('credentials.password'),
                ref: 'credentials.password',
                value: scratch.credentials.password || '', __source: { fileName: _jsxFileName, lineNumber: 159 }, __self: this }),

              /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_TextField2.default, /* istanbul ignore next */{
                floatingLabelText: 'Credential Sitename Field',
                onChange: () => this._onPropChange('credentials.username'),
                onBlur: () => this._validate('credentials.username'),
                ref: 'credentials.username',
                value: scratch.credentials.username || '', __source: { fileName: _jsxFileName, lineNumber: 166 }, __self: this }),

              /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_TextField2.default, /* istanbul ignore next */{
                floatingLabelText: 'Reset URI',
                onChange: () => this._onPropChange('resetURI'),
                onBlur: () => this._validate('resetURI'),
                ref: 'resetURI',
                value: scratch.resetURI || '', __source: { fileName: _jsxFileName, lineNumber: 173 }, __self: this }))),





          /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'form-row', __source: { fileName: _jsxFileName, lineNumber: 184 }, __self: this },
            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ style: { flex: 1 }, __source: { fileName: _jsxFileName, lineNumber: 185 }, __self: this },
              /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_Subheader2.default, /* istanbul ignore next */{ __source: { fileName: _jsxFileName, lineNumber: 186 }, __self: this }, /* istanbul ignore next */'Status'),
              /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_Checkbox2.default, /* istanbul ignore next */{
                label: 'Active',
                labelPosition: 'right',
                onCheck: (e, val) => this._onCheck(e, val, 'active'),
                ref: 'active',
                checked: scratch.active, __source: { fileName: _jsxFileName, lineNumber: 187 }, __self: this }))),




          /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'form-row', style: { justifyContent: 'space-around' }, __source: { fileName: _jsxFileName, lineNumber: 197 }, __self: this },
            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_RaisedButton2.default, /* istanbul ignore next */{
              icon: /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_clear2.default, /* istanbul ignore next */{ __source: { fileName: _jsxFileName, lineNumber: 199 }, __self: this }),
              label: 'Cancel',
              onClick: () => this._onCancelForm(), __source: { fileName: _jsxFileName, lineNumber: 198 }, __self: this }),

            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_RaisedButton2.default, /* istanbul ignore next */{
              icon: /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_done2.default, /* istanbul ignore next */{ __source: { fileName: _jsxFileName, lineNumber: 204 }, __self: this }),
              label: 'Submit Site Info',
              onClick: () => this._onSubmit(),
              secondary: true, __source: { fileName: _jsxFileName, lineNumber: 203 }, __self: this })))));





  }}
    actions={
        Object {
            "setSiteProp": [Function],
          }
    }
    scratch={
        Object {
            "active": false,
            "collections": Object {
              "contact": null,
              "user": null,
            },
            "credentials": Object {
              "password": "password",
              "username": "email",
            },
            "dbNm": null,
            "domainID": null,
            "name": null,
            "pemFiles": Object {
              "private": null,
              "public": null,
            },
            "resetURI": null,
            "roles": Array [],
            "signingMethod": "RSA",
          }
    } />,
}
`;
