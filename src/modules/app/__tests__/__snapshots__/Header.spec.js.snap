exports[`components <Header /> matches snapshot 1`] = `
ShallowWrapper {
  "complexSelector": ComplexSelector {
    "buildPredicate": [Function],
    "childrenOfNode": [Function],
    "findWhereUnwrapped": [Function],
  },
  "length": 1,
  "node": <header
    className="App-header">
    <img
        alt="logo"
        className="App-logo"
        src="test-file-stub" />
    <nav
        className="App-nav">
        <function FlatButton() {
            var _ref;
        
            var _temp, _this, _ret;
        
            (0, _classCallCheck3.default)(this, FlatButton);
        
            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
              args[_key] = arguments[_key];
            }
        
            return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = FlatButton.__proto__ || (0, _getPrototypeOf2.default)(FlatButton)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
              hovered: false,
              isKeyboardFocused: false,
              touch: false
            }, _this.handleKeyboardFocus = function (event, isKeyboardFocused) {
              _this.setState({ isKeyboardFocused: isKeyboardFocused });
              _this.props.onKeyboardFocus(event, isKeyboardFocused);
            }, _this.handleMouseEnter = function (event) {
              // Cancel hover styles for touch devices
              if (!_this.state.touch) _this.setState({ hovered: true });
              _this.props.onMouseEnter(event);
            }, _this.handleMouseLeave = function (event) {
              _this.setState({ hovered: false });
              _this.props.onMouseLeave(event);
            }, _this.handleTouchStart = function (event) {
              _this.setState({ touch: true });
              _this.props.onTouchStart(event);
            }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
          }
            containerElement={
                <function (props, context, updater) {
                      // This constructor gets overridden by mocks. The argument is used
                      // by mocks to assert on what gets mounted.
                
                      if (process.env.NODE_ENV !== 'production') {
                        process.env.NODE_ENV !== 'production' ? warning(this instanceof Constructor, 'Something is calling a React component directly. Use a factory or ' + 'JSX instead. See: https://fb.me/react-legacyfactory') : void 0;
                      }
                
                      // Wire up auto-binding
                      if (this.__reactAutoBindPairs.length) {
                        bindAutoBindMethods(this);
                      }
                
                      this.props = props;
                      this.context = context;
                      this.refs = emptyObject;
                      this.updater = updater || ReactNoopUpdateQueue;
                
                      this.state = null;
                
                      // ReactClasses doesn't have constructors. Instead, they use the
                      // getInitialState and componentWillMount methods for initialization.
                
                      var initialState = this.getInitialState ? this.getInitialState() : null;
                      if (process.env.NODE_ENV !== 'production') {
                        // We allow auto-mocks to proceed as if they're returning null.
                        if (initialState === undefined && this.getInitialState._isMockFunction) {
                          // This is probably bad practice. Consider warning here and
                          // deprecating this convenience.
                          initialState = null;
                        }
                      }
                      !(typeof initialState === 'object' && !Array.isArray(initialState)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.getInitialState(): must return an object or null', Constructor.displayName || 'ReactCompositeComponent') : _prodInvariant('82', Constructor.displayName || 'ReactCompositeComponent') : void 0;
                
                      this.state = initialState;
                    }
                    activeStyle={
                        Object {
                            "backgroundColor": "#fff",
                            "color": "#000",
                          }
                    }
                    onlyActiveOnIndex={false}
                    style={Object {}}
                    to="/" />
            }
            disabled={false}
            label="dashboard"
            labelPosition="after"
            labelStyle={Object {}}
            onKeyboardFocus={[Function]}
            onMouseEnter={[Function]}
            onMouseLeave={[Function]}
            onTouchStart={[Function]}
            primary={false}
            secondary={true}
            style={
                Object {
                    "borderRadius": 0,
                  }
            } />
        <function FlatButton() {
            var _ref;
        
            var _temp, _this, _ret;
        
            (0, _classCallCheck3.default)(this, FlatButton);
        
            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
              args[_key] = arguments[_key];
            }
        
            return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = FlatButton.__proto__ || (0, _getPrototypeOf2.default)(FlatButton)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
              hovered: false,
              isKeyboardFocused: false,
              touch: false
            }, _this.handleKeyboardFocus = function (event, isKeyboardFocused) {
              _this.setState({ isKeyboardFocused: isKeyboardFocused });
              _this.props.onKeyboardFocus(event, isKeyboardFocused);
            }, _this.handleMouseEnter = function (event) {
              // Cancel hover styles for touch devices
              if (!_this.state.touch) _this.setState({ hovered: true });
              _this.props.onMouseEnter(event);
            }, _this.handleMouseLeave = function (event) {
              _this.setState({ hovered: false });
              _this.props.onMouseLeave(event);
            }, _this.handleTouchStart = function (event) {
              _this.setState({ touch: true });
              _this.props.onTouchStart(event);
            }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
          }
            containerElement={
                <function (props, context, updater) {
                      // This constructor gets overridden by mocks. The argument is used
                      // by mocks to assert on what gets mounted.
                
                      if (process.env.NODE_ENV !== 'production') {
                        process.env.NODE_ENV !== 'production' ? warning(this instanceof Constructor, 'Something is calling a React component directly. Use a factory or ' + 'JSX instead. See: https://fb.me/react-legacyfactory') : void 0;
                      }
                
                      // Wire up auto-binding
                      if (this.__reactAutoBindPairs.length) {
                        bindAutoBindMethods(this);
                      }
                
                      this.props = props;
                      this.context = context;
                      this.refs = emptyObject;
                      this.updater = updater || ReactNoopUpdateQueue;
                
                      this.state = null;
                
                      // ReactClasses doesn't have constructors. Instead, they use the
                      // getInitialState and componentWillMount methods for initialization.
                
                      var initialState = this.getInitialState ? this.getInitialState() : null;
                      if (process.env.NODE_ENV !== 'production') {
                        // We allow auto-mocks to proceed as if they're returning null.
                        if (initialState === undefined && this.getInitialState._isMockFunction) {
                          // This is probably bad practice. Consider warning here and
                          // deprecating this convenience.
                          initialState = null;
                        }
                      }
                      !(typeof initialState === 'object' && !Array.isArray(initialState)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.getInitialState(): must return an object or null', Constructor.displayName || 'ReactCompositeComponent') : _prodInvariant('82', Constructor.displayName || 'ReactCompositeComponent') : void 0;
                
                      this.state = initialState;
                    }
                    activeStyle={
                        Object {
                            "backgroundColor": "#fff",
                            "color": "#000",
                          }
                    }
                    onlyActiveOnIndex={false}
                    style={Object {}}
                    to="/site" />
            }
            disabled={false}
            label="sites"
            labelPosition="after"
            labelStyle={Object {}}
            onKeyboardFocus={[Function]}
            onMouseEnter={[Function]}
            onMouseLeave={[Function]}
            onTouchStart={[Function]}
            primary={false}
            secondary={true}
            style={
                Object {
                    "borderRadius": 0,
                  }
            } />
        <function FlatButton() {
            var _ref;
        
            var _temp, _this, _ret;
        
            (0, _classCallCheck3.default)(this, FlatButton);
        
            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
              args[_key] = arguments[_key];
            }
        
            return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = FlatButton.__proto__ || (0, _getPrototypeOf2.default)(FlatButton)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
              hovered: false,
              isKeyboardFocused: false,
              touch: false
            }, _this.handleKeyboardFocus = function (event, isKeyboardFocused) {
              _this.setState({ isKeyboardFocused: isKeyboardFocused });
              _this.props.onKeyboardFocus(event, isKeyboardFocused);
            }, _this.handleMouseEnter = function (event) {
              // Cancel hover styles for touch devices
              if (!_this.state.touch) _this.setState({ hovered: true });
              _this.props.onMouseEnter(event);
            }, _this.handleMouseLeave = function (event) {
              _this.setState({ hovered: false });
              _this.props.onMouseLeave(event);
            }, _this.handleTouchStart = function (event) {
              _this.setState({ touch: true });
              _this.props.onTouchStart(event);
            }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
          }
            containerElement={
                <function (props, context, updater) {
                      // This constructor gets overridden by mocks. The argument is used
                      // by mocks to assert on what gets mounted.
                
                      if (process.env.NODE_ENV !== 'production') {
                        process.env.NODE_ENV !== 'production' ? warning(this instanceof Constructor, 'Something is calling a React component directly. Use a factory or ' + 'JSX instead. See: https://fb.me/react-legacyfactory') : void 0;
                      }
                
                      // Wire up auto-binding
                      if (this.__reactAutoBindPairs.length) {
                        bindAutoBindMethods(this);
                      }
                
                      this.props = props;
                      this.context = context;
                      this.refs = emptyObject;
                      this.updater = updater || ReactNoopUpdateQueue;
                
                      this.state = null;
                
                      // ReactClasses doesn't have constructors. Instead, they use the
                      // getInitialState and componentWillMount methods for initialization.
                
                      var initialState = this.getInitialState ? this.getInitialState() : null;
                      if (process.env.NODE_ENV !== 'production') {
                        // We allow auto-mocks to proceed as if they're returning null.
                        if (initialState === undefined && this.getInitialState._isMockFunction) {
                          // This is probably bad practice. Consider warning here and
                          // deprecating this convenience.
                          initialState = null;
                        }
                      }
                      !(typeof initialState === 'object' && !Array.isArray(initialState)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.getInitialState(): must return an object or null', Constructor.displayName || 'ReactCompositeComponent') : _prodInvariant('82', Constructor.displayName || 'ReactCompositeComponent') : void 0;
                
                      this.state = initialState;
                    }
                    activeStyle={
                        Object {
                            "backgroundColor": "#fff",
                            "color": "#000",
                          }
                    }
                    onlyActiveOnIndex={false}
                    style={Object {}}
                    to="/user" />
            }
            disabled={false}
            label="users"
            labelPosition="after"
            labelStyle={Object {}}
            onKeyboardFocus={[Function]}
            onMouseEnter={[Function]}
            onMouseLeave={[Function]}
            onTouchStart={[Function]}
            primary={false}
            secondary={true}
            style={
                Object {
                    "borderRadius": 0,
                  }
            } />
    </nav>
    <div
        style={
            Object {
                "position": "absolute",
                "right": 10,
                "top": 5,
              }
        }>
        <function DropDownMenu() {
            var _ref;
        
            var _temp, _this, _ret;
        
            (0, _classCallCheck3.default)(this, DropDownMenu);
        
            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
              args[_key] = arguments[_key];
            }
        
            return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = DropDownMenu.__proto__ || (0, _getPrototypeOf2.default)(DropDownMenu)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
              open: false
            }, _this.handleTouchTapControl = function (event) {
              event.preventDefault();
              if (!_this.props.disabled) {
                _this.setState({
                  open: !_this.state.open,
                  anchorEl: _this.refs.root
                });
              }
            }, _this.handleRequestCloseMenu = function () {
              _this.setState({
                open: false,
                anchorEl: null
              });
            }, _this.handleItemTouchTap = function (event, child, index) {
              event.persist();
              _this.setState({
                open: false
              }, function () {
                if (_this.props.onChange) {
                  _this.props.onChange(event, index, child.props.value);
                }
              });
            }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
          }
            animated={true}
            autoWidth={true}
            disabled={false}
            labelStyle={
                Object {
                    "color": "#22A699",
                  }
            }
            maxHeight={500}
            onChange={[Function]}
            openImmediately={false}
            value={1}>
            <function MenuItem() {
                var _ref;
            
                var _temp, _this, _ret;
            
                (0, _classCallCheck3.default)(this, MenuItem);
            
                for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                  args[_key] = arguments[_key];
                }
            
                return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = MenuItem.__proto__ || (0, _getPrototypeOf2.default)(MenuItem)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
                  open: false
                }, _this.cloneMenuItem = function (item) {
                  return _react2.default.cloneElement(item, {
                    onTouchTap: function onTouchTap(event) {
                      if (!item.props.menuItems) {
                        _this.handleRequestClose();
                      }
            
                      if (item.props.onTouchTap) {
                        item.props.onTouchTap(event);
                      }
                    }
                  });
                }, _this.handleTouchTap = function (event) {
                  event.preventDefault();
            
                  _this.setState({
                    open: true,
                    anchorEl: _reactDom2.default.findDOMNode(_this)
                  });
            
                  if (_this.props.onTouchTap) {
                    _this.props.onTouchTap(event);
                  }
                }, _this.handleRequestClose = function () {
                  _this.setState({
                    open: false,
                    anchorEl: null
                  });
                }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
              }
                checked={false}
                desktop={false}
                disabled={false}
                focusState="none"
                insetChildren={false}
                primaryText={undefined}
                value={1} />
            <function MenuItem() {
                var _ref;
            
                var _temp, _this, _ret;
            
                (0, _classCallCheck3.default)(this, MenuItem);
            
                for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                  args[_key] = arguments[_key];
                }
            
                return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = MenuItem.__proto__ || (0, _getPrototypeOf2.default)(MenuItem)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
                  open: false
                }, _this.cloneMenuItem = function (item) {
                  return _react2.default.cloneElement(item, {
                    onTouchTap: function onTouchTap(event) {
                      if (!item.props.menuItems) {
                        _this.handleRequestClose();
                      }
            
                      if (item.props.onTouchTap) {
                        item.props.onTouchTap(event);
                      }
                    }
                  });
                }, _this.handleTouchTap = function (event) {
                  event.preventDefault();
            
                  _this.setState({
                    open: true,
                    anchorEl: _reactDom2.default.findDOMNode(_this)
                  });
            
                  if (_this.props.onTouchTap) {
                    _this.props.onTouchTap(event);
                  }
                }, _this.handleRequestClose = function () {
                  _this.setState({
                    open: false,
                    anchorEl: null
                  });
                }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
              }
                checked={false}
                desktop={false}
                disabled={false}
                focusState="none"
                insetChildren={false}
                primaryText="Logout"
                value={2} />
        </function DropDownMenu() {
            var _ref;
        
            var _temp, _this, _ret;
        
            (0, _classCallCheck3.default)(this, DropDownMenu);
        
            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
              args[_key] = arguments[_key];
            }
        
            return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = DropDownMenu.__proto__ || (0, _getPrototypeOf2.default)(DropDownMenu)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
              open: false
            }, _this.handleTouchTapControl = function (event) {
              event.preventDefault();
              if (!_this.props.disabled) {
                _this.setState({
                  open: !_this.state.open,
                  anchorEl: _this.refs.root
                });
              }
            }, _this.handleRequestCloseMenu = function () {
              _this.setState({
                open: false,
                anchorEl: null
              });
            }, _this.handleItemTouchTap = function (event, child, index) {
              event.persist();
              _this.setState({
                open: false
              }, function () {
                if (_this.props.onChange) {
                  _this.props.onChange(event, index, child.props.value);
                }
              });
            }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
          }>
    </div>
</header>,
  "nodes": Array [
    <header
      className="App-header">
      <img
            alt="logo"
            className="App-logo"
            src="test-file-stub" />
      <nav
            className="App-nav">
            <function FlatButton() {
                var _ref;
            
                var _temp, _this, _ret;
            
                (0, _classCallCheck3.default)(this, FlatButton);
            
                for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                  args[_key] = arguments[_key];
                }
            
                return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = FlatButton.__proto__ || (0, _getPrototypeOf2.default)(FlatButton)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
                  hovered: false,
                  isKeyboardFocused: false,
                  touch: false
                }, _this.handleKeyboardFocus = function (event, isKeyboardFocused) {
                  _this.setState({ isKeyboardFocused: isKeyboardFocused });
                  _this.props.onKeyboardFocus(event, isKeyboardFocused);
                }, _this.handleMouseEnter = function (event) {
                  // Cancel hover styles for touch devices
                  if (!_this.state.touch) _this.setState({ hovered: true });
                  _this.props.onMouseEnter(event);
                }, _this.handleMouseLeave = function (event) {
                  _this.setState({ hovered: false });
                  _this.props.onMouseLeave(event);
                }, _this.handleTouchStart = function (event) {
                  _this.setState({ touch: true });
                  _this.props.onTouchStart(event);
                }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
              }
                  containerElement={
                        <function (props, context, updater) {
                              // This constructor gets overridden by mocks. The argument is used
                              // by mocks to assert on what gets mounted.
                        
                              if (process.env.NODE_ENV !== 'production') {
                                process.env.NODE_ENV !== 'production' ? warning(this instanceof Constructor, 'Something is calling a React component directly. Use a factory or ' + 'JSX instead. See: https://fb.me/react-legacyfactory') : void 0;
                              }
                        
                              // Wire up auto-binding
                              if (this.__reactAutoBindPairs.length) {
                                bindAutoBindMethods(this);
                              }
                        
                              this.props = props;
                              this.context = context;
                              this.refs = emptyObject;
                              this.updater = updater || ReactNoopUpdateQueue;
                        
                              this.state = null;
                        
                              // ReactClasses doesn't have constructors. Instead, they use the
                              // getInitialState and componentWillMount methods for initialization.
                        
                              var initialState = this.getInitialState ? this.getInitialState() : null;
                              if (process.env.NODE_ENV !== 'production') {
                                // We allow auto-mocks to proceed as if they're returning null.
                                if (initialState === undefined && this.getInitialState._isMockFunction) {
                                  // This is probably bad practice. Consider warning here and
                                  // deprecating this convenience.
                                  initialState = null;
                                }
                              }
                              !(typeof initialState === 'object' && !Array.isArray(initialState)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.getInitialState(): must return an object or null', Constructor.displayName || 'ReactCompositeComponent') : _prodInvariant('82', Constructor.displayName || 'ReactCompositeComponent') : void 0;
                        
                              this.state = initialState;
                            }
                              activeStyle={
                                    Object {
                                          "backgroundColor": "#fff",
                                          "color": "#000",
                                        }
                              }
                              onlyActiveOnIndex={false}
                              style={Object {}}
                              to="/" />
                  }
                  disabled={false}
                  label="dashboard"
                  labelPosition="after"
                  labelStyle={Object {}}
                  onKeyboardFocus={[Function]}
                  onMouseEnter={[Function]}
                  onMouseLeave={[Function]}
                  onTouchStart={[Function]}
                  primary={false}
                  secondary={true}
                  style={
                        Object {
                              "borderRadius": 0,
                            }
                  } />
            <function FlatButton() {
                var _ref;
            
                var _temp, _this, _ret;
            
                (0, _classCallCheck3.default)(this, FlatButton);
            
                for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                  args[_key] = arguments[_key];
                }
            
                return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = FlatButton.__proto__ || (0, _getPrototypeOf2.default)(FlatButton)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
                  hovered: false,
                  isKeyboardFocused: false,
                  touch: false
                }, _this.handleKeyboardFocus = function (event, isKeyboardFocused) {
                  _this.setState({ isKeyboardFocused: isKeyboardFocused });
                  _this.props.onKeyboardFocus(event, isKeyboardFocused);
                }, _this.handleMouseEnter = function (event) {
                  // Cancel hover styles for touch devices
                  if (!_this.state.touch) _this.setState({ hovered: true });
                  _this.props.onMouseEnter(event);
                }, _this.handleMouseLeave = function (event) {
                  _this.setState({ hovered: false });
                  _this.props.onMouseLeave(event);
                }, _this.handleTouchStart = function (event) {
                  _this.setState({ touch: true });
                  _this.props.onTouchStart(event);
                }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
              }
                  containerElement={
                        <function (props, context, updater) {
                              // This constructor gets overridden by mocks. The argument is used
                              // by mocks to assert on what gets mounted.
                        
                              if (process.env.NODE_ENV !== 'production') {
                                process.env.NODE_ENV !== 'production' ? warning(this instanceof Constructor, 'Something is calling a React component directly. Use a factory or ' + 'JSX instead. See: https://fb.me/react-legacyfactory') : void 0;
                              }
                        
                              // Wire up auto-binding
                              if (this.__reactAutoBindPairs.length) {
                                bindAutoBindMethods(this);
                              }
                        
                              this.props = props;
                              this.context = context;
                              this.refs = emptyObject;
                              this.updater = updater || ReactNoopUpdateQueue;
                        
                              this.state = null;
                        
                              // ReactClasses doesn't have constructors. Instead, they use the
                              // getInitialState and componentWillMount methods for initialization.
                        
                              var initialState = this.getInitialState ? this.getInitialState() : null;
                              if (process.env.NODE_ENV !== 'production') {
                                // We allow auto-mocks to proceed as if they're returning null.
                                if (initialState === undefined && this.getInitialState._isMockFunction) {
                                  // This is probably bad practice. Consider warning here and
                                  // deprecating this convenience.
                                  initialState = null;
                                }
                              }
                              !(typeof initialState === 'object' && !Array.isArray(initialState)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.getInitialState(): must return an object or null', Constructor.displayName || 'ReactCompositeComponent') : _prodInvariant('82', Constructor.displayName || 'ReactCompositeComponent') : void 0;
                        
                              this.state = initialState;
                            }
                              activeStyle={
                                    Object {
                                          "backgroundColor": "#fff",
                                          "color": "#000",
                                        }
                              }
                              onlyActiveOnIndex={false}
                              style={Object {}}
                              to="/site" />
                  }
                  disabled={false}
                  label="sites"
                  labelPosition="after"
                  labelStyle={Object {}}
                  onKeyboardFocus={[Function]}
                  onMouseEnter={[Function]}
                  onMouseLeave={[Function]}
                  onTouchStart={[Function]}
                  primary={false}
                  secondary={true}
                  style={
                        Object {
                              "borderRadius": 0,
                            }
                  } />
            <function FlatButton() {
                var _ref;
            
                var _temp, _this, _ret;
            
                (0, _classCallCheck3.default)(this, FlatButton);
            
                for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                  args[_key] = arguments[_key];
                }
            
                return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = FlatButton.__proto__ || (0, _getPrototypeOf2.default)(FlatButton)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
                  hovered: false,
                  isKeyboardFocused: false,
                  touch: false
                }, _this.handleKeyboardFocus = function (event, isKeyboardFocused) {
                  _this.setState({ isKeyboardFocused: isKeyboardFocused });
                  _this.props.onKeyboardFocus(event, isKeyboardFocused);
                }, _this.handleMouseEnter = function (event) {
                  // Cancel hover styles for touch devices
                  if (!_this.state.touch) _this.setState({ hovered: true });
                  _this.props.onMouseEnter(event);
                }, _this.handleMouseLeave = function (event) {
                  _this.setState({ hovered: false });
                  _this.props.onMouseLeave(event);
                }, _this.handleTouchStart = function (event) {
                  _this.setState({ touch: true });
                  _this.props.onTouchStart(event);
                }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
              }
                  containerElement={
                        <function (props, context, updater) {
                              // This constructor gets overridden by mocks. The argument is used
                              // by mocks to assert on what gets mounted.
                        
                              if (process.env.NODE_ENV !== 'production') {
                                process.env.NODE_ENV !== 'production' ? warning(this instanceof Constructor, 'Something is calling a React component directly. Use a factory or ' + 'JSX instead. See: https://fb.me/react-legacyfactory') : void 0;
                              }
                        
                              // Wire up auto-binding
                              if (this.__reactAutoBindPairs.length) {
                                bindAutoBindMethods(this);
                              }
                        
                              this.props = props;
                              this.context = context;
                              this.refs = emptyObject;
                              this.updater = updater || ReactNoopUpdateQueue;
                        
                              this.state = null;
                        
                              // ReactClasses doesn't have constructors. Instead, they use the
                              // getInitialState and componentWillMount methods for initialization.
                        
                              var initialState = this.getInitialState ? this.getInitialState() : null;
                              if (process.env.NODE_ENV !== 'production') {
                                // We allow auto-mocks to proceed as if they're returning null.
                                if (initialState === undefined && this.getInitialState._isMockFunction) {
                                  // This is probably bad practice. Consider warning here and
                                  // deprecating this convenience.
                                  initialState = null;
                                }
                              }
                              !(typeof initialState === 'object' && !Array.isArray(initialState)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.getInitialState(): must return an object or null', Constructor.displayName || 'ReactCompositeComponent') : _prodInvariant('82', Constructor.displayName || 'ReactCompositeComponent') : void 0;
                        
                              this.state = initialState;
                            }
                              activeStyle={
                                    Object {
                                          "backgroundColor": "#fff",
                                          "color": "#000",
                                        }
                              }
                              onlyActiveOnIndex={false}
                              style={Object {}}
                              to="/user" />
                  }
                  disabled={false}
                  label="users"
                  labelPosition="after"
                  labelStyle={Object {}}
                  onKeyboardFocus={[Function]}
                  onMouseEnter={[Function]}
                  onMouseLeave={[Function]}
                  onTouchStart={[Function]}
                  primary={false}
                  secondary={true}
                  style={
                        Object {
                              "borderRadius": 0,
                            }
                  } />
      </nav>
      <div
            style={
                  Object {
                        "position": "absolute",
                        "right": 10,
                        "top": 5,
                      }
            }>
            <function DropDownMenu() {
                var _ref;
            
                var _temp, _this, _ret;
            
                (0, _classCallCheck3.default)(this, DropDownMenu);
            
                for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                  args[_key] = arguments[_key];
                }
            
                return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = DropDownMenu.__proto__ || (0, _getPrototypeOf2.default)(DropDownMenu)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
                  open: false
                }, _this.handleTouchTapControl = function (event) {
                  event.preventDefault();
                  if (!_this.props.disabled) {
                    _this.setState({
                      open: !_this.state.open,
                      anchorEl: _this.refs.root
                    });
                  }
                }, _this.handleRequestCloseMenu = function () {
                  _this.setState({
                    open: false,
                    anchorEl: null
                  });
                }, _this.handleItemTouchTap = function (event, child, index) {
                  event.persist();
                  _this.setState({
                    open: false
                  }, function () {
                    if (_this.props.onChange) {
                      _this.props.onChange(event, index, child.props.value);
                    }
                  });
                }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
              }
                  animated={true}
                  autoWidth={true}
                  disabled={false}
                  labelStyle={
                        Object {
                              "color": "#22A699",
                            }
                  }
                  maxHeight={500}
                  onChange={[Function]}
                  openImmediately={false}
                  value={1}>
                  <function MenuItem() {
                      var _ref;
                  
                      var _temp, _this, _ret;
                  
                      (0, _classCallCheck3.default)(this, MenuItem);
                  
                      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                        args[_key] = arguments[_key];
                      }
                  
                      return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = MenuItem.__proto__ || (0, _getPrototypeOf2.default)(MenuItem)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
                        open: false
                      }, _this.cloneMenuItem = function (item) {
                        return _react2.default.cloneElement(item, {
                          onTouchTap: function onTouchTap(event) {
                            if (!item.props.menuItems) {
                              _this.handleRequestClose();
                            }
                  
                            if (item.props.onTouchTap) {
                              item.props.onTouchTap(event);
                            }
                          }
                        });
                      }, _this.handleTouchTap = function (event) {
                        event.preventDefault();
                  
                        _this.setState({
                          open: true,
                          anchorEl: _reactDom2.default.findDOMNode(_this)
                        });
                  
                        if (_this.props.onTouchTap) {
                          _this.props.onTouchTap(event);
                        }
                      }, _this.handleRequestClose = function () {
                        _this.setState({
                          open: false,
                          anchorEl: null
                        });
                      }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
                    }
                        checked={false}
                        desktop={false}
                        disabled={false}
                        focusState="none"
                        insetChildren={false}
                        primaryText={undefined}
                        value={1} />
                  <function MenuItem() {
                      var _ref;
                  
                      var _temp, _this, _ret;
                  
                      (0, _classCallCheck3.default)(this, MenuItem);
                  
                      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                        args[_key] = arguments[_key];
                      }
                  
                      return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = MenuItem.__proto__ || (0, _getPrototypeOf2.default)(MenuItem)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
                        open: false
                      }, _this.cloneMenuItem = function (item) {
                        return _react2.default.cloneElement(item, {
                          onTouchTap: function onTouchTap(event) {
                            if (!item.props.menuItems) {
                              _this.handleRequestClose();
                            }
                  
                            if (item.props.onTouchTap) {
                              item.props.onTouchTap(event);
                            }
                          }
                        });
                      }, _this.handleTouchTap = function (event) {
                        event.preventDefault();
                  
                        _this.setState({
                          open: true,
                          anchorEl: _reactDom2.default.findDOMNode(_this)
                        });
                  
                        if (_this.props.onTouchTap) {
                          _this.props.onTouchTap(event);
                        }
                      }, _this.handleRequestClose = function () {
                        _this.setState({
                          open: false,
                          anchorEl: null
                        });
                      }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
                    }
                        checked={false}
                        desktop={false}
                        disabled={false}
                        focusState="none"
                        insetChildren={false}
                        primaryText="Logout"
                        value={2} />
            </function DropDownMenu() {
                var _ref;
            
                var _temp, _this, _ret;
            
                (0, _classCallCheck3.default)(this, DropDownMenu);
            
                for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                  args[_key] = arguments[_key];
                }
            
                return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = DropDownMenu.__proto__ || (0, _getPrototypeOf2.default)(DropDownMenu)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
                  open: false
                }, _this.handleTouchTapControl = function (event) {
                  event.preventDefault();
                  if (!_this.props.disabled) {
                    _this.setState({
                      open: !_this.state.open,
                      anchorEl: _this.refs.root
                    });
                  }
                }, _this.handleRequestCloseMenu = function () {
                  _this.setState({
                    open: false,
                    anchorEl: null
                  });
                }, _this.handleItemTouchTap = function (event, child, index) {
                  event.persist();
                  _this.setState({
                    open: false
                  }, function () {
                    if (_this.props.onChange) {
                      _this.props.onChange(event, index, child.props.value);
                    }
                  });
                }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
              }>
      </div>
</header>,
  ],
  "options": Object {},
  "renderer": ReactShallowRenderer {
    "_instance": ShallowComponentWrapper {
      "_calledComponentWillUnmount": false,
      "_compositeType": 0,
      "_context": Object {},
      "_currentElement": <class Header extends /* istanbul ignore next */_react.Component {

  constructor(props) {
    super(props); /* istanbul ignore next */this.



    _onUserMenuChange = val => {
      if (val === 2) {
        this.props.logoutUser();
      }
    };this.state = { value: 1 };}

  render() {/* istanbul ignore next */var _props =

    this.props; /* istanbul ignore next */const auth = _props.auth; /* istanbul ignore next */const links = _props.links;
    const eleStyle = { borderRadius: 0 };
    const activeStyle = {
      backgroundColor: '#fff',
      color: '#000' };

    const isAuth = auth.isAuthenticated;

    let activeOnIndex;
    let ls = links.map(l => {
      activeOnIndex = l.path === '/admin' ? true : false;
      return (
        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_FlatButton2.default, /* istanbul ignore next */{
          containerElement: /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactRouter.Link, /* istanbul ignore next */{ onlyActiveOnIndex: activeOnIndex, activeStyle: activeStyle, to: l.path, __source: { fileName: _jsxFileName, lineNumber: 40 }, __self: this }),
          key: l.path,
          label: l.label,
          secondary: true,
          style: eleStyle, __source: { fileName: _jsxFileName, lineNumber: 39 }, __self: this }));


    });

    return (
      /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'header', /* istanbul ignore next */{ className: 'App-header', __source: { fileName: _jsxFileName, lineNumber: 50 }, __self: this },
        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'img', /* istanbul ignore next */{ src: /* istanbul ignore next */_logo2.default, className: 'App-logo', alt: 'logo', __source: { fileName: _jsxFileName, lineNumber: 51 }, __self: this }),
        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'nav', /* istanbul ignore next */{ className: 'App-nav', __source: { fileName: _jsxFileName, lineNumber: 52 }, __self: this }, ls),
        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ style: { right: 10, top: 5, position: 'absolute' }, __source: { fileName: _jsxFileName, lineNumber: 53 }, __self: this },
          isAuth &&
          /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_DropDownMenu2.default, /* istanbul ignore next */{
              onChange: (e, i, val) => this._onUserMenuChange(val),
              labelStyle: { color: '#22A699' },
              value: this.state.value, __source: { fileName: _jsxFileName, lineNumber: 55 }, __self: this },

            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_MenuItem2.default, /* istanbul ignore next */{ value: 1, primaryText: auth.fullName, __source: { fileName: _jsxFileName, lineNumber: 60 }, __self: this }),
            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_MenuItem2.default, /* istanbul ignore next */{ value: 2, primaryText: 'Logout', __source: { fileName: _jsxFileName, lineNumber: 61 }, __self: this })),


          !isAuth &&
          /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_FlatButton2.default, /* istanbul ignore next */{
            containerElement: /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactRouter.Link, /* istanbul ignore next */{ to: '/admin/login', __source: { fileName: _jsxFileName, lineNumber: 66 }, __self: this }),
            label: 'Login',
            secondary: true,
            value: 3, __source: { fileName: _jsxFileName, lineNumber: 65 }, __self: this }))));





  }}
        auth={
                Object {
                        "isAuthenticated": true,
                      }
        }
        links={
                Array [
                        Object {
                          "label": "dashboard",
                          "path": "/",
                        },
                        Object {
                          "label": "sites",
                          "path": "/site",
                        },
                        Object {
                          "label": "users",
                          "path": "/user",
                        },
                      ]
        } />,
      "_debugID": 1,
      "_hostContainerInfo": null,
      "_hostParent": null,
      "_instance": Header {
        "_onUserMenuChange": [Function],
        "_reactInternalInstance": [Circular],
        "context": Object {},
        "props": Object {
          "auth": Object {
            "isAuthenticated": true,
          },
          "links": Array [
            Object {
              "label": "dashboard",
              "path": "/",
            },
            Object {
              "label": "sites",
              "path": "/site",
            },
            Object {
              "label": "users",
              "path": "/user",
            },
          ],
        },
        "refs": Object {},
        "state": Object {
          "value": 1,
        },
        "updater": Object {
          "enqueueCallback": [Function],
          "enqueueCallbackInternal": [Function],
          "enqueueElementInternal": [Function],
          "enqueueForceUpdate": [Function],
          "enqueueReplaceState": [Function],
          "enqueueSetState": [Function],
          "isMounted": [Function],
          "validateCallback": [Function],
        },
      },
      "_mountOrder": 1,
      "_pendingCallbacks": null,
      "_pendingElement": null,
      "_pendingForceUpdate": false,
      "_pendingReplaceState": false,
      "_pendingStateQueue": null,
      "_renderedComponent": NoopInternalComponent {
        "_currentElement": <header
          className="App-header">
          <img
                    alt="logo"
                    className="App-logo"
                    src="test-file-stub" />
          <nav
                    className="App-nav">
                    <function FlatButton() {
                        var _ref;
                    
                        var _temp, _this, _ret;
                    
                        (0, _classCallCheck3.default)(this, FlatButton);
                    
                        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                          args[_key] = arguments[_key];
                        }
                    
                        return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = FlatButton.__proto__ || (0, _getPrototypeOf2.default)(FlatButton)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
                          hovered: false,
                          isKeyboardFocused: false,
                          touch: false
                        }, _this.handleKeyboardFocus = function (event, isKeyboardFocused) {
                          _this.setState({ isKeyboardFocused: isKeyboardFocused });
                          _this.props.onKeyboardFocus(event, isKeyboardFocused);
                        }, _this.handleMouseEnter = function (event) {
                          // Cancel hover styles for touch devices
                          if (!_this.state.touch) _this.setState({ hovered: true });
                          _this.props.onMouseEnter(event);
                        }, _this.handleMouseLeave = function (event) {
                          _this.setState({ hovered: false });
                          _this.props.onMouseLeave(event);
                        }, _this.handleTouchStart = function (event) {
                          _this.setState({ touch: true });
                          _this.props.onTouchStart(event);
                        }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
                      }
                              containerElement={
                                        <function (props, context, updater) {
                                              // This constructor gets overridden by mocks. The argument is used
                                              // by mocks to assert on what gets mounted.
                                        
                                              if (process.env.NODE_ENV !== 'production') {
                                                process.env.NODE_ENV !== 'production' ? warning(this instanceof Constructor, 'Something is calling a React component directly. Use a factory or ' + 'JSX instead. See: https://fb.me/react-legacyfactory') : void 0;
                                              }
                                        
                                              // Wire up auto-binding
                                              if (this.__reactAutoBindPairs.length) {
                                                bindAutoBindMethods(this);
                                              }
                                        
                                              this.props = props;
                                              this.context = context;
                                              this.refs = emptyObject;
                                              this.updater = updater || ReactNoopUpdateQueue;
                                        
                                              this.state = null;
                                        
                                              // ReactClasses doesn't have constructors. Instead, they use the
                                              // getInitialState and componentWillMount methods for initialization.
                                        
                                              var initialState = this.getInitialState ? this.getInitialState() : null;
                                              if (process.env.NODE_ENV !== 'production') {
                                                // We allow auto-mocks to proceed as if they're returning null.
                                                if (initialState === undefined && this.getInitialState._isMockFunction) {
                                                  // This is probably bad practice. Consider warning here and
                                                  // deprecating this convenience.
                                                  initialState = null;
                                                }
                                              }
                                              !(typeof initialState === 'object' && !Array.isArray(initialState)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.getInitialState(): must return an object or null', Constructor.displayName || 'ReactCompositeComponent') : _prodInvariant('82', Constructor.displayName || 'ReactCompositeComponent') : void 0;
                                        
                                              this.state = initialState;
                                            }
                                                  activeStyle={
                                                            Object {
                                                                      "backgroundColor": "#fff",
                                                                      "color": "#000",
                                                                    }
                                                  }
                                                  onlyActiveOnIndex={false}
                                                  style={Object {}}
                                                  to="/" />
                              }
                              disabled={false}
                              label="dashboard"
                              labelPosition="after"
                              labelStyle={Object {}}
                              onKeyboardFocus={[Function]}
                              onMouseEnter={[Function]}
                              onMouseLeave={[Function]}
                              onTouchStart={[Function]}
                              primary={false}
                              secondary={true}
                              style={
                                        Object {
                                                  "borderRadius": 0,
                                                }
                              } />
                    <function FlatButton() {
                        var _ref;
                    
                        var _temp, _this, _ret;
                    
                        (0, _classCallCheck3.default)(this, FlatButton);
                    
                        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                          args[_key] = arguments[_key];
                        }
                    
                        return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = FlatButton.__proto__ || (0, _getPrototypeOf2.default)(FlatButton)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
                          hovered: false,
                          isKeyboardFocused: false,
                          touch: false
                        }, _this.handleKeyboardFocus = function (event, isKeyboardFocused) {
                          _this.setState({ isKeyboardFocused: isKeyboardFocused });
                          _this.props.onKeyboardFocus(event, isKeyboardFocused);
                        }, _this.handleMouseEnter = function (event) {
                          // Cancel hover styles for touch devices
                          if (!_this.state.touch) _this.setState({ hovered: true });
                          _this.props.onMouseEnter(event);
                        }, _this.handleMouseLeave = function (event) {
                          _this.setState({ hovered: false });
                          _this.props.onMouseLeave(event);
                        }, _this.handleTouchStart = function (event) {
                          _this.setState({ touch: true });
                          _this.props.onTouchStart(event);
                        }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
                      }
                              containerElement={
                                        <function (props, context, updater) {
                                              // This constructor gets overridden by mocks. The argument is used
                                              // by mocks to assert on what gets mounted.
                                        
                                              if (process.env.NODE_ENV !== 'production') {
                                                process.env.NODE_ENV !== 'production' ? warning(this instanceof Constructor, 'Something is calling a React component directly. Use a factory or ' + 'JSX instead. See: https://fb.me/react-legacyfactory') : void 0;
                                              }
                                        
                                              // Wire up auto-binding
                                              if (this.__reactAutoBindPairs.length) {
                                                bindAutoBindMethods(this);
                                              }
                                        
                                              this.props = props;
                                              this.context = context;
                                              this.refs = emptyObject;
                                              this.updater = updater || ReactNoopUpdateQueue;
                                        
                                              this.state = null;
                                        
                                              // ReactClasses doesn't have constructors. Instead, they use the
                                              // getInitialState and componentWillMount methods for initialization.
                                        
                                              var initialState = this.getInitialState ? this.getInitialState() : null;
                                              if (process.env.NODE_ENV !== 'production') {
                                                // We allow auto-mocks to proceed as if they're returning null.
                                                if (initialState === undefined && this.getInitialState._isMockFunction) {
                                                  // This is probably bad practice. Consider warning here and
                                                  // deprecating this convenience.
                                                  initialState = null;
                                                }
                                              }
                                              !(typeof initialState === 'object' && !Array.isArray(initialState)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.getInitialState(): must return an object or null', Constructor.displayName || 'ReactCompositeComponent') : _prodInvariant('82', Constructor.displayName || 'ReactCompositeComponent') : void 0;
                                        
                                              this.state = initialState;
                                            }
                                                  activeStyle={
                                                            Object {
                                                                      "backgroundColor": "#fff",
                                                                      "color": "#000",
                                                                    }
                                                  }
                                                  onlyActiveOnIndex={false}
                                                  style={Object {}}
                                                  to="/site" />
                              }
                              disabled={false}
                              label="sites"
                              labelPosition="after"
                              labelStyle={Object {}}
                              onKeyboardFocus={[Function]}
                              onMouseEnter={[Function]}
                              onMouseLeave={[Function]}
                              onTouchStart={[Function]}
                              primary={false}
                              secondary={true}
                              style={
                                        Object {
                                                  "borderRadius": 0,
                                                }
                              } />
                    <function FlatButton() {
                        var _ref;
                    
                        var _temp, _this, _ret;
                    
                        (0, _classCallCheck3.default)(this, FlatButton);
                    
                        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                          args[_key] = arguments[_key];
                        }
                    
                        return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = FlatButton.__proto__ || (0, _getPrototypeOf2.default)(FlatButton)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
                          hovered: false,
                          isKeyboardFocused: false,
                          touch: false
                        }, _this.handleKeyboardFocus = function (event, isKeyboardFocused) {
                          _this.setState({ isKeyboardFocused: isKeyboardFocused });
                          _this.props.onKeyboardFocus(event, isKeyboardFocused);
                        }, _this.handleMouseEnter = function (event) {
                          // Cancel hover styles for touch devices
                          if (!_this.state.touch) _this.setState({ hovered: true });
                          _this.props.onMouseEnter(event);
                        }, _this.handleMouseLeave = function (event) {
                          _this.setState({ hovered: false });
                          _this.props.onMouseLeave(event);
                        }, _this.handleTouchStart = function (event) {
                          _this.setState({ touch: true });
                          _this.props.onTouchStart(event);
                        }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
                      }
                              containerElement={
                                        <function (props, context, updater) {
                                              // This constructor gets overridden by mocks. The argument is used
                                              // by mocks to assert on what gets mounted.
                                        
                                              if (process.env.NODE_ENV !== 'production') {
                                                process.env.NODE_ENV !== 'production' ? warning(this instanceof Constructor, 'Something is calling a React component directly. Use a factory or ' + 'JSX instead. See: https://fb.me/react-legacyfactory') : void 0;
                                              }
                                        
                                              // Wire up auto-binding
                                              if (this.__reactAutoBindPairs.length) {
                                                bindAutoBindMethods(this);
                                              }
                                        
                                              this.props = props;
                                              this.context = context;
                                              this.refs = emptyObject;
                                              this.updater = updater || ReactNoopUpdateQueue;
                                        
                                              this.state = null;
                                        
                                              // ReactClasses doesn't have constructors. Instead, they use the
                                              // getInitialState and componentWillMount methods for initialization.
                                        
                                              var initialState = this.getInitialState ? this.getInitialState() : null;
                                              if (process.env.NODE_ENV !== 'production') {
                                                // We allow auto-mocks to proceed as if they're returning null.
                                                if (initialState === undefined && this.getInitialState._isMockFunction) {
                                                  // This is probably bad practice. Consider warning here and
                                                  // deprecating this convenience.
                                                  initialState = null;
                                                }
                                              }
                                              !(typeof initialState === 'object' && !Array.isArray(initialState)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.getInitialState(): must return an object or null', Constructor.displayName || 'ReactCompositeComponent') : _prodInvariant('82', Constructor.displayName || 'ReactCompositeComponent') : void 0;
                                        
                                              this.state = initialState;
                                            }
                                                  activeStyle={
                                                            Object {
                                                                      "backgroundColor": "#fff",
                                                                      "color": "#000",
                                                                    }
                                                  }
                                                  onlyActiveOnIndex={false}
                                                  style={Object {}}
                                                  to="/user" />
                              }
                              disabled={false}
                              label="users"
                              labelPosition="after"
                              labelStyle={Object {}}
                              onKeyboardFocus={[Function]}
                              onMouseEnter={[Function]}
                              onMouseLeave={[Function]}
                              onTouchStart={[Function]}
                              primary={false}
                              secondary={true}
                              style={
                                        Object {
                                                  "borderRadius": 0,
                                                }
                              } />
          </nav>
          <div
                    style={
                              Object {
                                        "position": "absolute",
                                        "right": 10,
                                        "top": 5,
                                      }
                    }>
                    <function DropDownMenu() {
                        var _ref;
                    
                        var _temp, _this, _ret;
                    
                        (0, _classCallCheck3.default)(this, DropDownMenu);
                    
                        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                          args[_key] = arguments[_key];
                        }
                    
                        return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = DropDownMenu.__proto__ || (0, _getPrototypeOf2.default)(DropDownMenu)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
                          open: false
                        }, _this.handleTouchTapControl = function (event) {
                          event.preventDefault();
                          if (!_this.props.disabled) {
                            _this.setState({
                              open: !_this.state.open,
                              anchorEl: _this.refs.root
                            });
                          }
                        }, _this.handleRequestCloseMenu = function () {
                          _this.setState({
                            open: false,
                            anchorEl: null
                          });
                        }, _this.handleItemTouchTap = function (event, child, index) {
                          event.persist();
                          _this.setState({
                            open: false
                          }, function () {
                            if (_this.props.onChange) {
                              _this.props.onChange(event, index, child.props.value);
                            }
                          });
                        }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
                      }
                              animated={true}
                              autoWidth={true}
                              disabled={false}
                              labelStyle={
                                        Object {
                                                  "color": "#22A699",
                                                }
                              }
                              maxHeight={500}
                              onChange={[Function]}
                              openImmediately={false}
                              value={1}>
                              <function MenuItem() {
                                  var _ref;
                              
                                  var _temp, _this, _ret;
                              
                                  (0, _classCallCheck3.default)(this, MenuItem);
                              
                                  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                                    args[_key] = arguments[_key];
                                  }
                              
                                  return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = MenuItem.__proto__ || (0, _getPrototypeOf2.default)(MenuItem)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
                                    open: false
                                  }, _this.cloneMenuItem = function (item) {
                                    return _react2.default.cloneElement(item, {
                                      onTouchTap: function onTouchTap(event) {
                                        if (!item.props.menuItems) {
                                          _this.handleRequestClose();
                                        }
                              
                                        if (item.props.onTouchTap) {
                                          item.props.onTouchTap(event);
                                        }
                                      }
                                    });
                                  }, _this.handleTouchTap = function (event) {
                                    event.preventDefault();
                              
                                    _this.setState({
                                      open: true,
                                      anchorEl: _reactDom2.default.findDOMNode(_this)
                                    });
                              
                                    if (_this.props.onTouchTap) {
                                      _this.props.onTouchTap(event);
                                    }
                                  }, _this.handleRequestClose = function () {
                                    _this.setState({
                                      open: false,
                                      anchorEl: null
                                    });
                                  }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
                                }
                                        checked={false}
                                        desktop={false}
                                        disabled={false}
                                        focusState="none"
                                        insetChildren={false}
                                        primaryText={undefined}
                                        value={1} />
                              <function MenuItem() {
                                  var _ref;
                              
                                  var _temp, _this, _ret;
                              
                                  (0, _classCallCheck3.default)(this, MenuItem);
                              
                                  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                                    args[_key] = arguments[_key];
                                  }
                              
                                  return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = MenuItem.__proto__ || (0, _getPrototypeOf2.default)(MenuItem)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
                                    open: false
                                  }, _this.cloneMenuItem = function (item) {
                                    return _react2.default.cloneElement(item, {
                                      onTouchTap: function onTouchTap(event) {
                                        if (!item.props.menuItems) {
                                          _this.handleRequestClose();
                                        }
                              
                                        if (item.props.onTouchTap) {
                                          item.props.onTouchTap(event);
                                        }
                                      }
                                    });
                                  }, _this.handleTouchTap = function (event) {
                                    event.preventDefault();
                              
                                    _this.setState({
                                      open: true,
                                      anchorEl: _reactDom2.default.findDOMNode(_this)
                                    });
                              
                                    if (_this.props.onTouchTap) {
                                      _this.props.onTouchTap(event);
                                    }
                                  }, _this.handleRequestClose = function () {
                                    _this.setState({
                                      open: false,
                                      anchorEl: null
                                    });
                                  }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
                                }
                                        checked={false}
                                        desktop={false}
                                        disabled={false}
                                        focusState="none"
                                        insetChildren={false}
                                        primaryText="Logout"
                                        value={2} />
                    </function DropDownMenu() {
                        var _ref;
                    
                        var _temp, _this, _ret;
                    
                        (0, _classCallCheck3.default)(this, DropDownMenu);
                    
                        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                          args[_key] = arguments[_key];
                        }
                    
                        return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = DropDownMenu.__proto__ || (0, _getPrototypeOf2.default)(DropDownMenu)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
                          open: false
                        }, _this.handleTouchTapControl = function (event) {
                          event.preventDefault();
                          if (!_this.props.disabled) {
                            _this.setState({
                              open: !_this.state.open,
                              anchorEl: _this.refs.root
                            });
                          }
                        }, _this.handleRequestCloseMenu = function () {
                          _this.setState({
                            open: false,
                            anchorEl: null
                          });
                        }, _this.handleItemTouchTap = function (event, child, index) {
                          event.persist();
                          _this.setState({
                            open: false
                          }, function () {
                            if (_this.props.onChange) {
                              _this.props.onChange(event, index, child.props.value);
                            }
                          });
                        }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
                      }>
          </div>
</header>,
        "_debugID": 2,
        "_renderedOutput": <header
          className="App-header">
          <img
                    alt="logo"
                    className="App-logo"
                    src="test-file-stub" />
          <nav
                    className="App-nav">
                    <function FlatButton() {
                        var _ref;
                    
                        var _temp, _this, _ret;
                    
                        (0, _classCallCheck3.default)(this, FlatButton);
                    
                        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                          args[_key] = arguments[_key];
                        }
                    
                        return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = FlatButton.__proto__ || (0, _getPrototypeOf2.default)(FlatButton)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
                          hovered: false,
                          isKeyboardFocused: false,
                          touch: false
                        }, _this.handleKeyboardFocus = function (event, isKeyboardFocused) {
                          _this.setState({ isKeyboardFocused: isKeyboardFocused });
                          _this.props.onKeyboardFocus(event, isKeyboardFocused);
                        }, _this.handleMouseEnter = function (event) {
                          // Cancel hover styles for touch devices
                          if (!_this.state.touch) _this.setState({ hovered: true });
                          _this.props.onMouseEnter(event);
                        }, _this.handleMouseLeave = function (event) {
                          _this.setState({ hovered: false });
                          _this.props.onMouseLeave(event);
                        }, _this.handleTouchStart = function (event) {
                          _this.setState({ touch: true });
                          _this.props.onTouchStart(event);
                        }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
                      }
                              containerElement={
                                        <function (props, context, updater) {
                                              // This constructor gets overridden by mocks. The argument is used
                                              // by mocks to assert on what gets mounted.
                                        
                                              if (process.env.NODE_ENV !== 'production') {
                                                process.env.NODE_ENV !== 'production' ? warning(this instanceof Constructor, 'Something is calling a React component directly. Use a factory or ' + 'JSX instead. See: https://fb.me/react-legacyfactory') : void 0;
                                              }
                                        
                                              // Wire up auto-binding
                                              if (this.__reactAutoBindPairs.length) {
                                                bindAutoBindMethods(this);
                                              }
                                        
                                              this.props = props;
                                              this.context = context;
                                              this.refs = emptyObject;
                                              this.updater = updater || ReactNoopUpdateQueue;
                                        
                                              this.state = null;
                                        
                                              // ReactClasses doesn't have constructors. Instead, they use the
                                              // getInitialState and componentWillMount methods for initialization.
                                        
                                              var initialState = this.getInitialState ? this.getInitialState() : null;
                                              if (process.env.NODE_ENV !== 'production') {
                                                // We allow auto-mocks to proceed as if they're returning null.
                                                if (initialState === undefined && this.getInitialState._isMockFunction) {
                                                  // This is probably bad practice. Consider warning here and
                                                  // deprecating this convenience.
                                                  initialState = null;
                                                }
                                              }
                                              !(typeof initialState === 'object' && !Array.isArray(initialState)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.getInitialState(): must return an object or null', Constructor.displayName || 'ReactCompositeComponent') : _prodInvariant('82', Constructor.displayName || 'ReactCompositeComponent') : void 0;
                                        
                                              this.state = initialState;
                                            }
                                                  activeStyle={
                                                            Object {
                                                                      "backgroundColor": "#fff",
                                                                      "color": "#000",
                                                                    }
                                                  }
                                                  onlyActiveOnIndex={false}
                                                  style={Object {}}
                                                  to="/" />
                              }
                              disabled={false}
                              label="dashboard"
                              labelPosition="after"
                              labelStyle={Object {}}
                              onKeyboardFocus={[Function]}
                              onMouseEnter={[Function]}
                              onMouseLeave={[Function]}
                              onTouchStart={[Function]}
                              primary={false}
                              secondary={true}
                              style={
                                        Object {
                                                  "borderRadius": 0,
                                                }
                              } />
                    <function FlatButton() {
                        var _ref;
                    
                        var _temp, _this, _ret;
                    
                        (0, _classCallCheck3.default)(this, FlatButton);
                    
                        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                          args[_key] = arguments[_key];
                        }
                    
                        return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = FlatButton.__proto__ || (0, _getPrototypeOf2.default)(FlatButton)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
                          hovered: false,
                          isKeyboardFocused: false,
                          touch: false
                        }, _this.handleKeyboardFocus = function (event, isKeyboardFocused) {
                          _this.setState({ isKeyboardFocused: isKeyboardFocused });
                          _this.props.onKeyboardFocus(event, isKeyboardFocused);
                        }, _this.handleMouseEnter = function (event) {
                          // Cancel hover styles for touch devices
                          if (!_this.state.touch) _this.setState({ hovered: true });
                          _this.props.onMouseEnter(event);
                        }, _this.handleMouseLeave = function (event) {
                          _this.setState({ hovered: false });
                          _this.props.onMouseLeave(event);
                        }, _this.handleTouchStart = function (event) {
                          _this.setState({ touch: true });
                          _this.props.onTouchStart(event);
                        }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
                      }
                              containerElement={
                                        <function (props, context, updater) {
                                              // This constructor gets overridden by mocks. The argument is used
                                              // by mocks to assert on what gets mounted.
                                        
                                              if (process.env.NODE_ENV !== 'production') {
                                                process.env.NODE_ENV !== 'production' ? warning(this instanceof Constructor, 'Something is calling a React component directly. Use a factory or ' + 'JSX instead. See: https://fb.me/react-legacyfactory') : void 0;
                                              }
                                        
                                              // Wire up auto-binding
                                              if (this.__reactAutoBindPairs.length) {
                                                bindAutoBindMethods(this);
                                              }
                                        
                                              this.props = props;
                                              this.context = context;
                                              this.refs = emptyObject;
                                              this.updater = updater || ReactNoopUpdateQueue;
                                        
                                              this.state = null;
                                        
                                              // ReactClasses doesn't have constructors. Instead, they use the
                                              // getInitialState and componentWillMount methods for initialization.
                                        
                                              var initialState = this.getInitialState ? this.getInitialState() : null;
                                              if (process.env.NODE_ENV !== 'production') {
                                                // We allow auto-mocks to proceed as if they're returning null.
                                                if (initialState === undefined && this.getInitialState._isMockFunction) {
                                                  // This is probably bad practice. Consider warning here and
                                                  // deprecating this convenience.
                                                  initialState = null;
                                                }
                                              }
                                              !(typeof initialState === 'object' && !Array.isArray(initialState)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.getInitialState(): must return an object or null', Constructor.displayName || 'ReactCompositeComponent') : _prodInvariant('82', Constructor.displayName || 'ReactCompositeComponent') : void 0;
                                        
                                              this.state = initialState;
                                            }
                                                  activeStyle={
                                                            Object {
                                                                      "backgroundColor": "#fff",
                                                                      "color": "#000",
                                                                    }
                                                  }
                                                  onlyActiveOnIndex={false}
                                                  style={Object {}}
                                                  to="/site" />
                              }
                              disabled={false}
                              label="sites"
                              labelPosition="after"
                              labelStyle={Object {}}
                              onKeyboardFocus={[Function]}
                              onMouseEnter={[Function]}
                              onMouseLeave={[Function]}
                              onTouchStart={[Function]}
                              primary={false}
                              secondary={true}
                              style={
                                        Object {
                                                  "borderRadius": 0,
                                                }
                              } />
                    <function FlatButton() {
                        var _ref;
                    
                        var _temp, _this, _ret;
                    
                        (0, _classCallCheck3.default)(this, FlatButton);
                    
                        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                          args[_key] = arguments[_key];
                        }
                    
                        return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = FlatButton.__proto__ || (0, _getPrototypeOf2.default)(FlatButton)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
                          hovered: false,
                          isKeyboardFocused: false,
                          touch: false
                        }, _this.handleKeyboardFocus = function (event, isKeyboardFocused) {
                          _this.setState({ isKeyboardFocused: isKeyboardFocused });
                          _this.props.onKeyboardFocus(event, isKeyboardFocused);
                        }, _this.handleMouseEnter = function (event) {
                          // Cancel hover styles for touch devices
                          if (!_this.state.touch) _this.setState({ hovered: true });
                          _this.props.onMouseEnter(event);
                        }, _this.handleMouseLeave = function (event) {
                          _this.setState({ hovered: false });
                          _this.props.onMouseLeave(event);
                        }, _this.handleTouchStart = function (event) {
                          _this.setState({ touch: true });
                          _this.props.onTouchStart(event);
                        }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
                      }
                              containerElement={
                                        <function (props, context, updater) {
                                              // This constructor gets overridden by mocks. The argument is used
                                              // by mocks to assert on what gets mounted.
                                        
                                              if (process.env.NODE_ENV !== 'production') {
                                                process.env.NODE_ENV !== 'production' ? warning(this instanceof Constructor, 'Something is calling a React component directly. Use a factory or ' + 'JSX instead. See: https://fb.me/react-legacyfactory') : void 0;
                                              }
                                        
                                              // Wire up auto-binding
                                              if (this.__reactAutoBindPairs.length) {
                                                bindAutoBindMethods(this);
                                              }
                                        
                                              this.props = props;
                                              this.context = context;
                                              this.refs = emptyObject;
                                              this.updater = updater || ReactNoopUpdateQueue;
                                        
                                              this.state = null;
                                        
                                              // ReactClasses doesn't have constructors. Instead, they use the
                                              // getInitialState and componentWillMount methods for initialization.
                                        
                                              var initialState = this.getInitialState ? this.getInitialState() : null;
                                              if (process.env.NODE_ENV !== 'production') {
                                                // We allow auto-mocks to proceed as if they're returning null.
                                                if (initialState === undefined && this.getInitialState._isMockFunction) {
                                                  // This is probably bad practice. Consider warning here and
                                                  // deprecating this convenience.
                                                  initialState = null;
                                                }
                                              }
                                              !(typeof initialState === 'object' && !Array.isArray(initialState)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.getInitialState(): must return an object or null', Constructor.displayName || 'ReactCompositeComponent') : _prodInvariant('82', Constructor.displayName || 'ReactCompositeComponent') : void 0;
                                        
                                              this.state = initialState;
                                            }
                                                  activeStyle={
                                                            Object {
                                                                      "backgroundColor": "#fff",
                                                                      "color": "#000",
                                                                    }
                                                  }
                                                  onlyActiveOnIndex={false}
                                                  style={Object {}}
                                                  to="/user" />
                              }
                              disabled={false}
                              label="users"
                              labelPosition="after"
                              labelStyle={Object {}}
                              onKeyboardFocus={[Function]}
                              onMouseEnter={[Function]}
                              onMouseLeave={[Function]}
                              onTouchStart={[Function]}
                              primary={false}
                              secondary={true}
                              style={
                                        Object {
                                                  "borderRadius": 0,
                                                }
                              } />
          </nav>
          <div
                    style={
                              Object {
                                        "position": "absolute",
                                        "right": 10,
                                        "top": 5,
                                      }
                    }>
                    <function DropDownMenu() {
                        var _ref;
                    
                        var _temp, _this, _ret;
                    
                        (0, _classCallCheck3.default)(this, DropDownMenu);
                    
                        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                          args[_key] = arguments[_key];
                        }
                    
                        return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = DropDownMenu.__proto__ || (0, _getPrototypeOf2.default)(DropDownMenu)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
                          open: false
                        }, _this.handleTouchTapControl = function (event) {
                          event.preventDefault();
                          if (!_this.props.disabled) {
                            _this.setState({
                              open: !_this.state.open,
                              anchorEl: _this.refs.root
                            });
                          }
                        }, _this.handleRequestCloseMenu = function () {
                          _this.setState({
                            open: false,
                            anchorEl: null
                          });
                        }, _this.handleItemTouchTap = function (event, child, index) {
                          event.persist();
                          _this.setState({
                            open: false
                          }, function () {
                            if (_this.props.onChange) {
                              _this.props.onChange(event, index, child.props.value);
                            }
                          });
                        }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
                      }
                              animated={true}
                              autoWidth={true}
                              disabled={false}
                              labelStyle={
                                        Object {
                                                  "color": "#22A699",
                                                }
                              }
                              maxHeight={500}
                              onChange={[Function]}
                              openImmediately={false}
                              value={1}>
                              <function MenuItem() {
                                  var _ref;
                              
                                  var _temp, _this, _ret;
                              
                                  (0, _classCallCheck3.default)(this, MenuItem);
                              
                                  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                                    args[_key] = arguments[_key];
                                  }
                              
                                  return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = MenuItem.__proto__ || (0, _getPrototypeOf2.default)(MenuItem)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
                                    open: false
                                  }, _this.cloneMenuItem = function (item) {
                                    return _react2.default.cloneElement(item, {
                                      onTouchTap: function onTouchTap(event) {
                                        if (!item.props.menuItems) {
                                          _this.handleRequestClose();
                                        }
                              
                                        if (item.props.onTouchTap) {
                                          item.props.onTouchTap(event);
                                        }
                                      }
                                    });
                                  }, _this.handleTouchTap = function (event) {
                                    event.preventDefault();
                              
                                    _this.setState({
                                      open: true,
                                      anchorEl: _reactDom2.default.findDOMNode(_this)
                                    });
                              
                                    if (_this.props.onTouchTap) {
                                      _this.props.onTouchTap(event);
                                    }
                                  }, _this.handleRequestClose = function () {
                                    _this.setState({
                                      open: false,
                                      anchorEl: null
                                    });
                                  }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
                                }
                                        checked={false}
                                        desktop={false}
                                        disabled={false}
                                        focusState="none"
                                        insetChildren={false}
                                        primaryText={undefined}
                                        value={1} />
                              <function MenuItem() {
                                  var _ref;
                              
                                  var _temp, _this, _ret;
                              
                                  (0, _classCallCheck3.default)(this, MenuItem);
                              
                                  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                                    args[_key] = arguments[_key];
                                  }
                              
                                  return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = MenuItem.__proto__ || (0, _getPrototypeOf2.default)(MenuItem)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
                                    open: false
                                  }, _this.cloneMenuItem = function (item) {
                                    return _react2.default.cloneElement(item, {
                                      onTouchTap: function onTouchTap(event) {
                                        if (!item.props.menuItems) {
                                          _this.handleRequestClose();
                                        }
                              
                                        if (item.props.onTouchTap) {
                                          item.props.onTouchTap(event);
                                        }
                                      }
                                    });
                                  }, _this.handleTouchTap = function (event) {
                                    event.preventDefault();
                              
                                    _this.setState({
                                      open: true,
                                      anchorEl: _reactDom2.default.findDOMNode(_this)
                                    });
                              
                                    if (_this.props.onTouchTap) {
                                      _this.props.onTouchTap(event);
                                    }
                                  }, _this.handleRequestClose = function () {
                                    _this.setState({
                                      open: false,
                                      anchorEl: null
                                    });
                                  }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
                                }
                                        checked={false}
                                        desktop={false}
                                        disabled={false}
                                        focusState="none"
                                        insetChildren={false}
                                        primaryText="Logout"
                                        value={2} />
                    </function DropDownMenu() {
                        var _ref;
                    
                        var _temp, _this, _ret;
                    
                        (0, _classCallCheck3.default)(this, DropDownMenu);
                    
                        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                          args[_key] = arguments[_key];
                        }
                    
                        return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = DropDownMenu.__proto__ || (0, _getPrototypeOf2.default)(DropDownMenu)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
                          open: false
                        }, _this.handleTouchTapControl = function (event) {
                          event.preventDefault();
                          if (!_this.props.disabled) {
                            _this.setState({
                              open: !_this.state.open,
                              anchorEl: _this.refs.root
                            });
                          }
                        }, _this.handleRequestCloseMenu = function () {
                          _this.setState({
                            open: false,
                            anchorEl: null
                          });
                        }, _this.handleItemTouchTap = function (event, child, index) {
                          event.persist();
                          _this.setState({
                            open: false
                          }, function () {
                            if (_this.props.onChange) {
                              _this.props.onChange(event, index, child.props.value);
                            }
                          });
                        }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
                      }>
          </div>
</header>,
      },
      "_renderedNodeType": 0,
      "_rootNodeID": 0,
      "_topLevelWrapper": null,
      "_updateBatchNumber": null,
      "_warnedAboutRefsInRender": false,
    },
    "getRenderOutput": [Function],
    "render": [Function],
  },
  "root": [Circular],
  "unrendered": <class Header extends /* istanbul ignore next */_react.Component {

  constructor(props) {
    super(props); /* istanbul ignore next */this.



    _onUserMenuChange = val => {
      if (val === 2) {
        this.props.logoutUser();
      }
    };this.state = { value: 1 };}

  render() {/* istanbul ignore next */var _props =

    this.props; /* istanbul ignore next */const auth = _props.auth; /* istanbul ignore next */const links = _props.links;
    const eleStyle = { borderRadius: 0 };
    const activeStyle = {
      backgroundColor: '#fff',
      color: '#000' };

    const isAuth = auth.isAuthenticated;

    let activeOnIndex;
    let ls = links.map(l => {
      activeOnIndex = l.path === '/admin' ? true : false;
      return (
        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_FlatButton2.default, /* istanbul ignore next */{
          containerElement: /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactRouter.Link, /* istanbul ignore next */{ onlyActiveOnIndex: activeOnIndex, activeStyle: activeStyle, to: l.path, __source: { fileName: _jsxFileName, lineNumber: 40 }, __self: this }),
          key: l.path,
          label: l.label,
          secondary: true,
          style: eleStyle, __source: { fileName: _jsxFileName, lineNumber: 39 }, __self: this }));


    });

    return (
      /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'header', /* istanbul ignore next */{ className: 'App-header', __source: { fileName: _jsxFileName, lineNumber: 50 }, __self: this },
        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'img', /* istanbul ignore next */{ src: /* istanbul ignore next */_logo2.default, className: 'App-logo', alt: 'logo', __source: { fileName: _jsxFileName, lineNumber: 51 }, __self: this }),
        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'nav', /* istanbul ignore next */{ className: 'App-nav', __source: { fileName: _jsxFileName, lineNumber: 52 }, __self: this }, ls),
        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ style: { right: 10, top: 5, position: 'absolute' }, __source: { fileName: _jsxFileName, lineNumber: 53 }, __self: this },
          isAuth &&
          /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_DropDownMenu2.default, /* istanbul ignore next */{
              onChange: (e, i, val) => this._onUserMenuChange(val),
              labelStyle: { color: '#22A699' },
              value: this.state.value, __source: { fileName: _jsxFileName, lineNumber: 55 }, __self: this },

            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_MenuItem2.default, /* istanbul ignore next */{ value: 1, primaryText: auth.fullName, __source: { fileName: _jsxFileName, lineNumber: 60 }, __self: this }),
            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_MenuItem2.default, /* istanbul ignore next */{ value: 2, primaryText: 'Logout', __source: { fileName: _jsxFileName, lineNumber: 61 }, __self: this })),


          !isAuth &&
          /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_FlatButton2.default, /* istanbul ignore next */{
            containerElement: /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactRouter.Link, /* istanbul ignore next */{ to: '/admin/login', __source: { fileName: _jsxFileName, lineNumber: 66 }, __self: this }),
            label: 'Login',
            secondary: true,
            value: 3, __source: { fileName: _jsxFileName, lineNumber: 65 }, __self: this }))));





  }}
    auth={
        Object {
            "isAuthenticated": true,
          }
    }
    links={
        Array [
            Object {
              "label": "dashboard",
              "path": "/",
            },
            Object {
              "label": "sites",
              "path": "/site",
            },
            Object {
              "label": "users",
              "path": "/user",
            },
          ]
    } />,
}
`;
