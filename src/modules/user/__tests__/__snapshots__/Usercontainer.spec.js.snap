exports[`components <User /> renders without crashing 1`] = `
ShallowWrapper {
  "complexSelector": ComplexSelector {
    "buildPredicate": [Function],
    "childrenOfNode": [Function],
    "findWhereUnwrapped": [Function],
  },
  "length": 1,
  "node": <section
    className="App-container">
    <function Paper() {
        (0, _classCallCheck3.default)(this, Paper);
        return (0, _possibleConstructorReturn3.default)(this, (Paper.__proto__ || (0, _getPrototypeOf2.default)(Paper)).apply(this, arguments));
      }
        circle={false}
        rounded={true}
        transitionEnabled={true}
        zDepth={1}>
        <function AppBar() {
            var _ref;
        
            var _temp, _this, _ret;
        
            (0, _classCallCheck3.default)(this, AppBar);
        
            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
              args[_key] = arguments[_key];
            }
        
            return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = AppBar.__proto__ || (0, _getPrototypeOf2.default)(AppBar)).call.apply(_ref, [this].concat(args))), _this), _this.handleTouchTapLeftIconButton = function (event) {
              if (_this.props.onLeftIconButtonTouchTap) {
                _this.props.onLeftIconButtonTouchTap(event);
              }
            }, _this.handleTouchTapRightIconButton = function (event) {
              if (_this.props.onRightIconButtonTouchTap) {
                _this.props.onRightIconButtonTouchTap(event);
              }
            }, _this.handleTitleTouchTap = function (event) {
              if (_this.props.onTitleTouchTap) {
                _this.props.onTitleTouchTap(event);
              }
            }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
          }
            iconElementRight={
                <function IconButton() {
                    var _ref;
                
                    var _temp, _this, _ret;
                
                    (0, _classCallCheck3.default)(this, IconButton);
                
                    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                      args[_key] = arguments[_key];
                    }
                
                    return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = IconButton.__proto__ || (0, _getPrototypeOf2.default)(IconButton)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
                      tooltipShown: false
                    }, _this.handleBlur = function (event) {
                      _this.hideTooltip();
                      if (_this.props.onBlur) _this.props.onBlur(event);
                    }, _this.handleFocus = function (event) {
                      _this.showTooltip();
                      if (_this.props.onFocus) _this.props.onFocus(event);
                    }, _this.handleMouseLeave = function (event) {
                      if (!_this.refs.button.isKeyboardFocused()) _this.hideTooltip();
                      if (_this.props.onMouseLeave) _this.props.onMouseLeave(event);
                    }, _this.handleMouseOut = function (event) {
                      if (_this.props.disabled) _this.hideTooltip();
                      if (_this.props.onMouseOut) _this.props.onMouseOut(event);
                    }, _this.handleMouseEnter = function (event) {
                      _this.showTooltip();
                      if (_this.props.onMouseEnter) _this.props.onMouseEnter(event);
                    }, _this.handleKeyboardFocus = function (event, keyboardFocused) {
                      if (keyboardFocused && !_this.props.disabled) {
                        _this.showTooltip();
                        if (_this.props.onFocus) _this.props.onFocus(event);
                      } else {
                        _this.hideTooltip();
                        if (_this.props.onBlur) _this.props.onBlur(event);
                      }
                
                      if (_this.props.onKeyboardFocus) {
                        _this.props.onKeyboardFocus(event, keyboardFocused);
                      }
                    }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
                  }
                    disableTouchRipple={false}
                    disabled={false}
                    iconStyle={
                        Object {
                            "fill": "#22A699",
                            "height": 36,
                            "padding": 6,
                            "width": 36,
                          }
                    }
                    style={
                        Object {
                            "height": 40,
                            "padding": 0,
                            "width": 50,
                          }
                    }
                    tooltipPosition="bottom-center"
                    touch={false}>
                    <function _class() {
                            _classCallCheck(this, _class);
                    
                            return _possibleConstructorReturn(this, _Component.apply(this, arguments));
                          } />
                </function IconButton() {
                    var _ref;
                
                    var _temp, _this, _ret;
                
                    (0, _classCallCheck3.default)(this, IconButton);
                
                    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                      args[_key] = arguments[_key];
                    }
                
                    return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = IconButton.__proto__ || (0, _getPrototypeOf2.default)(IconButton)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
                      tooltipShown: false
                    }, _this.handleBlur = function (event) {
                      _this.hideTooltip();
                      if (_this.props.onBlur) _this.props.onBlur(event);
                    }, _this.handleFocus = function (event) {
                      _this.showTooltip();
                      if (_this.props.onFocus) _this.props.onFocus(event);
                    }, _this.handleMouseLeave = function (event) {
                      if (!_this.refs.button.isKeyboardFocused()) _this.hideTooltip();
                      if (_this.props.onMouseLeave) _this.props.onMouseLeave(event);
                    }, _this.handleMouseOut = function (event) {
                      if (_this.props.disabled) _this.hideTooltip();
                      if (_this.props.onMouseOut) _this.props.onMouseOut(event);
                    }, _this.handleMouseEnter = function (event) {
                      _this.showTooltip();
                      if (_this.props.onMouseEnter) _this.props.onMouseEnter(event);
                    }, _this.handleKeyboardFocus = function (event, keyboardFocused) {
                      if (keyboardFocused && !_this.props.disabled) {
                        _this.showTooltip();
                        if (_this.props.onFocus) _this.props.onFocus(event);
                      } else {
                        _this.hideTooltip();
                        if (_this.props.onBlur) _this.props.onBlur(event);
                      }
                
                      if (_this.props.onKeyboardFocus) {
                        _this.props.onKeyboardFocus(event, keyboardFocused);
                      }
                    }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
                  }>
            }
            onRightIconButtonTouchTap={[Function]}
            showMenuIconButton={false}
            style={
                Object {
                    "boxShadow": "none",
                  }
            }
            title="User Listing"
            zDepth={1} />
        <article
            style={
                Object {
                    "padding": 15,
                  }
            }>
            <function SelectField() {
                (0, _classCallCheck3.default)(this, SelectField);
                return (0, _possibleConstructorReturn3.default)(this, (SelectField.__proto__ || (0, _getPrototypeOf2.default)(SelectField)).apply(this, arguments));
              }
                autoWidth={false}
                disabled={false}
                floatingLabelFixed={true}
                floatingLabelText="Select Site"
                fullWidth={false}
                onChange={[Function]}
                value={null} />
            <br />
            <br />
            <function GraphQL(props, context) {
                            _super.call(this, props, context);
                            this.data = {};
                            this.version = version;
                            this.client = context.client;
                            invariant(!!this.client, "Could not find \"client\" in the context of " +
                                ("\"" + graphQLDisplayName + "\". ") +
                                "Wrap the root component in an <ApolloProvider>");
                            this.store = this.client.store;
                            this.type = operation.type;
                            if (mapPropsToSkip(props))
                                return;
                            this.setInitialProps();
                        }
                domainID={null} />
        </article>
    </function Paper() {
        (0, _classCallCheck3.default)(this, Paper);
        return (0, _possibleConstructorReturn3.default)(this, (Paper.__proto__ || (0, _getPrototypeOf2.default)(Paper)).apply(this, arguments));
      }>
    <function Dialog() {
        var _ref3;
    
        var _temp3, _this3, _ret3;
    
        (0, _classCallCheck3.default)(this, Dialog);
    
        for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
          args[_key3] = arguments[_key3];
        }
    
        return _ret3 = (_temp3 = (_this3 = (0, _possibleConstructorReturn3.default)(this, (_ref3 = Dialog.__proto__ || (0, _getPrototypeOf2.default)(Dialog)).call.apply(_ref3, [this].concat(args))), _this3), _this3.renderLayer = function () {
          return _react2.default.createElement(DialogInline, _this3.props);
        }, _temp3), (0, _possibleConstructorReturn3.default)(_this3, _ret3);
      }
        actionsContainerStyle={
            Object {
                "paddingTop": 0,
              }
        }
        autoDetectWindowHeight={true}
        autoScrollBodyContent={false}
        modal={true}
        onRequestClose={[Function]}
        open={false}
        repositionOnUpdate={true}
        title="User Info">
        <function Connect(props, context) {
                _classCallCheck(this, Connect);
        
                var _this = _possibleConstructorReturn(this, _Component.call(this, props, context));
        
                _this.version = version;
                _this.store = props.store || context.store;
        
                (0, _invariant2["default"])(_this.store, 'Could not find "store" in either the context or ' + ('props of "' + connectDisplayName + '". ') + 'Either wrap the root component in a <Provider>, ' + ('or explicitly pass "store" as a prop to "' + connectDisplayName + '".'));
        
                var storeState = _this.store.getState();
                _this.state = { storeState: storeState };
                _this.clearCache();
                return _this;
              }
            closeFormFunc={[Function]} />
    </function Dialog() {
        var _ref3;
    
        var _temp3, _this3, _ret3;
    
        (0, _classCallCheck3.default)(this, Dialog);
    
        for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
          args[_key3] = arguments[_key3];
        }
    
        return _ret3 = (_temp3 = (_this3 = (0, _possibleConstructorReturn3.default)(this, (_ref3 = Dialog.__proto__ || (0, _getPrototypeOf2.default)(Dialog)).call.apply(_ref3, [this].concat(args))), _this3), _this3.renderLayer = function () {
          return _react2.default.createElement(DialogInline, _this3.props);
        }, _temp3), (0, _possibleConstructorReturn3.default)(_this3, _ret3);
      }>
</section>,
  "nodes": Array [
    <section
      className="App-container">
      <function Paper() {
          (0, _classCallCheck3.default)(this, Paper);
          return (0, _possibleConstructorReturn3.default)(this, (Paper.__proto__ || (0, _getPrototypeOf2.default)(Paper)).apply(this, arguments));
        }
            circle={false}
            rounded={true}
            transitionEnabled={true}
            zDepth={1}>
            <function AppBar() {
                var _ref;
            
                var _temp, _this, _ret;
            
                (0, _classCallCheck3.default)(this, AppBar);
            
                for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                  args[_key] = arguments[_key];
                }
            
                return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = AppBar.__proto__ || (0, _getPrototypeOf2.default)(AppBar)).call.apply(_ref, [this].concat(args))), _this), _this.handleTouchTapLeftIconButton = function (event) {
                  if (_this.props.onLeftIconButtonTouchTap) {
                    _this.props.onLeftIconButtonTouchTap(event);
                  }
                }, _this.handleTouchTapRightIconButton = function (event) {
                  if (_this.props.onRightIconButtonTouchTap) {
                    _this.props.onRightIconButtonTouchTap(event);
                  }
                }, _this.handleTitleTouchTap = function (event) {
                  if (_this.props.onTitleTouchTap) {
                    _this.props.onTitleTouchTap(event);
                  }
                }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
              }
                  iconElementRight={
                        <function IconButton() {
                            var _ref;
                        
                            var _temp, _this, _ret;
                        
                            (0, _classCallCheck3.default)(this, IconButton);
                        
                            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                              args[_key] = arguments[_key];
                            }
                        
                            return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = IconButton.__proto__ || (0, _getPrototypeOf2.default)(IconButton)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
                              tooltipShown: false
                            }, _this.handleBlur = function (event) {
                              _this.hideTooltip();
                              if (_this.props.onBlur) _this.props.onBlur(event);
                            }, _this.handleFocus = function (event) {
                              _this.showTooltip();
                              if (_this.props.onFocus) _this.props.onFocus(event);
                            }, _this.handleMouseLeave = function (event) {
                              if (!_this.refs.button.isKeyboardFocused()) _this.hideTooltip();
                              if (_this.props.onMouseLeave) _this.props.onMouseLeave(event);
                            }, _this.handleMouseOut = function (event) {
                              if (_this.props.disabled) _this.hideTooltip();
                              if (_this.props.onMouseOut) _this.props.onMouseOut(event);
                            }, _this.handleMouseEnter = function (event) {
                              _this.showTooltip();
                              if (_this.props.onMouseEnter) _this.props.onMouseEnter(event);
                            }, _this.handleKeyboardFocus = function (event, keyboardFocused) {
                              if (keyboardFocused && !_this.props.disabled) {
                                _this.showTooltip();
                                if (_this.props.onFocus) _this.props.onFocus(event);
                              } else {
                                _this.hideTooltip();
                                if (_this.props.onBlur) _this.props.onBlur(event);
                              }
                        
                              if (_this.props.onKeyboardFocus) {
                                _this.props.onKeyboardFocus(event, keyboardFocused);
                              }
                            }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
                          }
                              disableTouchRipple={false}
                              disabled={false}
                              iconStyle={
                                    Object {
                                          "fill": "#22A699",
                                          "height": 36,
                                          "padding": 6,
                                          "width": 36,
                                        }
                              }
                              style={
                                    Object {
                                          "height": 40,
                                          "padding": 0,
                                          "width": 50,
                                        }
                              }
                              tooltipPosition="bottom-center"
                              touch={false}>
                              <function _class() {
                                      _classCallCheck(this, _class);
                              
                                      return _possibleConstructorReturn(this, _Component.apply(this, arguments));
                                    } />
                        </function IconButton() {
                            var _ref;
                        
                            var _temp, _this, _ret;
                        
                            (0, _classCallCheck3.default)(this, IconButton);
                        
                            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                              args[_key] = arguments[_key];
                            }
                        
                            return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = IconButton.__proto__ || (0, _getPrototypeOf2.default)(IconButton)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
                              tooltipShown: false
                            }, _this.handleBlur = function (event) {
                              _this.hideTooltip();
                              if (_this.props.onBlur) _this.props.onBlur(event);
                            }, _this.handleFocus = function (event) {
                              _this.showTooltip();
                              if (_this.props.onFocus) _this.props.onFocus(event);
                            }, _this.handleMouseLeave = function (event) {
                              if (!_this.refs.button.isKeyboardFocused()) _this.hideTooltip();
                              if (_this.props.onMouseLeave) _this.props.onMouseLeave(event);
                            }, _this.handleMouseOut = function (event) {
                              if (_this.props.disabled) _this.hideTooltip();
                              if (_this.props.onMouseOut) _this.props.onMouseOut(event);
                            }, _this.handleMouseEnter = function (event) {
                              _this.showTooltip();
                              if (_this.props.onMouseEnter) _this.props.onMouseEnter(event);
                            }, _this.handleKeyboardFocus = function (event, keyboardFocused) {
                              if (keyboardFocused && !_this.props.disabled) {
                                _this.showTooltip();
                                if (_this.props.onFocus) _this.props.onFocus(event);
                              } else {
                                _this.hideTooltip();
                                if (_this.props.onBlur) _this.props.onBlur(event);
                              }
                        
                              if (_this.props.onKeyboardFocus) {
                                _this.props.onKeyboardFocus(event, keyboardFocused);
                              }
                            }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
                          }>
                  }
                  onRightIconButtonTouchTap={[Function]}
                  showMenuIconButton={false}
                  style={
                        Object {
                              "boxShadow": "none",
                            }
                  }
                  title="User Listing"
                  zDepth={1} />
            <article
                  style={
                        Object {
                              "padding": 15,
                            }
                  }>
                  <function SelectField() {
                      (0, _classCallCheck3.default)(this, SelectField);
                      return (0, _possibleConstructorReturn3.default)(this, (SelectField.__proto__ || (0, _getPrototypeOf2.default)(SelectField)).apply(this, arguments));
                    }
                        autoWidth={false}
                        disabled={false}
                        floatingLabelFixed={true}
                        floatingLabelText="Select Site"
                        fullWidth={false}
                        onChange={[Function]}
                        value={null} />
                  <br />
                  <br />
                  <function GraphQL(props, context) {
                                  _super.call(this, props, context);
                                  this.data = {};
                                  this.version = version;
                                  this.client = context.client;
                                  invariant(!!this.client, "Could not find \"client\" in the context of " +
                                      ("\"" + graphQLDisplayName + "\". ") +
                                      "Wrap the root component in an <ApolloProvider>");
                                  this.store = this.client.store;
                                  this.type = operation.type;
                                  if (mapPropsToSkip(props))
                                      return;
                                  this.setInitialProps();
                              }
                        domainID={null} />
            </article>
      </function Paper() {
          (0, _classCallCheck3.default)(this, Paper);
          return (0, _possibleConstructorReturn3.default)(this, (Paper.__proto__ || (0, _getPrototypeOf2.default)(Paper)).apply(this, arguments));
        }>
      <function Dialog() {
          var _ref3;
      
          var _temp3, _this3, _ret3;
      
          (0, _classCallCheck3.default)(this, Dialog);
      
          for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
            args[_key3] = arguments[_key3];
          }
      
          return _ret3 = (_temp3 = (_this3 = (0, _possibleConstructorReturn3.default)(this, (_ref3 = Dialog.__proto__ || (0, _getPrototypeOf2.default)(Dialog)).call.apply(_ref3, [this].concat(args))), _this3), _this3.renderLayer = function () {
            return _react2.default.createElement(DialogInline, _this3.props);
          }, _temp3), (0, _possibleConstructorReturn3.default)(_this3, _ret3);
        }
            actionsContainerStyle={
                  Object {
                        "paddingTop": 0,
                      }
            }
            autoDetectWindowHeight={true}
            autoScrollBodyContent={false}
            modal={true}
            onRequestClose={[Function]}
            open={false}
            repositionOnUpdate={true}
            title="User Info">
            <function Connect(props, context) {
                    _classCallCheck(this, Connect);
            
                    var _this = _possibleConstructorReturn(this, _Component.call(this, props, context));
            
                    _this.version = version;
                    _this.store = props.store || context.store;
            
                    (0, _invariant2["default"])(_this.store, 'Could not find "store" in either the context or ' + ('props of "' + connectDisplayName + '". ') + 'Either wrap the root component in a <Provider>, ' + ('or explicitly pass "store" as a prop to "' + connectDisplayName + '".'));
            
                    var storeState = _this.store.getState();
                    _this.state = { storeState: storeState };
                    _this.clearCache();
                    return _this;
                  }
                  closeFormFunc={[Function]} />
      </function Dialog() {
          var _ref3;
      
          var _temp3, _this3, _ret3;
      
          (0, _classCallCheck3.default)(this, Dialog);
      
          for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
            args[_key3] = arguments[_key3];
          }
      
          return _ret3 = (_temp3 = (_this3 = (0, _possibleConstructorReturn3.default)(this, (_ref3 = Dialog.__proto__ || (0, _getPrototypeOf2.default)(Dialog)).call.apply(_ref3, [this].concat(args))), _this3), _this3.renderLayer = function () {
            return _react2.default.createElement(DialogInline, _this3.props);
          }, _temp3), (0, _possibleConstructorReturn3.default)(_this3, _ret3);
        }>
</section>,
  ],
  "options": Object {},
  "renderer": ReactShallowRenderer {
    "_instance": ShallowComponentWrapper {
      "_calledComponentWillUnmount": false,
      "_compositeType": 0,
      "_context": Object {},
      "_currentElement": <class User extends /* istanbul ignore next */_react.Component {

  constructor(props) {
    super(props); /* istanbul ignore next */this.








    _handleOpen = () => {
      this.setState({ open: true });
    }; /* istanbul ignore next */this.

    _handleOpenDelete = () => {
      this.setState({ openDelete: true });
    }; /* istanbul ignore next */this.

    _handleClose = () => {
      this.setState({ open: false });
      this.setState({ openDelete: false });
    }; /* istanbul ignore next */this.

    _onUserClick = user => {
      user.domainID = this.state.siteID;
      this.props.actions.setUserScratch({ user });
      this._handleOpen();
    }; /* istanbul ignore next */this.

    _onAddUser = () => {
      if (!this.state.siteID) {return;}
      this.props.actions.setUserCreate();
      this.props.actions.setUserProp({ 'domainID': this.state.siteID });
      this._handleOpen();
    }; /* istanbul ignore next */this.

    _onSelectSite = (e, idx, val) => {
      this.setState({ siteID: val });
    };this.state = { open: false, openDelete: false, siteID: null, userID: null };}


  render() {/* istanbul ignore next */var _props =

    this.props; /* istanbul ignore next */const loading = _props.loading; /* istanbul ignore next */const fetchSites = _props.fetchSites; /* istanbul ignore next */const removeUser = _props.removeUser;
    if (loading) {
      return (
        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ __source: { fileName: _jsxFileName, lineNumber: 79 }, __self: this }, /* istanbul ignore next */'Loading...'));

    }

    const UserList = data => {/* istanbul ignore next */const

      loading = data.loading; /* istanbul ignore next */const fetchSiteById = data.fetchSiteById; /* istanbul ignore next */const fetchUsers = data.fetchUsers; /* istanbul ignore next */const refetch = data.refetch;
      if (loading) {
        return (
          /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ __source: { fileName: _jsxFileName, lineNumber: 88 }, __self: this }, /* istanbul ignore next */'Loading...'));

      }

      const _onDeleteUser = id => {
        this.setState({ userID: id });
        this._handleOpenDelete();
      };

      const _onDeleteConfirm = () => {
        removeUser(this.state.userID, this.state.siteID).then(res => {
          refetch();
          this.setState({ openDelete: false });
        });
      };

      const deleteActions = [
      /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_FlatButton2.default, /* istanbul ignore next */{
        label: 'NO!',
        primary: true,
        onTouchTap: this._handleClose, __source: { fileName: _jsxFileName, lineNumber: 105 }, __self: this }),

      /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_FlatButton2.default, /* istanbul ignore next */{
        label: 'Go Ahead',
        secondary: true,
        onTouchTap: _onDeleteConfirm, __source: { fileName: _jsxFileName, lineNumber: 110 }, __self: this })];



      const Header = () =>
      /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'header', /* istanbul ignore next */{ className: 'list-table-header', __source: { fileName: _jsxFileName, lineNumber: 118 }, __self: this },
        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'list-table-cell', __source: { fileName: _jsxFileName, lineNumber: 119 }, __self: this }, /* istanbul ignore next */'Name'),
        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'list-table-cell', __source: { fileName: _jsxFileName, lineNumber: 120 }, __self: this }, /* istanbul ignore next */'Active'),
        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'list-table-cell', __source: { fileName: _jsxFileName, lineNumber: 121 }, __self: this }, /* istanbul ignore next */'Email'),
        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'list-table-cell', __source: { fileName: _jsxFileName, lineNumber: 122 }, __self: this }));



      const rows = fetchUsers.map(u => {
        return (
          /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{
              className: 'list-table-row',
              key: u._id, __source: { fileName: _jsxFileName, lineNumber: 128 }, __self: this },

            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'list-table-cell', onClick: () => this._onUserClick(u), __source: { fileName: _jsxFileName, lineNumber: 132 }, __self: this },
              u.contact.name.last, /* istanbul ignore next */', ', u.contact.name.first),

            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'list-table-cell', onClick: () => this._onUserClick(u), __source: { fileName: _jsxFileName, lineNumber: 135 }, __self: this },
              u.active ? 'Y' : 'N'),

            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'list-table-cell', __source: { fileName: _jsxFileName, lineNumber: 138 }, __self: this },
              /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'a', /* istanbul ignore next */{ href: \`mailto:${ u.email }\`, __source: { fileName: _jsxFileName, lineNumber: 139 }, __self: this }, u.email)),

            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'list-table-cell', __source: { fileName: _jsxFileName, lineNumber: 141 }, __self: this },
              /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_FlatButton2.default, /* istanbul ignore next */{
                icon: /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_delete2.default, /* istanbul ignore next */{ __source: { fileName: _jsxFileName, lineNumber: 143 }, __self: this }),
                onClick: () => _onDeleteUser(u._id),
                secondary: true, __source: { fileName: _jsxFileName, lineNumber: 142 }, __self: this }))));




      });
      return (
        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ __source: { fileName: _jsxFileName, lineNumber: 152 }, __self: this }, /* istanbul ignore next */_react2.default.createElement(Header, /* istanbul ignore next */{ __source: { fileName: _jsxFileName, lineNumber: 152 }, __self: this }), rows,
          /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_Dialog2.default, /* istanbul ignore next */{
              actions: deleteActions,
              contentStyle: { width: 400 },
              onRequestClose: this._handleClose,
              open: this.state.openDelete, __source: { fileName: _jsxFileName, lineNumber: 153 }, __self: this }, /* istanbul ignore next */'You sure you want to delete this user?',

            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'br', /* istanbul ignore next */{ __source: { fileName: _jsxFileName, lineNumber: 159 }, __self: this }), /* istanbul ignore next */'This action cannot be undone.')));




    };

    const USER_QUERY = /* istanbul ignore next */_graphqlTag2.default\`
      query fetchUsers ($domainID:ID, $siteID:ID) {
        fetchUsers (domainID:$domainID) {
          _id
          active
          contact {
            _id
            email
            name {
              first
              last
            }
          }
          email
          scope
        },
        fetchSiteById (_id:$siteID) {
          _id
          roles {
            id
            label
          }
        }
      }\`;

    const UserListWithData = /* istanbul ignore next */(0, _reactApollo.graphql)(USER_QUERY, {
      options: ( /* istanbul ignore next */_ref) => /* istanbul ignore next */{let domainID = _ref.domainID;let siteID = _ref.siteID;return { variables: { domainID, siteID: domainID } };},
      props( /* istanbul ignore next */_ref2) {/* istanbul ignore next */var _ref2$data = _ref2.data; /* istanbul ignore next */let loading = _ref2$data.loading; /* istanbul ignore next */let fetchSiteById = _ref2$data.fetchSiteById; /* istanbul ignore next */let fetchUsers = _ref2$data.fetchUsers; /* istanbul ignore next */let refetch = _ref2$data.refetch;
        return { loading, fetchSiteById, fetchUsers, refetch };
      } })(
    UserList);


    return (

      /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'section', /* istanbul ignore next */{ className: 'App-container', __source: { fileName: _jsxFileName, lineNumber: 201 }, __self: this },
        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_Paper2.default, /* istanbul ignore next */{ __source: { fileName: _jsxFileName, lineNumber: 202 }, __self: this },
          /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_AppBar2.default, /* istanbul ignore next */{
            iconElementRight: /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_IconButton2.default, /* istanbul ignore next */{ iconStyle: /* istanbul ignore next */_styles.styles.appBarEleIconStyle, style: /* istanbul ignore next */_styles.styles.appBarEleStyle, __source: { fileName: _jsxFileName, lineNumber: 204 }, __self: this }, /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_add2.default, /* istanbul ignore next */{ __source: { fileName: _jsxFileName, lineNumber: 204 }, __self: this })),
            onRightIconButtonTouchTap: () => this._onAddUser(),
            showMenuIconButton: false,
            style: /* istanbul ignore next */_styles.styles.appBar,
            title: 'User Listing', __source: { fileName: _jsxFileName, lineNumber: 203 }, __self: this }),

          /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'article', /* istanbul ignore next */{ style: /* istanbul ignore next */_styles.styles.paper, __source: { fileName: _jsxFileName, lineNumber: 210 }, __self: this },
            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_SelectField2.default, /* istanbul ignore next */{
                floatingLabelFixed: true,
                floatingLabelText: 'Select Site',
                onChange: (e, key, payload) => this._onSelectSite(e, key, payload),
                value: this.state.siteID, __source: { fileName: _jsxFileName, lineNumber: 211 }, __self: this },

              fetchSites && fetchSites.length && fetchSites.map(s => /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_MenuItem2.default, /* istanbul ignore next */{ key: s._id, value: s._id, primaryText: s.name, __source: { fileName: _jsxFileName, lineNumber: 217 }, __self: this }))),

            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'br', /* istanbul ignore next */{ __source: { fileName: _jsxFileName, lineNumber: 219 }, __self: this }), /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'br', /* istanbul ignore next */{ __source: { fileName: _jsxFileName, lineNumber: 219 }, __self: this }),
            /* istanbul ignore next */_react2.default.createElement(UserListWithData, /* istanbul ignore next */{ domainID: this.state.siteID, __source: { fileName: _jsxFileName, lineNumber: 220 }, __self: this }))),


        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_Dialog2.default, /* istanbul ignore next */{
            actionsContainerStyle: { paddingTop: 0 },
            modal: true,
            onRequestClose: this._handleClose,
            open: this.state.open,
            title: 'User Info', __source: { fileName: _jsxFileName, lineNumber: 223 }, __self: this },

          /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_Userform2.default, /* istanbul ignore next */{ closeFormFunc: this._handleClose, __source: { fileName: _jsxFileName, lineNumber: 230 }, __self: this }))));



  }} />,
      "_debugID": 1,
      "_hostContainerInfo": null,
      "_hostParent": null,
      "_instance": User {
        "_handleClose": [Function],
        "_handleOpen": [Function],
        "_handleOpenDelete": [Function],
        "_onAddUser": [Function],
        "_onSelectSite": [Function],
        "_onUserClick": [Function],
        "_reactInternalInstance": [Circular],
        "context": Object {},
        "props": Object {},
        "refs": Object {},
        "state": Object {
          "open": false,
          "openDelete": false,
          "siteID": null,
          "userID": null,
        },
        "updater": Object {
          "enqueueCallback": [Function],
          "enqueueCallbackInternal": [Function],
          "enqueueElementInternal": [Function],
          "enqueueForceUpdate": [Function],
          "enqueueReplaceState": [Function],
          "enqueueSetState": [Function],
          "isMounted": [Function],
          "validateCallback": [Function],
        },
      },
      "_mountOrder": 1,
      "_pendingCallbacks": null,
      "_pendingElement": null,
      "_pendingForceUpdate": false,
      "_pendingReplaceState": false,
      "_pendingStateQueue": null,
      "_renderedComponent": Object {
        "_currentElement": <section
          className="App-container">
          <function Paper() {
              (0, _classCallCheck3.default)(this, Paper);
              return (0, _possibleConstructorReturn3.default)(this, (Paper.__proto__ || (0, _getPrototypeOf2.default)(Paper)).apply(this, arguments));
            }
                    circle={false}
                    rounded={true}
                    transitionEnabled={true}
                    zDepth={1}>
                    <function AppBar() {
                        var _ref;
                    
                        var _temp, _this, _ret;
                    
                        (0, _classCallCheck3.default)(this, AppBar);
                    
                        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                          args[_key] = arguments[_key];
                        }
                    
                        return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = AppBar.__proto__ || (0, _getPrototypeOf2.default)(AppBar)).call.apply(_ref, [this].concat(args))), _this), _this.handleTouchTapLeftIconButton = function (event) {
                          if (_this.props.onLeftIconButtonTouchTap) {
                            _this.props.onLeftIconButtonTouchTap(event);
                          }
                        }, _this.handleTouchTapRightIconButton = function (event) {
                          if (_this.props.onRightIconButtonTouchTap) {
                            _this.props.onRightIconButtonTouchTap(event);
                          }
                        }, _this.handleTitleTouchTap = function (event) {
                          if (_this.props.onTitleTouchTap) {
                            _this.props.onTitleTouchTap(event);
                          }
                        }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
                      }
                              iconElementRight={
                                        <function IconButton() {
                                            var _ref;
                                        
                                            var _temp, _this, _ret;
                                        
                                            (0, _classCallCheck3.default)(this, IconButton);
                                        
                                            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                                              args[_key] = arguments[_key];
                                            }
                                        
                                            return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = IconButton.__proto__ || (0, _getPrototypeOf2.default)(IconButton)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
                                              tooltipShown: false
                                            }, _this.handleBlur = function (event) {
                                              _this.hideTooltip();
                                              if (_this.props.onBlur) _this.props.onBlur(event);
                                            }, _this.handleFocus = function (event) {
                                              _this.showTooltip();
                                              if (_this.props.onFocus) _this.props.onFocus(event);
                                            }, _this.handleMouseLeave = function (event) {
                                              if (!_this.refs.button.isKeyboardFocused()) _this.hideTooltip();
                                              if (_this.props.onMouseLeave) _this.props.onMouseLeave(event);
                                            }, _this.handleMouseOut = function (event) {
                                              if (_this.props.disabled) _this.hideTooltip();
                                              if (_this.props.onMouseOut) _this.props.onMouseOut(event);
                                            }, _this.handleMouseEnter = function (event) {
                                              _this.showTooltip();
                                              if (_this.props.onMouseEnter) _this.props.onMouseEnter(event);
                                            }, _this.handleKeyboardFocus = function (event, keyboardFocused) {
                                              if (keyboardFocused && !_this.props.disabled) {
                                                _this.showTooltip();
                                                if (_this.props.onFocus) _this.props.onFocus(event);
                                              } else {
                                                _this.hideTooltip();
                                                if (_this.props.onBlur) _this.props.onBlur(event);
                                              }
                                        
                                              if (_this.props.onKeyboardFocus) {
                                                _this.props.onKeyboardFocus(event, keyboardFocused);
                                              }
                                            }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
                                          }
                                                  disableTouchRipple={false}
                                                  disabled={false}
                                                  iconStyle={
                                                            Object {
                                                                      "fill": "#22A699",
                                                                      "height": 36,
                                                                      "padding": 6,
                                                                      "width": 36,
                                                                    }
                                                  }
                                                  style={
                                                            Object {
                                                                      "height": 40,
                                                                      "padding": 0,
                                                                      "width": 50,
                                                                    }
                                                  }
                                                  tooltipPosition="bottom-center"
                                                  touch={false}>
                                                  <function _class() {
                                                          _classCallCheck(this, _class);
                                                  
                                                          return _possibleConstructorReturn(this, _Component.apply(this, arguments));
                                                        } />
                                        </function IconButton() {
                                            var _ref;
                                        
                                            var _temp, _this, _ret;
                                        
                                            (0, _classCallCheck3.default)(this, IconButton);
                                        
                                            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                                              args[_key] = arguments[_key];
                                            }
                                        
                                            return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = IconButton.__proto__ || (0, _getPrototypeOf2.default)(IconButton)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
                                              tooltipShown: false
                                            }, _this.handleBlur = function (event) {
                                              _this.hideTooltip();
                                              if (_this.props.onBlur) _this.props.onBlur(event);
                                            }, _this.handleFocus = function (event) {
                                              _this.showTooltip();
                                              if (_this.props.onFocus) _this.props.onFocus(event);
                                            }, _this.handleMouseLeave = function (event) {
                                              if (!_this.refs.button.isKeyboardFocused()) _this.hideTooltip();
                                              if (_this.props.onMouseLeave) _this.props.onMouseLeave(event);
                                            }, _this.handleMouseOut = function (event) {
                                              if (_this.props.disabled) _this.hideTooltip();
                                              if (_this.props.onMouseOut) _this.props.onMouseOut(event);
                                            }, _this.handleMouseEnter = function (event) {
                                              _this.showTooltip();
                                              if (_this.props.onMouseEnter) _this.props.onMouseEnter(event);
                                            }, _this.handleKeyboardFocus = function (event, keyboardFocused) {
                                              if (keyboardFocused && !_this.props.disabled) {
                                                _this.showTooltip();
                                                if (_this.props.onFocus) _this.props.onFocus(event);
                                              } else {
                                                _this.hideTooltip();
                                                if (_this.props.onBlur) _this.props.onBlur(event);
                                              }
                                        
                                              if (_this.props.onKeyboardFocus) {
                                                _this.props.onKeyboardFocus(event, keyboardFocused);
                                              }
                                            }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
                                          }>
                              }
                              onRightIconButtonTouchTap={[Function]}
                              showMenuIconButton={false}
                              style={
                                        Object {
                                                  "boxShadow": "none",
                                                }
                              }
                              title="User Listing"
                              zDepth={1} />
                    <article
                              style={
                                        Object {
                                                  "padding": 15,
                                                }
                              }>
                              <function SelectField() {
                                  (0, _classCallCheck3.default)(this, SelectField);
                                  return (0, _possibleConstructorReturn3.default)(this, (SelectField.__proto__ || (0, _getPrototypeOf2.default)(SelectField)).apply(this, arguments));
                                }
                                        autoWidth={false}
                                        disabled={false}
                                        floatingLabelFixed={true}
                                        floatingLabelText="Select Site"
                                        fullWidth={false}
                                        onChange={[Function]}
                                        value={null} />
                              <br />
                              <br />
                              <function GraphQL(props, context) {
                                              _super.call(this, props, context);
                                              this.data = {};
                                              this.version = version;
                                              this.client = context.client;
                                              invariant(!!this.client, "Could not find \"client\" in the context of " +
                                                  ("\"" + graphQLDisplayName + "\". ") +
                                                  "Wrap the root component in an <ApolloProvider>");
                                              this.store = this.client.store;
                                              this.type = operation.type;
                                              if (mapPropsToSkip(props))
                                                  return;
                                              this.setInitialProps();
                                          }
                                        domainID={null} />
                    </article>
          </function Paper() {
              (0, _classCallCheck3.default)(this, Paper);
              return (0, _possibleConstructorReturn3.default)(this, (Paper.__proto__ || (0, _getPrototypeOf2.default)(Paper)).apply(this, arguments));
            }>
          <function Dialog() {
              var _ref3;
          
              var _temp3, _this3, _ret3;
          
              (0, _classCallCheck3.default)(this, Dialog);
          
              for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
                args[_key3] = arguments[_key3];
              }
          
              return _ret3 = (_temp3 = (_this3 = (0, _possibleConstructorReturn3.default)(this, (_ref3 = Dialog.__proto__ || (0, _getPrototypeOf2.default)(Dialog)).call.apply(_ref3, [this].concat(args))), _this3), _this3.renderLayer = function () {
                return _react2.default.createElement(DialogInline, _this3.props);
              }, _temp3), (0, _possibleConstructorReturn3.default)(_this3, _ret3);
            }
                    actionsContainerStyle={
                              Object {
                                        "paddingTop": 0,
                                      }
                    }
                    autoDetectWindowHeight={true}
                    autoScrollBodyContent={false}
                    modal={true}
                    onRequestClose={[Function]}
                    open={false}
                    repositionOnUpdate={true}
                    title="User Info">
                    <function Connect(props, context) {
                            _classCallCheck(this, Connect);
                    
                            var _this = _possibleConstructorReturn(this, _Component.call(this, props, context));
                    
                            _this.version = version;
                            _this.store = props.store || context.store;
                    
                            (0, _invariant2["default"])(_this.store, 'Could not find "store" in either the context or ' + ('props of "' + connectDisplayName + '". ') + 'Either wrap the root component in a <Provider>, ' + ('or explicitly pass "store" as a prop to "' + connectDisplayName + '".'));
                    
                            var storeState = _this.store.getState();
                            _this.state = { storeState: storeState };
                            _this.clearCache();
                            return _this;
                          }
                              closeFormFunc={[Function]} />
          </function Dialog() {
              var _ref3;
          
              var _temp3, _this3, _ret3;
          
              (0, _classCallCheck3.default)(this, Dialog);
          
              for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
                args[_key3] = arguments[_key3];
              }
          
              return _ret3 = (_temp3 = (_this3 = (0, _possibleConstructorReturn3.default)(this, (_ref3 = Dialog.__proto__ || (0, _getPrototypeOf2.default)(Dialog)).call.apply(_ref3, [this].concat(args))), _this3), _this3.renderLayer = function () {
                return _react2.default.createElement(DialogInline, _this3.props);
              }, _temp3), (0, _possibleConstructorReturn3.default)(_this3, _ret3);
            }>
</section>,
        "_debugID": 2,
        "_renderedOutput": <section
          className="App-container">
          <function Paper() {
              (0, _classCallCheck3.default)(this, Paper);
              return (0, _possibleConstructorReturn3.default)(this, (Paper.__proto__ || (0, _getPrototypeOf2.default)(Paper)).apply(this, arguments));
            }
                    circle={false}
                    rounded={true}
                    transitionEnabled={true}
                    zDepth={1}>
                    <function AppBar() {
                        var _ref;
                    
                        var _temp, _this, _ret;
                    
                        (0, _classCallCheck3.default)(this, AppBar);
                    
                        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                          args[_key] = arguments[_key];
                        }
                    
                        return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = AppBar.__proto__ || (0, _getPrototypeOf2.default)(AppBar)).call.apply(_ref, [this].concat(args))), _this), _this.handleTouchTapLeftIconButton = function (event) {
                          if (_this.props.onLeftIconButtonTouchTap) {
                            _this.props.onLeftIconButtonTouchTap(event);
                          }
                        }, _this.handleTouchTapRightIconButton = function (event) {
                          if (_this.props.onRightIconButtonTouchTap) {
                            _this.props.onRightIconButtonTouchTap(event);
                          }
                        }, _this.handleTitleTouchTap = function (event) {
                          if (_this.props.onTitleTouchTap) {
                            _this.props.onTitleTouchTap(event);
                          }
                        }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
                      }
                              iconElementRight={
                                        <function IconButton() {
                                            var _ref;
                                        
                                            var _temp, _this, _ret;
                                        
                                            (0, _classCallCheck3.default)(this, IconButton);
                                        
                                            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                                              args[_key] = arguments[_key];
                                            }
                                        
                                            return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = IconButton.__proto__ || (0, _getPrototypeOf2.default)(IconButton)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
                                              tooltipShown: false
                                            }, _this.handleBlur = function (event) {
                                              _this.hideTooltip();
                                              if (_this.props.onBlur) _this.props.onBlur(event);
                                            }, _this.handleFocus = function (event) {
                                              _this.showTooltip();
                                              if (_this.props.onFocus) _this.props.onFocus(event);
                                            }, _this.handleMouseLeave = function (event) {
                                              if (!_this.refs.button.isKeyboardFocused()) _this.hideTooltip();
                                              if (_this.props.onMouseLeave) _this.props.onMouseLeave(event);
                                            }, _this.handleMouseOut = function (event) {
                                              if (_this.props.disabled) _this.hideTooltip();
                                              if (_this.props.onMouseOut) _this.props.onMouseOut(event);
                                            }, _this.handleMouseEnter = function (event) {
                                              _this.showTooltip();
                                              if (_this.props.onMouseEnter) _this.props.onMouseEnter(event);
                                            }, _this.handleKeyboardFocus = function (event, keyboardFocused) {
                                              if (keyboardFocused && !_this.props.disabled) {
                                                _this.showTooltip();
                                                if (_this.props.onFocus) _this.props.onFocus(event);
                                              } else {
                                                _this.hideTooltip();
                                                if (_this.props.onBlur) _this.props.onBlur(event);
                                              }
                                        
                                              if (_this.props.onKeyboardFocus) {
                                                _this.props.onKeyboardFocus(event, keyboardFocused);
                                              }
                                            }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
                                          }
                                                  disableTouchRipple={false}
                                                  disabled={false}
                                                  iconStyle={
                                                            Object {
                                                                      "fill": "#22A699",
                                                                      "height": 36,
                                                                      "padding": 6,
                                                                      "width": 36,
                                                                    }
                                                  }
                                                  style={
                                                            Object {
                                                                      "height": 40,
                                                                      "padding": 0,
                                                                      "width": 50,
                                                                    }
                                                  }
                                                  tooltipPosition="bottom-center"
                                                  touch={false}>
                                                  <function _class() {
                                                          _classCallCheck(this, _class);
                                                  
                                                          return _possibleConstructorReturn(this, _Component.apply(this, arguments));
                                                        } />
                                        </function IconButton() {
                                            var _ref;
                                        
                                            var _temp, _this, _ret;
                                        
                                            (0, _classCallCheck3.default)(this, IconButton);
                                        
                                            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                                              args[_key] = arguments[_key];
                                            }
                                        
                                            return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = IconButton.__proto__ || (0, _getPrototypeOf2.default)(IconButton)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
                                              tooltipShown: false
                                            }, _this.handleBlur = function (event) {
                                              _this.hideTooltip();
                                              if (_this.props.onBlur) _this.props.onBlur(event);
                                            }, _this.handleFocus = function (event) {
                                              _this.showTooltip();
                                              if (_this.props.onFocus) _this.props.onFocus(event);
                                            }, _this.handleMouseLeave = function (event) {
                                              if (!_this.refs.button.isKeyboardFocused()) _this.hideTooltip();
                                              if (_this.props.onMouseLeave) _this.props.onMouseLeave(event);
                                            }, _this.handleMouseOut = function (event) {
                                              if (_this.props.disabled) _this.hideTooltip();
                                              if (_this.props.onMouseOut) _this.props.onMouseOut(event);
                                            }, _this.handleMouseEnter = function (event) {
                                              _this.showTooltip();
                                              if (_this.props.onMouseEnter) _this.props.onMouseEnter(event);
                                            }, _this.handleKeyboardFocus = function (event, keyboardFocused) {
                                              if (keyboardFocused && !_this.props.disabled) {
                                                _this.showTooltip();
                                                if (_this.props.onFocus) _this.props.onFocus(event);
                                              } else {
                                                _this.hideTooltip();
                                                if (_this.props.onBlur) _this.props.onBlur(event);
                                              }
                                        
                                              if (_this.props.onKeyboardFocus) {
                                                _this.props.onKeyboardFocus(event, keyboardFocused);
                                              }
                                            }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
                                          }>
                              }
                              onRightIconButtonTouchTap={[Function]}
                              showMenuIconButton={false}
                              style={
                                        Object {
                                                  "boxShadow": "none",
                                                }
                              }
                              title="User Listing"
                              zDepth={1} />
                    <article
                              style={
                                        Object {
                                                  "padding": 15,
                                                }
                              }>
                              <function SelectField() {
                                  (0, _classCallCheck3.default)(this, SelectField);
                                  return (0, _possibleConstructorReturn3.default)(this, (SelectField.__proto__ || (0, _getPrototypeOf2.default)(SelectField)).apply(this, arguments));
                                }
                                        autoWidth={false}
                                        disabled={false}
                                        floatingLabelFixed={true}
                                        floatingLabelText="Select Site"
                                        fullWidth={false}
                                        onChange={[Function]}
                                        value={null} />
                              <br />
                              <br />
                              <function GraphQL(props, context) {
                                              _super.call(this, props, context);
                                              this.data = {};
                                              this.version = version;
                                              this.client = context.client;
                                              invariant(!!this.client, "Could not find \"client\" in the context of " +
                                                  ("\"" + graphQLDisplayName + "\". ") +
                                                  "Wrap the root component in an <ApolloProvider>");
                                              this.store = this.client.store;
                                              this.type = operation.type;
                                              if (mapPropsToSkip(props))
                                                  return;
                                              this.setInitialProps();
                                          }
                                        domainID={null} />
                    </article>
          </function Paper() {
              (0, _classCallCheck3.default)(this, Paper);
              return (0, _possibleConstructorReturn3.default)(this, (Paper.__proto__ || (0, _getPrototypeOf2.default)(Paper)).apply(this, arguments));
            }>
          <function Dialog() {
              var _ref3;
          
              var _temp3, _this3, _ret3;
          
              (0, _classCallCheck3.default)(this, Dialog);
          
              for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
                args[_key3] = arguments[_key3];
              }
          
              return _ret3 = (_temp3 = (_this3 = (0, _possibleConstructorReturn3.default)(this, (_ref3 = Dialog.__proto__ || (0, _getPrototypeOf2.default)(Dialog)).call.apply(_ref3, [this].concat(args))), _this3), _this3.renderLayer = function () {
                return _react2.default.createElement(DialogInline, _this3.props);
              }, _temp3), (0, _possibleConstructorReturn3.default)(_this3, _ret3);
            }
                    actionsContainerStyle={
                              Object {
                                        "paddingTop": 0,
                                      }
                    }
                    autoDetectWindowHeight={true}
                    autoScrollBodyContent={false}
                    modal={true}
                    onRequestClose={[Function]}
                    open={false}
                    repositionOnUpdate={true}
                    title="User Info">
                    <function Connect(props, context) {
                            _classCallCheck(this, Connect);
                    
                            var _this = _possibleConstructorReturn(this, _Component.call(this, props, context));
                    
                            _this.version = version;
                            _this.store = props.store || context.store;
                    
                            (0, _invariant2["default"])(_this.store, 'Could not find "store" in either the context or ' + ('props of "' + connectDisplayName + '". ') + 'Either wrap the root component in a <Provider>, ' + ('or explicitly pass "store" as a prop to "' + connectDisplayName + '".'));
                    
                            var storeState = _this.store.getState();
                            _this.state = { storeState: storeState };
                            _this.clearCache();
                            return _this;
                          }
                              closeFormFunc={[Function]} />
          </function Dialog() {
              var _ref3;
          
              var _temp3, _this3, _ret3;
          
              (0, _classCallCheck3.default)(this, Dialog);
          
              for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
                args[_key3] = arguments[_key3];
              }
          
              return _ret3 = (_temp3 = (_this3 = (0, _possibleConstructorReturn3.default)(this, (_ref3 = Dialog.__proto__ || (0, _getPrototypeOf2.default)(Dialog)).call.apply(_ref3, [this].concat(args))), _this3), _this3.renderLayer = function () {
                return _react2.default.createElement(DialogInline, _this3.props);
              }, _temp3), (0, _possibleConstructorReturn3.default)(_this3, _ret3);
            }>
</section>,
      },
      "_renderedNodeType": 0,
      "_rootNodeID": 0,
      "_topLevelWrapper": null,
      "_updateBatchNumber": null,
      "_warnedAboutRefsInRender": false,
    },
    "getRenderOutput": [Function],
    "render": [Function],
  },
  "root": [Circular],
  "unrendered": <class User extends /* istanbul ignore next */_react.Component {

  constructor(props) {
    super(props); /* istanbul ignore next */this.








    _handleOpen = () => {
      this.setState({ open: true });
    }; /* istanbul ignore next */this.

    _handleOpenDelete = () => {
      this.setState({ openDelete: true });
    }; /* istanbul ignore next */this.

    _handleClose = () => {
      this.setState({ open: false });
      this.setState({ openDelete: false });
    }; /* istanbul ignore next */this.

    _onUserClick = user => {
      user.domainID = this.state.siteID;
      this.props.actions.setUserScratch({ user });
      this._handleOpen();
    }; /* istanbul ignore next */this.

    _onAddUser = () => {
      if (!this.state.siteID) {return;}
      this.props.actions.setUserCreate();
      this.props.actions.setUserProp({ 'domainID': this.state.siteID });
      this._handleOpen();
    }; /* istanbul ignore next */this.

    _onSelectSite = (e, idx, val) => {
      this.setState({ siteID: val });
    };this.state = { open: false, openDelete: false, siteID: null, userID: null };}


  render() {/* istanbul ignore next */var _props =

    this.props; /* istanbul ignore next */const loading = _props.loading; /* istanbul ignore next */const fetchSites = _props.fetchSites; /* istanbul ignore next */const removeUser = _props.removeUser;
    if (loading) {
      return (
        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ __source: { fileName: _jsxFileName, lineNumber: 79 }, __self: this }, /* istanbul ignore next */'Loading...'));

    }

    const UserList = data => {/* istanbul ignore next */const

      loading = data.loading; /* istanbul ignore next */const fetchSiteById = data.fetchSiteById; /* istanbul ignore next */const fetchUsers = data.fetchUsers; /* istanbul ignore next */const refetch = data.refetch;
      if (loading) {
        return (
          /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ __source: { fileName: _jsxFileName, lineNumber: 88 }, __self: this }, /* istanbul ignore next */'Loading...'));

      }

      const _onDeleteUser = id => {
        this.setState({ userID: id });
        this._handleOpenDelete();
      };

      const _onDeleteConfirm = () => {
        removeUser(this.state.userID, this.state.siteID).then(res => {
          refetch();
          this.setState({ openDelete: false });
        });
      };

      const deleteActions = [
      /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_FlatButton2.default, /* istanbul ignore next */{
        label: 'NO!',
        primary: true,
        onTouchTap: this._handleClose, __source: { fileName: _jsxFileName, lineNumber: 105 }, __self: this }),

      /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_FlatButton2.default, /* istanbul ignore next */{
        label: 'Go Ahead',
        secondary: true,
        onTouchTap: _onDeleteConfirm, __source: { fileName: _jsxFileName, lineNumber: 110 }, __self: this })];



      const Header = () =>
      /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'header', /* istanbul ignore next */{ className: 'list-table-header', __source: { fileName: _jsxFileName, lineNumber: 118 }, __self: this },
        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'list-table-cell', __source: { fileName: _jsxFileName, lineNumber: 119 }, __self: this }, /* istanbul ignore next */'Name'),
        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'list-table-cell', __source: { fileName: _jsxFileName, lineNumber: 120 }, __self: this }, /* istanbul ignore next */'Active'),
        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'list-table-cell', __source: { fileName: _jsxFileName, lineNumber: 121 }, __self: this }, /* istanbul ignore next */'Email'),
        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'list-table-cell', __source: { fileName: _jsxFileName, lineNumber: 122 }, __self: this }));



      const rows = fetchUsers.map(u => {
        return (
          /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{
              className: 'list-table-row',
              key: u._id, __source: { fileName: _jsxFileName, lineNumber: 128 }, __self: this },

            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'list-table-cell', onClick: () => this._onUserClick(u), __source: { fileName: _jsxFileName, lineNumber: 132 }, __self: this },
              u.contact.name.last, /* istanbul ignore next */', ', u.contact.name.first),

            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'list-table-cell', onClick: () => this._onUserClick(u), __source: { fileName: _jsxFileName, lineNumber: 135 }, __self: this },
              u.active ? 'Y' : 'N'),

            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'list-table-cell', __source: { fileName: _jsxFileName, lineNumber: 138 }, __self: this },
              /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'a', /* istanbul ignore next */{ href: \`mailto:${ u.email }\`, __source: { fileName: _jsxFileName, lineNumber: 139 }, __self: this }, u.email)),

            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'list-table-cell', __source: { fileName: _jsxFileName, lineNumber: 141 }, __self: this },
              /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_FlatButton2.default, /* istanbul ignore next */{
                icon: /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_delete2.default, /* istanbul ignore next */{ __source: { fileName: _jsxFileName, lineNumber: 143 }, __self: this }),
                onClick: () => _onDeleteUser(u._id),
                secondary: true, __source: { fileName: _jsxFileName, lineNumber: 142 }, __self: this }))));




      });
      return (
        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ __source: { fileName: _jsxFileName, lineNumber: 152 }, __self: this }, /* istanbul ignore next */_react2.default.createElement(Header, /* istanbul ignore next */{ __source: { fileName: _jsxFileName, lineNumber: 152 }, __self: this }), rows,
          /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_Dialog2.default, /* istanbul ignore next */{
              actions: deleteActions,
              contentStyle: { width: 400 },
              onRequestClose: this._handleClose,
              open: this.state.openDelete, __source: { fileName: _jsxFileName, lineNumber: 153 }, __self: this }, /* istanbul ignore next */'You sure you want to delete this user?',

            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'br', /* istanbul ignore next */{ __source: { fileName: _jsxFileName, lineNumber: 159 }, __self: this }), /* istanbul ignore next */'This action cannot be undone.')));




    };

    const USER_QUERY = /* istanbul ignore next */_graphqlTag2.default\`
      query fetchUsers ($domainID:ID, $siteID:ID) {
        fetchUsers (domainID:$domainID) {
          _id
          active
          contact {
            _id
            email
            name {
              first
              last
            }
          }
          email
          scope
        },
        fetchSiteById (_id:$siteID) {
          _id
          roles {
            id
            label
          }
        }
      }\`;

    const UserListWithData = /* istanbul ignore next */(0, _reactApollo.graphql)(USER_QUERY, {
      options: ( /* istanbul ignore next */_ref) => /* istanbul ignore next */{let domainID = _ref.domainID;let siteID = _ref.siteID;return { variables: { domainID, siteID: domainID } };},
      props( /* istanbul ignore next */_ref2) {/* istanbul ignore next */var _ref2$data = _ref2.data; /* istanbul ignore next */let loading = _ref2$data.loading; /* istanbul ignore next */let fetchSiteById = _ref2$data.fetchSiteById; /* istanbul ignore next */let fetchUsers = _ref2$data.fetchUsers; /* istanbul ignore next */let refetch = _ref2$data.refetch;
        return { loading, fetchSiteById, fetchUsers, refetch };
      } })(
    UserList);


    return (

      /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'section', /* istanbul ignore next */{ className: 'App-container', __source: { fileName: _jsxFileName, lineNumber: 201 }, __self: this },
        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_Paper2.default, /* istanbul ignore next */{ __source: { fileName: _jsxFileName, lineNumber: 202 }, __self: this },
          /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_AppBar2.default, /* istanbul ignore next */{
            iconElementRight: /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_IconButton2.default, /* istanbul ignore next */{ iconStyle: /* istanbul ignore next */_styles.styles.appBarEleIconStyle, style: /* istanbul ignore next */_styles.styles.appBarEleStyle, __source: { fileName: _jsxFileName, lineNumber: 204 }, __self: this }, /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_add2.default, /* istanbul ignore next */{ __source: { fileName: _jsxFileName, lineNumber: 204 }, __self: this })),
            onRightIconButtonTouchTap: () => this._onAddUser(),
            showMenuIconButton: false,
            style: /* istanbul ignore next */_styles.styles.appBar,
            title: 'User Listing', __source: { fileName: _jsxFileName, lineNumber: 203 }, __self: this }),

          /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'article', /* istanbul ignore next */{ style: /* istanbul ignore next */_styles.styles.paper, __source: { fileName: _jsxFileName, lineNumber: 210 }, __self: this },
            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_SelectField2.default, /* istanbul ignore next */{
                floatingLabelFixed: true,
                floatingLabelText: 'Select Site',
                onChange: (e, key, payload) => this._onSelectSite(e, key, payload),
                value: this.state.siteID, __source: { fileName: _jsxFileName, lineNumber: 211 }, __self: this },

              fetchSites && fetchSites.length && fetchSites.map(s => /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_MenuItem2.default, /* istanbul ignore next */{ key: s._id, value: s._id, primaryText: s.name, __source: { fileName: _jsxFileName, lineNumber: 217 }, __self: this }))),

            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'br', /* istanbul ignore next */{ __source: { fileName: _jsxFileName, lineNumber: 219 }, __self: this }), /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'br', /* istanbul ignore next */{ __source: { fileName: _jsxFileName, lineNumber: 219 }, __self: this }),
            /* istanbul ignore next */_react2.default.createElement(UserListWithData, /* istanbul ignore next */{ domainID: this.state.siteID, __source: { fileName: _jsxFileName, lineNumber: 220 }, __self: this }))),


        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_Dialog2.default, /* istanbul ignore next */{
            actionsContainerStyle: { paddingTop: 0 },
            modal: true,
            onRequestClose: this._handleClose,
            open: this.state.open,
            title: 'User Info', __source: { fileName: _jsxFileName, lineNumber: 223 }, __self: this },

          /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_Userform2.default, /* istanbul ignore next */{ closeFormFunc: this._handleClose, __source: { fileName: _jsxFileName, lineNumber: 230 }, __self: this }))));



  }} />,
}
`;
