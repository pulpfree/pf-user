exports[`components <User /> renders without crashing 1`] = `
ShallowWrapper {
  "complexSelector": ComplexSelector {
    "buildPredicate": [Function],
    "childrenOfNode": [Function],
    "findWhereUnwrapped": [Function],
  },
  "length": 1,
  "node": <section
    className="App-container">
    <function Paper() {
        (0, _classCallCheck3.default)(this, Paper);
        return (0, _possibleConstructorReturn3.default)(this, (Paper.__proto__ || (0, _getPrototypeOf2.default)(Paper)).apply(this, arguments));
      }
        circle={false}
        rounded={true}
        transitionEnabled={true}
        zDepth={1}>
        <function AppBar() {
            var _ref;
        
            var _temp, _this, _ret;
        
            (0, _classCallCheck3.default)(this, AppBar);
        
            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
              args[_key] = arguments[_key];
            }
        
            return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = AppBar.__proto__ || (0, _getPrototypeOf2.default)(AppBar)).call.apply(_ref, [this].concat(args))), _this), _this.handleTouchTapLeftIconButton = function (event) {
              if (_this.props.onLeftIconButtonTouchTap) {
                _this.props.onLeftIconButtonTouchTap(event);
              }
            }, _this.handleTouchTapRightIconButton = function (event) {
              if (_this.props.onRightIconButtonTouchTap) {
                _this.props.onRightIconButtonTouchTap(event);
              }
            }, _this.handleTitleTouchTap = function (event) {
              if (_this.props.onTitleTouchTap) {
                _this.props.onTitleTouchTap(event);
              }
            }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
          }
            iconElementRight={
                <function IconButton() {
                    var _ref;
                
                    var _temp, _this, _ret;
                
                    (0, _classCallCheck3.default)(this, IconButton);
                
                    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                      args[_key] = arguments[_key];
                    }
                
                    return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = IconButton.__proto__ || (0, _getPrototypeOf2.default)(IconButton)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
                      tooltipShown: false
                    }, _this.handleBlur = function (event) {
                      _this.hideTooltip();
                      if (_this.props.onBlur) _this.props.onBlur(event);
                    }, _this.handleFocus = function (event) {
                      _this.showTooltip();
                      if (_this.props.onFocus) _this.props.onFocus(event);
                    }, _this.handleMouseLeave = function (event) {
                      if (!_this.refs.button.isKeyboardFocused()) _this.hideTooltip();
                      if (_this.props.onMouseLeave) _this.props.onMouseLeave(event);
                    }, _this.handleMouseOut = function (event) {
                      if (_this.props.disabled) _this.hideTooltip();
                      if (_this.props.onMouseOut) _this.props.onMouseOut(event);
                    }, _this.handleMouseEnter = function (event) {
                      _this.showTooltip();
                      if (_this.props.onMouseEnter) _this.props.onMouseEnter(event);
                    }, _this.handleKeyboardFocus = function (event, keyboardFocused) {
                      if (keyboardFocused && !_this.props.disabled) {
                        _this.showTooltip();
                        if (_this.props.onFocus) _this.props.onFocus(event);
                      } else {
                        _this.hideTooltip();
                        if (_this.props.onBlur) _this.props.onBlur(event);
                      }
                
                      if (_this.props.onKeyboardFocus) {
                        _this.props.onKeyboardFocus(event, keyboardFocused);
                      }
                    }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
                  }
                    disableTouchRipple={false}
                    disabled={false}
                    iconStyle={
                        Object {
                            "height": 36,
                            "padding": 6,
                            "width": 36,
                          }
                    }
                    style={
                        Object {
                            "height": 40,
                            "padding": 0,
                            "width": 50,
                          }
                    }
                    tooltipPosition="bottom-center"
                    touch={false}>
                    <function _class() {
                            _classCallCheck(this, _class);
                    
                            return _possibleConstructorReturn(this, _Component.apply(this, arguments));
                          } />
                </function IconButton() {
                    var _ref;
                
                    var _temp, _this, _ret;
                
                    (0, _classCallCheck3.default)(this, IconButton);
                
                    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                      args[_key] = arguments[_key];
                    }
                
                    return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = IconButton.__proto__ || (0, _getPrototypeOf2.default)(IconButton)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
                      tooltipShown: false
                    }, _this.handleBlur = function (event) {
                      _this.hideTooltip();
                      if (_this.props.onBlur) _this.props.onBlur(event);
                    }, _this.handleFocus = function (event) {
                      _this.showTooltip();
                      if (_this.props.onFocus) _this.props.onFocus(event);
                    }, _this.handleMouseLeave = function (event) {
                      if (!_this.refs.button.isKeyboardFocused()) _this.hideTooltip();
                      if (_this.props.onMouseLeave) _this.props.onMouseLeave(event);
                    }, _this.handleMouseOut = function (event) {
                      if (_this.props.disabled) _this.hideTooltip();
                      if (_this.props.onMouseOut) _this.props.onMouseOut(event);
                    }, _this.handleMouseEnter = function (event) {
                      _this.showTooltip();
                      if (_this.props.onMouseEnter) _this.props.onMouseEnter(event);
                    }, _this.handleKeyboardFocus = function (event, keyboardFocused) {
                      if (keyboardFocused && !_this.props.disabled) {
                        _this.showTooltip();
                        if (_this.props.onFocus) _this.props.onFocus(event);
                      } else {
                        _this.hideTooltip();
                        if (_this.props.onBlur) _this.props.onBlur(event);
                      }
                
                      if (_this.props.onKeyboardFocus) {
                        _this.props.onKeyboardFocus(event, keyboardFocused);
                      }
                    }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
                  }>
            }
            onRightIconButtonTouchTap={[Function]}
            showMenuIconButton={false}
            style={
                Object {
                    "boxShadow": "none",
                  }
            }
            title="User Listing"
            zDepth={1} />
        <article
            style={
                Object {
                    "padding": 15,
                  }
            }>
            <function SelectField() {
                (0, _classCallCheck3.default)(this, SelectField);
                return (0, _possibleConstructorReturn3.default)(this, (SelectField.__proto__ || (0, _getPrototypeOf2.default)(SelectField)).apply(this, arguments));
              }
                autoWidth={false}
                disabled={false}
                fullWidth={false}
                hintText="Select Site"
                onChange={[Function]}
                value={null}>
                <function MenuItem() {
                    var _ref;
                
                    var _temp, _this, _ret;
                
                    (0, _classCallCheck3.default)(this, MenuItem);
                
                    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                      args[_key] = arguments[_key];
                    }
                
                    return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = MenuItem.__proto__ || (0, _getPrototypeOf2.default)(MenuItem)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
                      open: false
                    }, _this.cloneMenuItem = function (item) {
                      return _react2.default.cloneElement(item, {
                        onTouchTap: function onTouchTap(event) {
                          if (!item.props.menuItems) {
                            _this.handleRequestClose();
                          }
                
                          if (item.props.onTouchTap) {
                            item.props.onTouchTap(event);
                          }
                        }
                      });
                    }, _this.handleTouchTap = function (event) {
                      event.preventDefault();
                
                      _this.setState({
                        open: true,
                        anchorEl: _reactDom2.default.findDOMNode(_this)
                      });
                
                      if (_this.props.onTouchTap) {
                        _this.props.onTouchTap(event);
                      }
                    }, _this.handleRequestClose = function () {
                      _this.setState({
                        open: false,
                        anchorEl: null
                      });
                    }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
                  }
                    checked={false}
                    desktop={false}
                    disabled={false}
                    focusState="none"
                    insetChildren={false}
                    primaryText="Universal App"
                    value="abc" />
                <function MenuItem() {
                    var _ref;
                
                    var _temp, _this, _ret;
                
                    (0, _classCallCheck3.default)(this, MenuItem);
                
                    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                      args[_key] = arguments[_key];
                    }
                
                    return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = MenuItem.__proto__ || (0, _getPrototypeOf2.default)(MenuItem)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
                      open: false
                    }, _this.cloneMenuItem = function (item) {
                      return _react2.default.cloneElement(item, {
                        onTouchTap: function onTouchTap(event) {
                          if (!item.props.menuItems) {
                            _this.handleRequestClose();
                          }
                
                          if (item.props.onTouchTap) {
                            item.props.onTouchTap(event);
                          }
                        }
                      });
                    }, _this.handleTouchTap = function (event) {
                      event.preventDefault();
                
                      _this.setState({
                        open: true,
                        anchorEl: _reactDom2.default.findDOMNode(_this)
                      });
                
                      if (_this.props.onTouchTap) {
                        _this.props.onTouchTap(event);
                      }
                    }, _this.handleRequestClose = function () {
                      _this.setState({
                        open: false,
                        anchorEl: null
                      });
                    }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
                  }
                    checked={false}
                    desktop={false}
                    disabled={false}
                    focusState="none"
                    insetChildren={false}
                    primaryText="Gales Sales"
                    value="gales" />
            </function SelectField() {
                (0, _classCallCheck3.default)(this, SelectField);
                return (0, _possibleConstructorReturn3.default)(this, (SelectField.__proto__ || (0, _getPrototypeOf2.default)(SelectField)).apply(this, arguments));
              }>
            <br />
            <br />
            <function GraphQL(props, context) {
                            _super.call(this, props, context);
                            this.data = {};
                            this.version = version;
                            this.client = context.client;
                            invariant(!!this.client, "Could not find "client" in the context of " +
                                (""" + graphQLDisplayName + "". ") +
                                "Wrap the root component in an <ApolloProvider>");
                            this.store = this.client.store;
                            this.type = operation.type;
                            if (mapPropsToSkip(props))
                                return;
                            this.setInitialProps();
                        } />
            <function GraphQL(props, context) {
                            _super.call(this, props, context);
                            this.data = {};
                            this.version = version;
                            this.client = context.client;
                            invariant(!!this.client, "Could not find "client" in the context of " +
                                (""" + graphQLDisplayName + "". ") +
                                "Wrap the root component in an <ApolloProvider>");
                            this.store = this.client.store;
                            this.type = operation.type;
                            if (mapPropsToSkip(props))
                                return;
                            this.setInitialProps();
                        }
                type="personal" />
        </article>
    </function Paper() {
        (0, _classCallCheck3.default)(this, Paper);
        return (0, _possibleConstructorReturn3.default)(this, (Paper.__proto__ || (0, _getPrototypeOf2.default)(Paper)).apply(this, arguments));
      }>
</section>,
  "nodes": Array [
    <section
      className="App-container">
      <function Paper() {
          (0, _classCallCheck3.default)(this, Paper);
          return (0, _possibleConstructorReturn3.default)(this, (Paper.__proto__ || (0, _getPrototypeOf2.default)(Paper)).apply(this, arguments));
        }
            circle={false}
            rounded={true}
            transitionEnabled={true}
            zDepth={1}>
            <function AppBar() {
                var _ref;
            
                var _temp, _this, _ret;
            
                (0, _classCallCheck3.default)(this, AppBar);
            
                for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                  args[_key] = arguments[_key];
                }
            
                return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = AppBar.__proto__ || (0, _getPrototypeOf2.default)(AppBar)).call.apply(_ref, [this].concat(args))), _this), _this.handleTouchTapLeftIconButton = function (event) {
                  if (_this.props.onLeftIconButtonTouchTap) {
                    _this.props.onLeftIconButtonTouchTap(event);
                  }
                }, _this.handleTouchTapRightIconButton = function (event) {
                  if (_this.props.onRightIconButtonTouchTap) {
                    _this.props.onRightIconButtonTouchTap(event);
                  }
                }, _this.handleTitleTouchTap = function (event) {
                  if (_this.props.onTitleTouchTap) {
                    _this.props.onTitleTouchTap(event);
                  }
                }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
              }
                  iconElementRight={
                        <function IconButton() {
                            var _ref;
                        
                            var _temp, _this, _ret;
                        
                            (0, _classCallCheck3.default)(this, IconButton);
                        
                            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                              args[_key] = arguments[_key];
                            }
                        
                            return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = IconButton.__proto__ || (0, _getPrototypeOf2.default)(IconButton)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
                              tooltipShown: false
                            }, _this.handleBlur = function (event) {
                              _this.hideTooltip();
                              if (_this.props.onBlur) _this.props.onBlur(event);
                            }, _this.handleFocus = function (event) {
                              _this.showTooltip();
                              if (_this.props.onFocus) _this.props.onFocus(event);
                            }, _this.handleMouseLeave = function (event) {
                              if (!_this.refs.button.isKeyboardFocused()) _this.hideTooltip();
                              if (_this.props.onMouseLeave) _this.props.onMouseLeave(event);
                            }, _this.handleMouseOut = function (event) {
                              if (_this.props.disabled) _this.hideTooltip();
                              if (_this.props.onMouseOut) _this.props.onMouseOut(event);
                            }, _this.handleMouseEnter = function (event) {
                              _this.showTooltip();
                              if (_this.props.onMouseEnter) _this.props.onMouseEnter(event);
                            }, _this.handleKeyboardFocus = function (event, keyboardFocused) {
                              if (keyboardFocused && !_this.props.disabled) {
                                _this.showTooltip();
                                if (_this.props.onFocus) _this.props.onFocus(event);
                              } else {
                                _this.hideTooltip();
                                if (_this.props.onBlur) _this.props.onBlur(event);
                              }
                        
                              if (_this.props.onKeyboardFocus) {
                                _this.props.onKeyboardFocus(event, keyboardFocused);
                              }
                            }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
                          }
                              disableTouchRipple={false}
                              disabled={false}
                              iconStyle={
                                    Object {
                                          "height": 36,
                                          "padding": 6,
                                          "width": 36,
                                        }
                              }
                              style={
                                    Object {
                                          "height": 40,
                                          "padding": 0,
                                          "width": 50,
                                        }
                              }
                              tooltipPosition="bottom-center"
                              touch={false}>
                              <function _class() {
                                      _classCallCheck(this, _class);
                              
                                      return _possibleConstructorReturn(this, _Component.apply(this, arguments));
                                    } />
                        </function IconButton() {
                            var _ref;
                        
                            var _temp, _this, _ret;
                        
                            (0, _classCallCheck3.default)(this, IconButton);
                        
                            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                              args[_key] = arguments[_key];
                            }
                        
                            return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = IconButton.__proto__ || (0, _getPrototypeOf2.default)(IconButton)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
                              tooltipShown: false
                            }, _this.handleBlur = function (event) {
                              _this.hideTooltip();
                              if (_this.props.onBlur) _this.props.onBlur(event);
                            }, _this.handleFocus = function (event) {
                              _this.showTooltip();
                              if (_this.props.onFocus) _this.props.onFocus(event);
                            }, _this.handleMouseLeave = function (event) {
                              if (!_this.refs.button.isKeyboardFocused()) _this.hideTooltip();
                              if (_this.props.onMouseLeave) _this.props.onMouseLeave(event);
                            }, _this.handleMouseOut = function (event) {
                              if (_this.props.disabled) _this.hideTooltip();
                              if (_this.props.onMouseOut) _this.props.onMouseOut(event);
                            }, _this.handleMouseEnter = function (event) {
                              _this.showTooltip();
                              if (_this.props.onMouseEnter) _this.props.onMouseEnter(event);
                            }, _this.handleKeyboardFocus = function (event, keyboardFocused) {
                              if (keyboardFocused && !_this.props.disabled) {
                                _this.showTooltip();
                                if (_this.props.onFocus) _this.props.onFocus(event);
                              } else {
                                _this.hideTooltip();
                                if (_this.props.onBlur) _this.props.onBlur(event);
                              }
                        
                              if (_this.props.onKeyboardFocus) {
                                _this.props.onKeyboardFocus(event, keyboardFocused);
                              }
                            }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
                          }>
                  }
                  onRightIconButtonTouchTap={[Function]}
                  showMenuIconButton={false}
                  style={
                        Object {
                              "boxShadow": "none",
                            }
                  }
                  title="User Listing"
                  zDepth={1} />
            <article
                  style={
                        Object {
                              "padding": 15,
                            }
                  }>
                  <function SelectField() {
                      (0, _classCallCheck3.default)(this, SelectField);
                      return (0, _possibleConstructorReturn3.default)(this, (SelectField.__proto__ || (0, _getPrototypeOf2.default)(SelectField)).apply(this, arguments));
                    }
                        autoWidth={false}
                        disabled={false}
                        fullWidth={false}
                        hintText="Select Site"
                        onChange={[Function]}
                        value={null}>
                        <function MenuItem() {
                            var _ref;
                        
                            var _temp, _this, _ret;
                        
                            (0, _classCallCheck3.default)(this, MenuItem);
                        
                            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                              args[_key] = arguments[_key];
                            }
                        
                            return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = MenuItem.__proto__ || (0, _getPrototypeOf2.default)(MenuItem)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
                              open: false
                            }, _this.cloneMenuItem = function (item) {
                              return _react2.default.cloneElement(item, {
                                onTouchTap: function onTouchTap(event) {
                                  if (!item.props.menuItems) {
                                    _this.handleRequestClose();
                                  }
                        
                                  if (item.props.onTouchTap) {
                                    item.props.onTouchTap(event);
                                  }
                                }
                              });
                            }, _this.handleTouchTap = function (event) {
                              event.preventDefault();
                        
                              _this.setState({
                                open: true,
                                anchorEl: _reactDom2.default.findDOMNode(_this)
                              });
                        
                              if (_this.props.onTouchTap) {
                                _this.props.onTouchTap(event);
                              }
                            }, _this.handleRequestClose = function () {
                              _this.setState({
                                open: false,
                                anchorEl: null
                              });
                            }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
                          }
                              checked={false}
                              desktop={false}
                              disabled={false}
                              focusState="none"
                              insetChildren={false}
                              primaryText="Universal App"
                              value="abc" />
                        <function MenuItem() {
                            var _ref;
                        
                            var _temp, _this, _ret;
                        
                            (0, _classCallCheck3.default)(this, MenuItem);
                        
                            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                              args[_key] = arguments[_key];
                            }
                        
                            return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = MenuItem.__proto__ || (0, _getPrototypeOf2.default)(MenuItem)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
                              open: false
                            }, _this.cloneMenuItem = function (item) {
                              return _react2.default.cloneElement(item, {
                                onTouchTap: function onTouchTap(event) {
                                  if (!item.props.menuItems) {
                                    _this.handleRequestClose();
                                  }
                        
                                  if (item.props.onTouchTap) {
                                    item.props.onTouchTap(event);
                                  }
                                }
                              });
                            }, _this.handleTouchTap = function (event) {
                              event.preventDefault();
                        
                              _this.setState({
                                open: true,
                                anchorEl: _reactDom2.default.findDOMNode(_this)
                              });
                        
                              if (_this.props.onTouchTap) {
                                _this.props.onTouchTap(event);
                              }
                            }, _this.handleRequestClose = function () {
                              _this.setState({
                                open: false,
                                anchorEl: null
                              });
                            }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
                          }
                              checked={false}
                              desktop={false}
                              disabled={false}
                              focusState="none"
                              insetChildren={false}
                              primaryText="Gales Sales"
                              value="gales" />
                  </function SelectField() {
                      (0, _classCallCheck3.default)(this, SelectField);
                      return (0, _possibleConstructorReturn3.default)(this, (SelectField.__proto__ || (0, _getPrototypeOf2.default)(SelectField)).apply(this, arguments));
                    }>
                  <br />
                  <br />
                  <function GraphQL(props, context) {
                                  _super.call(this, props, context);
                                  this.data = {};
                                  this.version = version;
                                  this.client = context.client;
                                  invariant(!!this.client, "Could not find "client" in the context of " +
                                      (""" + graphQLDisplayName + "". ") +
                                      "Wrap the root component in an <ApolloProvider>");
                                  this.store = this.client.store;
                                  this.type = operation.type;
                                  if (mapPropsToSkip(props))
                                      return;
                                  this.setInitialProps();
                              } />
                  <function GraphQL(props, context) {
                                  _super.call(this, props, context);
                                  this.data = {};
                                  this.version = version;
                                  this.client = context.client;
                                  invariant(!!this.client, "Could not find "client" in the context of " +
                                      (""" + graphQLDisplayName + "". ") +
                                      "Wrap the root component in an <ApolloProvider>");
                                  this.store = this.client.store;
                                  this.type = operation.type;
                                  if (mapPropsToSkip(props))
                                      return;
                                  this.setInitialProps();
                              }
                        type="personal" />
            </article>
      </function Paper() {
          (0, _classCallCheck3.default)(this, Paper);
          return (0, _possibleConstructorReturn3.default)(this, (Paper.__proto__ || (0, _getPrototypeOf2.default)(Paper)).apply(this, arguments));
        }>
</section>,
  ],
  "options": Object {},
  "renderer": ReactShallowRenderer {
    "_instance": ShallowComponentWrapper {
      "_calledComponentWillUnmount": false,
      "_compositeType": 0,
      "_context": Object {},
      "_currentElement": <class User extends /* istanbul ignore next */_react.Component {

  constructor(props) {
    super(props); /* istanbul ignore next */this.






    _onAddUser = () => {
      console.log('_onAddUser:', '_onAddUser');
    }; /* istanbul ignore next */this.

    _onSelectSite = (e, idx, val) => {
      this.setState({ siteID: val });
    }; /* istanbul ignore next */this.

    handleChange = event => {
      console.log('event:', event.target.value);
      this.setState({
        firstName: event.target.value });

    };this.state = { siteID: null, firstName: '' };}

  render() {

    // const { children } = this.props

    const ContactsQuery = /* istanbul ignore next */_graphqlTag2.default\`
      query ContactsQuery($type: String) {
        fetchContacts(type: $type) {
          _id
          name
          type
        }
      }\`;

    const CREATE_CONTACT_MUTATION = /* istanbul ignore next */_graphqlTag2.default\`
      mutation addContact($name: String) {
        createContact(name: $name, type: "personal") {
          _id
          name
          type
        }
      }\`;

    const updateContacts = {
      Contact: (prev, /* istanbul ignore next */_ref) => {/* istanbul ignore next */let mutationResult = _ref.mutationResult;
        const newContact = mutationResult.data.createContact;
        return (/* istanbul ignore next */(0, _reactAddonsUpdate2.default)(prev, {
            entry: { contacts: { $unshift: [newContact] } } }));

      } };


    const withList = /* istanbul ignore next */(0, _reactApollo.graphql)(ContactsQuery, {
      options: ( /* istanbul ignore next */_ref2) => /* istanbul ignore next */{let type = _ref2.type;return { variables: { type } };},
      props: ( /* istanbul ignore next */_ref3) => {/* istanbul ignore next */let ownProps = _ref3.ownProps; /* istanbul ignore next */let data = _ref3.data;
        if (data.loading) return { isLoading: true };
        if (data.error) return { hasErrors: true };
        return { contacts: data.fetchContacts };
      } });


    const ContactList = props => {
      if (props.isLoading) {
        return (/* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'h2', /* istanbul ignore next */{ __source: { fileName: _jsxFileName, lineNumber: 98 }, __self: this }, /* istanbul ignore next */'Loading...'));
      }
      let rows = props.contacts.map(s => {
        return (
          /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{
              className: 'list-table-row',
              key: s._id, __source: { fileName: _jsxFileName, lineNumber: 102 }, __self: this },

            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'list-table-cell', __source: { fileName: _jsxFileName, lineNumber: 106 }, __self: this }, s._id),
            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'list-table-cell', __source: { fileName: _jsxFileName, lineNumber: 107 }, __self: this }, s.name),
            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'list-table-cell', __source: { fileName: _jsxFileName, lineNumber: 108 }, __self: this }, s.type)));


      });
      return (
        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ __source: { fileName: _jsxFileName, lineNumber: 113 }, __self: this }, rows));

    };

    const ContactsWithView = withList(ContactList);

    const NewEntry = props => {
      return (
        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ __source: { fileName: _jsxFileName, lineNumber: 121 }, __self: this },
          /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_TextField2.default, /* istanbul ignore next */{
            floatingLabelText: 'First Name',
            onChange: this.handleChange
            // onBlur={() => this._validate('email')}
            // ref='email'
            // type='email'
            , value: this.state.firstName, __source: { fileName: _jsxFileName, lineNumber: 122 }, __self: this }),

          /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ onClick: () => props.submit({ name: this.state.firstName }), __source: { fileName: _jsxFileName, lineNumber: 130 }, __self: this }, /* istanbul ignore next */'Click me')));


    };

    const NewEntryWithData = /* istanbul ignore next */(0, _reactApollo.graphql)(CREATE_CONTACT_MUTATION, {
      props: ( /* istanbul ignore next */_ref4) => /* istanbul ignore next */{let ownProps = _ref4.ownProps;let mutate = _ref4.mutate;return {
          submit: ( /* istanbul ignore next */_ref5) => /* istanbul ignore next */{let name = _ref5.name;return mutate({ variables: { name } });} };} })(

    NewEntry);


    return (

      /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'section', /* istanbul ignore next */{ className: 'App-container', __source: { fileName: _jsxFileName, lineNumber: 144 }, __self: this },
        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_Paper2.default, /* istanbul ignore next */{ __source: { fileName: _jsxFileName, lineNumber: 145 }, __self: this },
          /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_AppBar2.default, /* istanbul ignore next */{
            iconElementRight: /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_IconButton2.default, /* istanbul ignore next */{ iconStyle: /* istanbul ignore next */_styles.styles.appBarEleIconStyle, style: /* istanbul ignore next */_styles.styles.appBarEleStyle, __source: { fileName: _jsxFileName, lineNumber: 147 }, __self: this }, /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_add2.default, /* istanbul ignore next */{ __source: { fileName: _jsxFileName, lineNumber: 147 }, __self: this })),
            onRightIconButtonTouchTap: () => this._onAddUser(),
            showMenuIconButton: false,
            style: /* istanbul ignore next */_styles.styles.appBar,
            title: 'User Listing', __source: { fileName: _jsxFileName, lineNumber: 146 }, __self: this }),

          /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'article', /* istanbul ignore next */{ style: /* istanbul ignore next */_styles.styles.paper, __source: { fileName: _jsxFileName, lineNumber: 153 }, __self: this },
            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_SelectField2.default, /* istanbul ignore next */{
                hintText: 'Select Site',
                onChange: this._onSelectSite,
                value: this.state.siteID, __source: { fileName: _jsxFileName, lineNumber: 154 }, __self: this },

              sites.map(s => /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_MenuItem2.default, /* istanbul ignore next */{ key: s.id, value: s.id, primaryText: s.name, __source: { fileName: _jsxFileName, lineNumber: 159 }, __self: this }))),

            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'br', /* istanbul ignore next */{ __source: { fileName: _jsxFileName, lineNumber: 161 }, __self: this }), /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'br', /* istanbul ignore next */{ __source: { fileName: _jsxFileName, lineNumber: 161 }, __self: this }),
            /* istanbul ignore next */_react2.default.createElement(NewEntryWithData, /* istanbul ignore next */{ __source: { fileName: _jsxFileName, lineNumber: 162 }, __self: this }),

            /* istanbul ignore next */_react2.default.createElement(ContactsWithView, /* istanbul ignore next */{ type: 'personal', __source: { fileName: _jsxFileName, lineNumber: 164 }, __self: this })))));






  }} />,
      "_debugID": 1,
      "_hostContainerInfo": null,
      "_hostParent": null,
      "_instance": User {
        "_onAddUser": [Function],
        "_onSelectSite": [Function],
        "_reactInternalInstance": [Circular],
        "context": Object {},
        "handleChange": [Function],
        "props": Object {},
        "refs": Object {},
        "state": Object {
          "firstName": "",
          "siteID": null,
        },
        "updater": Object {
          "enqueueCallback": [Function],
          "enqueueCallbackInternal": [Function],
          "enqueueElementInternal": [Function],
          "enqueueForceUpdate": [Function],
          "enqueueReplaceState": [Function],
          "enqueueSetState": [Function],
          "isMounted": [Function],
          "validateCallback": [Function],
        },
      },
      "_mountOrder": 1,
      "_pendingCallbacks": null,
      "_pendingElement": null,
      "_pendingForceUpdate": false,
      "_pendingReplaceState": false,
      "_pendingStateQueue": null,
      "_renderedComponent": Object {
        "_currentElement": <section
          className="App-container">
          <function Paper() {
              (0, _classCallCheck3.default)(this, Paper);
              return (0, _possibleConstructorReturn3.default)(this, (Paper.__proto__ || (0, _getPrototypeOf2.default)(Paper)).apply(this, arguments));
            }
                    circle={false}
                    rounded={true}
                    transitionEnabled={true}
                    zDepth={1}>
                    <function AppBar() {
                        var _ref;
                    
                        var _temp, _this, _ret;
                    
                        (0, _classCallCheck3.default)(this, AppBar);
                    
                        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                          args[_key] = arguments[_key];
                        }
                    
                        return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = AppBar.__proto__ || (0, _getPrototypeOf2.default)(AppBar)).call.apply(_ref, [this].concat(args))), _this), _this.handleTouchTapLeftIconButton = function (event) {
                          if (_this.props.onLeftIconButtonTouchTap) {
                            _this.props.onLeftIconButtonTouchTap(event);
                          }
                        }, _this.handleTouchTapRightIconButton = function (event) {
                          if (_this.props.onRightIconButtonTouchTap) {
                            _this.props.onRightIconButtonTouchTap(event);
                          }
                        }, _this.handleTitleTouchTap = function (event) {
                          if (_this.props.onTitleTouchTap) {
                            _this.props.onTitleTouchTap(event);
                          }
                        }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
                      }
                              iconElementRight={
                                        <function IconButton() {
                                            var _ref;
                                        
                                            var _temp, _this, _ret;
                                        
                                            (0, _classCallCheck3.default)(this, IconButton);
                                        
                                            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                                              args[_key] = arguments[_key];
                                            }
                                        
                                            return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = IconButton.__proto__ || (0, _getPrototypeOf2.default)(IconButton)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
                                              tooltipShown: false
                                            }, _this.handleBlur = function (event) {
                                              _this.hideTooltip();
                                              if (_this.props.onBlur) _this.props.onBlur(event);
                                            }, _this.handleFocus = function (event) {
                                              _this.showTooltip();
                                              if (_this.props.onFocus) _this.props.onFocus(event);
                                            }, _this.handleMouseLeave = function (event) {
                                              if (!_this.refs.button.isKeyboardFocused()) _this.hideTooltip();
                                              if (_this.props.onMouseLeave) _this.props.onMouseLeave(event);
                                            }, _this.handleMouseOut = function (event) {
                                              if (_this.props.disabled) _this.hideTooltip();
                                              if (_this.props.onMouseOut) _this.props.onMouseOut(event);
                                            }, _this.handleMouseEnter = function (event) {
                                              _this.showTooltip();
                                              if (_this.props.onMouseEnter) _this.props.onMouseEnter(event);
                                            }, _this.handleKeyboardFocus = function (event, keyboardFocused) {
                                              if (keyboardFocused && !_this.props.disabled) {
                                                _this.showTooltip();
                                                if (_this.props.onFocus) _this.props.onFocus(event);
                                              } else {
                                                _this.hideTooltip();
                                                if (_this.props.onBlur) _this.props.onBlur(event);
                                              }
                                        
                                              if (_this.props.onKeyboardFocus) {
                                                _this.props.onKeyboardFocus(event, keyboardFocused);
                                              }
                                            }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
                                          }
                                                  disableTouchRipple={false}
                                                  disabled={false}
                                                  iconStyle={
                                                            Object {
                                                                      "height": 36,
                                                                      "padding": 6,
                                                                      "width": 36,
                                                                    }
                                                  }
                                                  style={
                                                            Object {
                                                                      "height": 40,
                                                                      "padding": 0,
                                                                      "width": 50,
                                                                    }
                                                  }
                                                  tooltipPosition="bottom-center"
                                                  touch={false}>
                                                  <function _class() {
                                                          _classCallCheck(this, _class);
                                                  
                                                          return _possibleConstructorReturn(this, _Component.apply(this, arguments));
                                                        } />
                                        </function IconButton() {
                                            var _ref;
                                        
                                            var _temp, _this, _ret;
                                        
                                            (0, _classCallCheck3.default)(this, IconButton);
                                        
                                            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                                              args[_key] = arguments[_key];
                                            }
                                        
                                            return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = IconButton.__proto__ || (0, _getPrototypeOf2.default)(IconButton)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
                                              tooltipShown: false
                                            }, _this.handleBlur = function (event) {
                                              _this.hideTooltip();
                                              if (_this.props.onBlur) _this.props.onBlur(event);
                                            }, _this.handleFocus = function (event) {
                                              _this.showTooltip();
                                              if (_this.props.onFocus) _this.props.onFocus(event);
                                            }, _this.handleMouseLeave = function (event) {
                                              if (!_this.refs.button.isKeyboardFocused()) _this.hideTooltip();
                                              if (_this.props.onMouseLeave) _this.props.onMouseLeave(event);
                                            }, _this.handleMouseOut = function (event) {
                                              if (_this.props.disabled) _this.hideTooltip();
                                              if (_this.props.onMouseOut) _this.props.onMouseOut(event);
                                            }, _this.handleMouseEnter = function (event) {
                                              _this.showTooltip();
                                              if (_this.props.onMouseEnter) _this.props.onMouseEnter(event);
                                            }, _this.handleKeyboardFocus = function (event, keyboardFocused) {
                                              if (keyboardFocused && !_this.props.disabled) {
                                                _this.showTooltip();
                                                if (_this.props.onFocus) _this.props.onFocus(event);
                                              } else {
                                                _this.hideTooltip();
                                                if (_this.props.onBlur) _this.props.onBlur(event);
                                              }
                                        
                                              if (_this.props.onKeyboardFocus) {
                                                _this.props.onKeyboardFocus(event, keyboardFocused);
                                              }
                                            }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
                                          }>
                              }
                              onRightIconButtonTouchTap={[Function]}
                              showMenuIconButton={false}
                              style={
                                        Object {
                                                  "boxShadow": "none",
                                                }
                              }
                              title="User Listing"
                              zDepth={1} />
                    <article
                              style={
                                        Object {
                                                  "padding": 15,
                                                }
                              }>
                              <function SelectField() {
                                  (0, _classCallCheck3.default)(this, SelectField);
                                  return (0, _possibleConstructorReturn3.default)(this, (SelectField.__proto__ || (0, _getPrototypeOf2.default)(SelectField)).apply(this, arguments));
                                }
                                        autoWidth={false}
                                        disabled={false}
                                        fullWidth={false}
                                        hintText="Select Site"
                                        onChange={[Function]}
                                        value={null}>
                                        <function MenuItem() {
                                            var _ref;
                                        
                                            var _temp, _this, _ret;
                                        
                                            (0, _classCallCheck3.default)(this, MenuItem);
                                        
                                            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                                              args[_key] = arguments[_key];
                                            }
                                        
                                            return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = MenuItem.__proto__ || (0, _getPrototypeOf2.default)(MenuItem)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
                                              open: false
                                            }, _this.cloneMenuItem = function (item) {
                                              return _react2.default.cloneElement(item, {
                                                onTouchTap: function onTouchTap(event) {
                                                  if (!item.props.menuItems) {
                                                    _this.handleRequestClose();
                                                  }
                                        
                                                  if (item.props.onTouchTap) {
                                                    item.props.onTouchTap(event);
                                                  }
                                                }
                                              });
                                            }, _this.handleTouchTap = function (event) {
                                              event.preventDefault();
                                        
                                              _this.setState({
                                                open: true,
                                                anchorEl: _reactDom2.default.findDOMNode(_this)
                                              });
                                        
                                              if (_this.props.onTouchTap) {
                                                _this.props.onTouchTap(event);
                                              }
                                            }, _this.handleRequestClose = function () {
                                              _this.setState({
                                                open: false,
                                                anchorEl: null
                                              });
                                            }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
                                          }
                                                  checked={false}
                                                  desktop={false}
                                                  disabled={false}
                                                  focusState="none"
                                                  insetChildren={false}
                                                  primaryText="Universal App"
                                                  value="abc" />
                                        <function MenuItem() {
                                            var _ref;
                                        
                                            var _temp, _this, _ret;
                                        
                                            (0, _classCallCheck3.default)(this, MenuItem);
                                        
                                            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                                              args[_key] = arguments[_key];
                                            }
                                        
                                            return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = MenuItem.__proto__ || (0, _getPrototypeOf2.default)(MenuItem)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
                                              open: false
                                            }, _this.cloneMenuItem = function (item) {
                                              return _react2.default.cloneElement(item, {
                                                onTouchTap: function onTouchTap(event) {
                                                  if (!item.props.menuItems) {
                                                    _this.handleRequestClose();
                                                  }
                                        
                                                  if (item.props.onTouchTap) {
                                                    item.props.onTouchTap(event);
                                                  }
                                                }
                                              });
                                            }, _this.handleTouchTap = function (event) {
                                              event.preventDefault();
                                        
                                              _this.setState({
                                                open: true,
                                                anchorEl: _reactDom2.default.findDOMNode(_this)
                                              });
                                        
                                              if (_this.props.onTouchTap) {
                                                _this.props.onTouchTap(event);
                                              }
                                            }, _this.handleRequestClose = function () {
                                              _this.setState({
                                                open: false,
                                                anchorEl: null
                                              });
                                            }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
                                          }
                                                  checked={false}
                                                  desktop={false}
                                                  disabled={false}
                                                  focusState="none"
                                                  insetChildren={false}
                                                  primaryText="Gales Sales"
                                                  value="gales" />
                              </function SelectField() {
                                  (0, _classCallCheck3.default)(this, SelectField);
                                  return (0, _possibleConstructorReturn3.default)(this, (SelectField.__proto__ || (0, _getPrototypeOf2.default)(SelectField)).apply(this, arguments));
                                }>
                              <br />
                              <br />
                              <function GraphQL(props, context) {
                                              _super.call(this, props, context);
                                              this.data = {};
                                              this.version = version;
                                              this.client = context.client;
                                              invariant(!!this.client, "Could not find "client" in the context of " +
                                                  (""" + graphQLDisplayName + "". ") +
                                                  "Wrap the root component in an <ApolloProvider>");
                                              this.store = this.client.store;
                                              this.type = operation.type;
                                              if (mapPropsToSkip(props))
                                                  return;
                                              this.setInitialProps();
                                          } />
                              <function GraphQL(props, context) {
                                              _super.call(this, props, context);
                                              this.data = {};
                                              this.version = version;
                                              this.client = context.client;
                                              invariant(!!this.client, "Could not find "client" in the context of " +
                                                  (""" + graphQLDisplayName + "". ") +
                                                  "Wrap the root component in an <ApolloProvider>");
                                              this.store = this.client.store;
                                              this.type = operation.type;
                                              if (mapPropsToSkip(props))
                                                  return;
                                              this.setInitialProps();
                                          }
                                        type="personal" />
                    </article>
          </function Paper() {
              (0, _classCallCheck3.default)(this, Paper);
              return (0, _possibleConstructorReturn3.default)(this, (Paper.__proto__ || (0, _getPrototypeOf2.default)(Paper)).apply(this, arguments));
            }>
</section>,
        "_debugID": 2,
        "_renderedOutput": <section
          className="App-container">
          <function Paper() {
              (0, _classCallCheck3.default)(this, Paper);
              return (0, _possibleConstructorReturn3.default)(this, (Paper.__proto__ || (0, _getPrototypeOf2.default)(Paper)).apply(this, arguments));
            }
                    circle={false}
                    rounded={true}
                    transitionEnabled={true}
                    zDepth={1}>
                    <function AppBar() {
                        var _ref;
                    
                        var _temp, _this, _ret;
                    
                        (0, _classCallCheck3.default)(this, AppBar);
                    
                        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                          args[_key] = arguments[_key];
                        }
                    
                        return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = AppBar.__proto__ || (0, _getPrototypeOf2.default)(AppBar)).call.apply(_ref, [this].concat(args))), _this), _this.handleTouchTapLeftIconButton = function (event) {
                          if (_this.props.onLeftIconButtonTouchTap) {
                            _this.props.onLeftIconButtonTouchTap(event);
                          }
                        }, _this.handleTouchTapRightIconButton = function (event) {
                          if (_this.props.onRightIconButtonTouchTap) {
                            _this.props.onRightIconButtonTouchTap(event);
                          }
                        }, _this.handleTitleTouchTap = function (event) {
                          if (_this.props.onTitleTouchTap) {
                            _this.props.onTitleTouchTap(event);
                          }
                        }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
                      }
                              iconElementRight={
                                        <function IconButton() {
                                            var _ref;
                                        
                                            var _temp, _this, _ret;
                                        
                                            (0, _classCallCheck3.default)(this, IconButton);
                                        
                                            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                                              args[_key] = arguments[_key];
                                            }
                                        
                                            return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = IconButton.__proto__ || (0, _getPrototypeOf2.default)(IconButton)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
                                              tooltipShown: false
                                            }, _this.handleBlur = function (event) {
                                              _this.hideTooltip();
                                              if (_this.props.onBlur) _this.props.onBlur(event);
                                            }, _this.handleFocus = function (event) {
                                              _this.showTooltip();
                                              if (_this.props.onFocus) _this.props.onFocus(event);
                                            }, _this.handleMouseLeave = function (event) {
                                              if (!_this.refs.button.isKeyboardFocused()) _this.hideTooltip();
                                              if (_this.props.onMouseLeave) _this.props.onMouseLeave(event);
                                            }, _this.handleMouseOut = function (event) {
                                              if (_this.props.disabled) _this.hideTooltip();
                                              if (_this.props.onMouseOut) _this.props.onMouseOut(event);
                                            }, _this.handleMouseEnter = function (event) {
                                              _this.showTooltip();
                                              if (_this.props.onMouseEnter) _this.props.onMouseEnter(event);
                                            }, _this.handleKeyboardFocus = function (event, keyboardFocused) {
                                              if (keyboardFocused && !_this.props.disabled) {
                                                _this.showTooltip();
                                                if (_this.props.onFocus) _this.props.onFocus(event);
                                              } else {
                                                _this.hideTooltip();
                                                if (_this.props.onBlur) _this.props.onBlur(event);
                                              }
                                        
                                              if (_this.props.onKeyboardFocus) {
                                                _this.props.onKeyboardFocus(event, keyboardFocused);
                                              }
                                            }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
                                          }
                                                  disableTouchRipple={false}
                                                  disabled={false}
                                                  iconStyle={
                                                            Object {
                                                                      "height": 36,
                                                                      "padding": 6,
                                                                      "width": 36,
                                                                    }
                                                  }
                                                  style={
                                                            Object {
                                                                      "height": 40,
                                                                      "padding": 0,
                                                                      "width": 50,
                                                                    }
                                                  }
                                                  tooltipPosition="bottom-center"
                                                  touch={false}>
                                                  <function _class() {
                                                          _classCallCheck(this, _class);
                                                  
                                                          return _possibleConstructorReturn(this, _Component.apply(this, arguments));
                                                        } />
                                        </function IconButton() {
                                            var _ref;
                                        
                                            var _temp, _this, _ret;
                                        
                                            (0, _classCallCheck3.default)(this, IconButton);
                                        
                                            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                                              args[_key] = arguments[_key];
                                            }
                                        
                                            return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = IconButton.__proto__ || (0, _getPrototypeOf2.default)(IconButton)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
                                              tooltipShown: false
                                            }, _this.handleBlur = function (event) {
                                              _this.hideTooltip();
                                              if (_this.props.onBlur) _this.props.onBlur(event);
                                            }, _this.handleFocus = function (event) {
                                              _this.showTooltip();
                                              if (_this.props.onFocus) _this.props.onFocus(event);
                                            }, _this.handleMouseLeave = function (event) {
                                              if (!_this.refs.button.isKeyboardFocused()) _this.hideTooltip();
                                              if (_this.props.onMouseLeave) _this.props.onMouseLeave(event);
                                            }, _this.handleMouseOut = function (event) {
                                              if (_this.props.disabled) _this.hideTooltip();
                                              if (_this.props.onMouseOut) _this.props.onMouseOut(event);
                                            }, _this.handleMouseEnter = function (event) {
                                              _this.showTooltip();
                                              if (_this.props.onMouseEnter) _this.props.onMouseEnter(event);
                                            }, _this.handleKeyboardFocus = function (event, keyboardFocused) {
                                              if (keyboardFocused && !_this.props.disabled) {
                                                _this.showTooltip();
                                                if (_this.props.onFocus) _this.props.onFocus(event);
                                              } else {
                                                _this.hideTooltip();
                                                if (_this.props.onBlur) _this.props.onBlur(event);
                                              }
                                        
                                              if (_this.props.onKeyboardFocus) {
                                                _this.props.onKeyboardFocus(event, keyboardFocused);
                                              }
                                            }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
                                          }>
                              }
                              onRightIconButtonTouchTap={[Function]}
                              showMenuIconButton={false}
                              style={
                                        Object {
                                                  "boxShadow": "none",
                                                }
                              }
                              title="User Listing"
                              zDepth={1} />
                    <article
                              style={
                                        Object {
                                                  "padding": 15,
                                                }
                              }>
                              <function SelectField() {
                                  (0, _classCallCheck3.default)(this, SelectField);
                                  return (0, _possibleConstructorReturn3.default)(this, (SelectField.__proto__ || (0, _getPrototypeOf2.default)(SelectField)).apply(this, arguments));
                                }
                                        autoWidth={false}
                                        disabled={false}
                                        fullWidth={false}
                                        hintText="Select Site"
                                        onChange={[Function]}
                                        value={null}>
                                        <function MenuItem() {
                                            var _ref;
                                        
                                            var _temp, _this, _ret;
                                        
                                            (0, _classCallCheck3.default)(this, MenuItem);
                                        
                                            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                                              args[_key] = arguments[_key];
                                            }
                                        
                                            return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = MenuItem.__proto__ || (0, _getPrototypeOf2.default)(MenuItem)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
                                              open: false
                                            }, _this.cloneMenuItem = function (item) {
                                              return _react2.default.cloneElement(item, {
                                                onTouchTap: function onTouchTap(event) {
                                                  if (!item.props.menuItems) {
                                                    _this.handleRequestClose();
                                                  }
                                        
                                                  if (item.props.onTouchTap) {
                                                    item.props.onTouchTap(event);
                                                  }
                                                }
                                              });
                                            }, _this.handleTouchTap = function (event) {
                                              event.preventDefault();
                                        
                                              _this.setState({
                                                open: true,
                                                anchorEl: _reactDom2.default.findDOMNode(_this)
                                              });
                                        
                                              if (_this.props.onTouchTap) {
                                                _this.props.onTouchTap(event);
                                              }
                                            }, _this.handleRequestClose = function () {
                                              _this.setState({
                                                open: false,
                                                anchorEl: null
                                              });
                                            }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
                                          }
                                                  checked={false}
                                                  desktop={false}
                                                  disabled={false}
                                                  focusState="none"
                                                  insetChildren={false}
                                                  primaryText="Universal App"
                                                  value="abc" />
                                        <function MenuItem() {
                                            var _ref;
                                        
                                            var _temp, _this, _ret;
                                        
                                            (0, _classCallCheck3.default)(this, MenuItem);
                                        
                                            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                                              args[_key] = arguments[_key];
                                            }
                                        
                                            return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = MenuItem.__proto__ || (0, _getPrototypeOf2.default)(MenuItem)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
                                              open: false
                                            }, _this.cloneMenuItem = function (item) {
                                              return _react2.default.cloneElement(item, {
                                                onTouchTap: function onTouchTap(event) {
                                                  if (!item.props.menuItems) {
                                                    _this.handleRequestClose();
                                                  }
                                        
                                                  if (item.props.onTouchTap) {
                                                    item.props.onTouchTap(event);
                                                  }
                                                }
                                              });
                                            }, _this.handleTouchTap = function (event) {
                                              event.preventDefault();
                                        
                                              _this.setState({
                                                open: true,
                                                anchorEl: _reactDom2.default.findDOMNode(_this)
                                              });
                                        
                                              if (_this.props.onTouchTap) {
                                                _this.props.onTouchTap(event);
                                              }
                                            }, _this.handleRequestClose = function () {
                                              _this.setState({
                                                open: false,
                                                anchorEl: null
                                              });
                                            }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
                                          }
                                                  checked={false}
                                                  desktop={false}
                                                  disabled={false}
                                                  focusState="none"
                                                  insetChildren={false}
                                                  primaryText="Gales Sales"
                                                  value="gales" />
                              </function SelectField() {
                                  (0, _classCallCheck3.default)(this, SelectField);
                                  return (0, _possibleConstructorReturn3.default)(this, (SelectField.__proto__ || (0, _getPrototypeOf2.default)(SelectField)).apply(this, arguments));
                                }>
                              <br />
                              <br />
                              <function GraphQL(props, context) {
                                              _super.call(this, props, context);
                                              this.data = {};
                                              this.version = version;
                                              this.client = context.client;
                                              invariant(!!this.client, "Could not find "client" in the context of " +
                                                  (""" + graphQLDisplayName + "". ") +
                                                  "Wrap the root component in an <ApolloProvider>");
                                              this.store = this.client.store;
                                              this.type = operation.type;
                                              if (mapPropsToSkip(props))
                                                  return;
                                              this.setInitialProps();
                                          } />
                              <function GraphQL(props, context) {
                                              _super.call(this, props, context);
                                              this.data = {};
                                              this.version = version;
                                              this.client = context.client;
                                              invariant(!!this.client, "Could not find "client" in the context of " +
                                                  (""" + graphQLDisplayName + "". ") +
                                                  "Wrap the root component in an <ApolloProvider>");
                                              this.store = this.client.store;
                                              this.type = operation.type;
                                              if (mapPropsToSkip(props))
                                                  return;
                                              this.setInitialProps();
                                          }
                                        type="personal" />
                    </article>
          </function Paper() {
              (0, _classCallCheck3.default)(this, Paper);
              return (0, _possibleConstructorReturn3.default)(this, (Paper.__proto__ || (0, _getPrototypeOf2.default)(Paper)).apply(this, arguments));
            }>
</section>,
      },
      "_renderedNodeType": 0,
      "_rootNodeID": 0,
      "_topLevelWrapper": null,
      "_updateBatchNumber": null,
      "_warnedAboutRefsInRender": false,
    },
    "getRenderOutput": [Function],
    "render": [Function],
  },
  "root": [Circular],
  "unrendered": <class User extends /* istanbul ignore next */_react.Component {

  constructor(props) {
    super(props); /* istanbul ignore next */this.






    _onAddUser = () => {
      console.log('_onAddUser:', '_onAddUser');
    }; /* istanbul ignore next */this.

    _onSelectSite = (e, idx, val) => {
      this.setState({ siteID: val });
    }; /* istanbul ignore next */this.

    handleChange = event => {
      console.log('event:', event.target.value);
      this.setState({
        firstName: event.target.value });

    };this.state = { siteID: null, firstName: '' };}

  render() {

    // const { children } = this.props

    const ContactsQuery = /* istanbul ignore next */_graphqlTag2.default\`
      query ContactsQuery($type: String) {
        fetchContacts(type: $type) {
          _id
          name
          type
        }
      }\`;

    const CREATE_CONTACT_MUTATION = /* istanbul ignore next */_graphqlTag2.default\`
      mutation addContact($name: String) {
        createContact(name: $name, type: "personal") {
          _id
          name
          type
        }
      }\`;

    const updateContacts = {
      Contact: (prev, /* istanbul ignore next */_ref) => {/* istanbul ignore next */let mutationResult = _ref.mutationResult;
        const newContact = mutationResult.data.createContact;
        return (/* istanbul ignore next */(0, _reactAddonsUpdate2.default)(prev, {
            entry: { contacts: { $unshift: [newContact] } } }));

      } };


    const withList = /* istanbul ignore next */(0, _reactApollo.graphql)(ContactsQuery, {
      options: ( /* istanbul ignore next */_ref2) => /* istanbul ignore next */{let type = _ref2.type;return { variables: { type } };},
      props: ( /* istanbul ignore next */_ref3) => {/* istanbul ignore next */let ownProps = _ref3.ownProps; /* istanbul ignore next */let data = _ref3.data;
        if (data.loading) return { isLoading: true };
        if (data.error) return { hasErrors: true };
        return { contacts: data.fetchContacts };
      } });


    const ContactList = props => {
      if (props.isLoading) {
        return (/* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'h2', /* istanbul ignore next */{ __source: { fileName: _jsxFileName, lineNumber: 98 }, __self: this }, /* istanbul ignore next */'Loading...'));
      }
      let rows = props.contacts.map(s => {
        return (
          /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{
              className: 'list-table-row',
              key: s._id, __source: { fileName: _jsxFileName, lineNumber: 102 }, __self: this },

            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'list-table-cell', __source: { fileName: _jsxFileName, lineNumber: 106 }, __self: this }, s._id),
            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'list-table-cell', __source: { fileName: _jsxFileName, lineNumber: 107 }, __self: this }, s.name),
            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'list-table-cell', __source: { fileName: _jsxFileName, lineNumber: 108 }, __self: this }, s.type)));


      });
      return (
        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ __source: { fileName: _jsxFileName, lineNumber: 113 }, __self: this }, rows));

    };

    const ContactsWithView = withList(ContactList);

    const NewEntry = props => {
      return (
        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ __source: { fileName: _jsxFileName, lineNumber: 121 }, __self: this },
          /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_TextField2.default, /* istanbul ignore next */{
            floatingLabelText: 'First Name',
            onChange: this.handleChange
            // onBlur={() => this._validate('email')}
            // ref='email'
            // type='email'
            , value: this.state.firstName, __source: { fileName: _jsxFileName, lineNumber: 122 }, __self: this }),

          /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ onClick: () => props.submit({ name: this.state.firstName }), __source: { fileName: _jsxFileName, lineNumber: 130 }, __self: this }, /* istanbul ignore next */'Click me')));


    };

    const NewEntryWithData = /* istanbul ignore next */(0, _reactApollo.graphql)(CREATE_CONTACT_MUTATION, {
      props: ( /* istanbul ignore next */_ref4) => /* istanbul ignore next */{let ownProps = _ref4.ownProps;let mutate = _ref4.mutate;return {
          submit: ( /* istanbul ignore next */_ref5) => /* istanbul ignore next */{let name = _ref5.name;return mutate({ variables: { name } });} };} })(

    NewEntry);


    return (

      /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'section', /* istanbul ignore next */{ className: 'App-container', __source: { fileName: _jsxFileName, lineNumber: 144 }, __self: this },
        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_Paper2.default, /* istanbul ignore next */{ __source: { fileName: _jsxFileName, lineNumber: 145 }, __self: this },
          /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_AppBar2.default, /* istanbul ignore next */{
            iconElementRight: /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_IconButton2.default, /* istanbul ignore next */{ iconStyle: /* istanbul ignore next */_styles.styles.appBarEleIconStyle, style: /* istanbul ignore next */_styles.styles.appBarEleStyle, __source: { fileName: _jsxFileName, lineNumber: 147 }, __self: this }, /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_add2.default, /* istanbul ignore next */{ __source: { fileName: _jsxFileName, lineNumber: 147 }, __self: this })),
            onRightIconButtonTouchTap: () => this._onAddUser(),
            showMenuIconButton: false,
            style: /* istanbul ignore next */_styles.styles.appBar,
            title: 'User Listing', __source: { fileName: _jsxFileName, lineNumber: 146 }, __self: this }),

          /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'article', /* istanbul ignore next */{ style: /* istanbul ignore next */_styles.styles.paper, __source: { fileName: _jsxFileName, lineNumber: 153 }, __self: this },
            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_SelectField2.default, /* istanbul ignore next */{
                hintText: 'Select Site',
                onChange: this._onSelectSite,
                value: this.state.siteID, __source: { fileName: _jsxFileName, lineNumber: 154 }, __self: this },

              sites.map(s => /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_MenuItem2.default, /* istanbul ignore next */{ key: s.id, value: s.id, primaryText: s.name, __source: { fileName: _jsxFileName, lineNumber: 159 }, __self: this }))),

            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'br', /* istanbul ignore next */{ __source: { fileName: _jsxFileName, lineNumber: 161 }, __self: this }), /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'br', /* istanbul ignore next */{ __source: { fileName: _jsxFileName, lineNumber: 161 }, __self: this }),
            /* istanbul ignore next */_react2.default.createElement(NewEntryWithData, /* istanbul ignore next */{ __source: { fileName: _jsxFileName, lineNumber: 162 }, __self: this }),

            /* istanbul ignore next */_react2.default.createElement(ContactsWithView, /* istanbul ignore next */{ type: 'personal', __source: { fileName: _jsxFileName, lineNumber: 164 }, __self: this })))));






  }} />,
}
`;
