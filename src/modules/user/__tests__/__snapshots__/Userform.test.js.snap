exports[`components <UserForm /> renders without crashing 1`] = `
ShallowWrapper {
  "complexSelector": ComplexSelector {
    "buildPredicate": [Function],
    "childrenOfNode": [Function],
    "findWhereUnwrapped": [Function],
  },
  "length": 1,
  "node": <div
    style={
        Object {
            "margin": "auto",
          }
    }>
    <form
        onSubmit={[Function]}>
        <legend
            className="row">
            Login
        </legend>
        <div
            className="form-row">
            <function TextField() {
                var _ref;
            
                var _temp, _this, _ret;
            
                (0, _classCallCheck3.default)(this, TextField);
            
                for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                  args[_key] = arguments[_key];
                }
            
                return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = TextField.__proto__ || (0, _getPrototypeOf2.default)(TextField)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
                  isFocused: false,
                  errorText: undefined,
                  hasValue: false,
                  isClean: true
                }, _this.handleInputBlur = function (event) {
                  _this.setState({ isFocused: false });
                  if (_this.props.onBlur) _this.props.onBlur(event);
                }, _this.handleInputChange = function (event) {
                  _this.setState({ hasValue: isValid(event.target.value), isClean: false });
                  if (_this.props.onChange) _this.props.onChange(event, event.target.value);
                }, _this.handleInputFocus = function (event) {
                  if (_this.props.disabled) {
                    return;
                  }
                  _this.setState({ isFocused: true });
                  if (_this.props.onFocus) {
                    _this.props.onFocus(event);
                  }
                }, _this.handleHeightChange = function (event, height) {
                  var newHeight = height + 24;
                  if (_this.props.floatingLabelText) {
                    newHeight += 24;
                  }
                  _reactDom2.default.findDOMNode(_this).style.height = newHeight + 'px';
                }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
              }
                className="form-text-input"
                disabled={false}
                errorText={false}
                floatingLabelFixed={false}
                floatingLabelText="Email"
                fullWidth={false}
                multiLine={false}
                onBlur={[Function]}
                onChange={[Function]}
                rows={1}
                type="email"
                underlineShow={true}
                value="" />
            <div
                className="form-row-spacer" />
            <function TextField() {
                var _ref;
            
                var _temp, _this, _ret;
            
                (0, _classCallCheck3.default)(this, TextField);
            
                for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                  args[_key] = arguments[_key];
                }
            
                return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = TextField.__proto__ || (0, _getPrototypeOf2.default)(TextField)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
                  isFocused: false,
                  errorText: undefined,
                  hasValue: false,
                  isClean: true
                }, _this.handleInputBlur = function (event) {
                  _this.setState({ isFocused: false });
                  if (_this.props.onBlur) _this.props.onBlur(event);
                }, _this.handleInputChange = function (event) {
                  _this.setState({ hasValue: isValid(event.target.value), isClean: false });
                  if (_this.props.onChange) _this.props.onChange(event, event.target.value);
                }, _this.handleInputFocus = function (event) {
                  if (_this.props.disabled) {
                    return;
                  }
                  _this.setState({ isFocused: true });
                  if (_this.props.onFocus) {
                    _this.props.onFocus(event);
                  }
                }, _this.handleHeightChange = function (event, height) {
                  var newHeight = height + 24;
                  if (_this.props.floatingLabelText) {
                    newHeight += 24;
                  }
                  _reactDom2.default.findDOMNode(_this).style.height = newHeight + 'px';
                }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
              }
                className="form-text-input"
                disabled={false}
                floatingLabelFixed={false}
                floatingLabelText="Password"
                fullWidth={false}
                multiLine={false}
                onBlur={[Function]}
                onChange={[Function]}
                rows={1}
                type="password"
                underlineShow={true}
                value="" />
        </div>
        <legend
            className="row">
            Contact
        </legend>
        <div
            className="form-row">
            <function TextField() {
                var _ref;
            
                var _temp, _this, _ret;
            
                (0, _classCallCheck3.default)(this, TextField);
            
                for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                  args[_key] = arguments[_key];
                }
            
                return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = TextField.__proto__ || (0, _getPrototypeOf2.default)(TextField)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
                  isFocused: false,
                  errorText: undefined,
                  hasValue: false,
                  isClean: true
                }, _this.handleInputBlur = function (event) {
                  _this.setState({ isFocused: false });
                  if (_this.props.onBlur) _this.props.onBlur(event);
                }, _this.handleInputChange = function (event) {
                  _this.setState({ hasValue: isValid(event.target.value), isClean: false });
                  if (_this.props.onChange) _this.props.onChange(event, event.target.value);
                }, _this.handleInputFocus = function (event) {
                  if (_this.props.disabled) {
                    return;
                  }
                  _this.setState({ isFocused: true });
                  if (_this.props.onFocus) {
                    _this.props.onFocus(event);
                  }
                }, _this.handleHeightChange = function (event, height) {
                  var newHeight = height + 24;
                  if (_this.props.floatingLabelText) {
                    newHeight += 24;
                  }
                  _reactDom2.default.findDOMNode(_this).style.height = newHeight + 'px';
                }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
              }
                className="form-text-input"
                disabled={false}
                floatingLabelFixed={false}
                floatingLabelText="First Name"
                fullWidth={false}
                multiLine={false}
                onBlur={[Function]}
                onChange={[Function]}
                rows={1}
                type="text"
                underlineShow={true}
                value="" />
            <div
                className="form-row-spacer" />
            <function TextField() {
                var _ref;
            
                var _temp, _this, _ret;
            
                (0, _classCallCheck3.default)(this, TextField);
            
                for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                  args[_key] = arguments[_key];
                }
            
                return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = TextField.__proto__ || (0, _getPrototypeOf2.default)(TextField)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
                  isFocused: false,
                  errorText: undefined,
                  hasValue: false,
                  isClean: true
                }, _this.handleInputBlur = function (event) {
                  _this.setState({ isFocused: false });
                  if (_this.props.onBlur) _this.props.onBlur(event);
                }, _this.handleInputChange = function (event) {
                  _this.setState({ hasValue: isValid(event.target.value), isClean: false });
                  if (_this.props.onChange) _this.props.onChange(event, event.target.value);
                }, _this.handleInputFocus = function (event) {
                  if (_this.props.disabled) {
                    return;
                  }
                  _this.setState({ isFocused: true });
                  if (_this.props.onFocus) {
                    _this.props.onFocus(event);
                  }
                }, _this.handleHeightChange = function (event, height) {
                  var newHeight = height + 24;
                  if (_this.props.floatingLabelText) {
                    newHeight += 24;
                  }
                  _reactDom2.default.findDOMNode(_this).style.height = newHeight + 'px';
                }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
              }
                className="form-text-input"
                disabled={false}
                floatingLabelFixed={false}
                floatingLabelText="Last Name"
                fullWidth={false}
                multiLine={false}
                onBlur={[Function]}
                onChange={[Function]}
                rows={1}
                type="text"
                underlineShow={true}
                value="" />
        </div>
        <legend
            className="row">
            Roles & Status
        </legend>
        <div
            className="form-row">
            <div
                style={
                    Object {
                        "flex": 1,
                      }
                }>
                <function Subheader(props, context) {
                  var children = props.children;
                  var inset = props.inset;
                  var style = props.style;
                  var other = (0, _objectWithoutProperties3.default)(props, ['children', 'inset', 'style']);
                  var _context$muiTheme = context.muiTheme;
                  var prepareStyles = _context$muiTheme.prepareStyles;
                  var subheader = _context$muiTheme.subheader;
                
                
                  var styles = {
                    root: {
                      boxSizing: 'border-box',
                      color: subheader.color,
                      fontSize: 14,
                      fontWeight: subheader.fontWeight,
                      lineHeight: '48px',
                      paddingLeft: inset ? 72 : 16,
                      width: '100%'
                    }
                  };
                
                  return _react2.default.createElement(
                    'div',
                    (0, _extends3.default)({}, other, { style: prepareStyles((0, _simpleAssign2.default)(styles.root, style)) }),
                    children
                  );
                }
                    inset={false}>
                    Status
                </function Subheader(props, context) {
                  var children = props.children;
                  var inset = props.inset;
                  var style = props.style;
                  var other = (0, _objectWithoutProperties3.default)(props, ['children', 'inset', 'style']);
                  var _context$muiTheme = context.muiTheme;
                  var prepareStyles = _context$muiTheme.prepareStyles;
                  var subheader = _context$muiTheme.subheader;
                
                
                  var styles = {
                    root: {
                      boxSizing: 'border-box',
                      color: subheader.color,
                      fontSize: 14,
                      fontWeight: subheader.fontWeight,
                      lineHeight: '48px',
                      paddingLeft: inset ? 72 : 16,
                      width: '100%'
                    }
                  };
                
                  return _react2.default.createElement(
                    'div',
                    (0, _extends3.default)({}, other, { style: prepareStyles((0, _simpleAssign2.default)(styles.root, style)) }),
                    children
                  );
                }>
                <function Checkbox() {
                    var _ref;
                
                    var _temp, _this, _ret;
                
                    (0, _classCallCheck3.default)(this, Checkbox);
                
                    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                      args[_key] = arguments[_key];
                    }
                
                    return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = Checkbox.__proto__ || (0, _getPrototypeOf2.default)(Checkbox)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
                      switched: false
                    }, _this.handleStateChange = function (newSwitched) {
                      _this.setState({
                        switched: newSwitched
                      });
                    }, _this.handleCheck = function (event, isInputChecked) {
                      if (_this.props.onCheck) {
                        _this.props.onCheck(event, isInputChecked);
                      }
                    }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
                  }
                    checked={false}
                    className="form-text-input"
                    disabled={false}
                    label="Active"
                    labelPosition="right"
                    onBlur={[Function]}
                    onCheck={[Function]} />
            </div>
            <div
                style={
                    Object {
                        "flex": 1.25,
                      }
                }>
                <function Subheader(props, context) {
                  var children = props.children;
                  var inset = props.inset;
                  var style = props.style;
                  var other = (0, _objectWithoutProperties3.default)(props, ['children', 'inset', 'style']);
                  var _context$muiTheme = context.muiTheme;
                  var prepareStyles = _context$muiTheme.prepareStyles;
                  var subheader = _context$muiTheme.subheader;
                
                
                  var styles = {
                    root: {
                      boxSizing: 'border-box',
                      color: subheader.color,
                      fontSize: 14,
                      fontWeight: subheader.fontWeight,
                      lineHeight: '48px',
                      paddingLeft: inset ? 72 : 16,
                      width: '100%'
                    }
                  };
                
                  return _react2.default.createElement(
                    'div',
                    (0, _extends3.default)({}, other, { style: prepareStyles((0, _simpleAssign2.default)(styles.root, style)) }),
                    children
                  );
                }
                    inset={false}>
                    Roles
                </function Subheader(props, context) {
                  var children = props.children;
                  var inset = props.inset;
                  var style = props.style;
                  var other = (0, _objectWithoutProperties3.default)(props, ['children', 'inset', 'style']);
                  var _context$muiTheme = context.muiTheme;
                  var prepareStyles = _context$muiTheme.prepareStyles;
                  var subheader = _context$muiTheme.subheader;
                
                
                  var styles = {
                    root: {
                      boxSizing: 'border-box',
                      color: subheader.color,
                      fontSize: 14,
                      fontWeight: subheader.fontWeight,
                      lineHeight: '48px',
                      paddingLeft: inset ? 72 : 16,
                      width: '100%'
                    }
                  };
                
                  return _react2.default.createElement(
                    'div',
                    (0, _extends3.default)({}, other, { style: prepareStyles((0, _simpleAssign2.default)(styles.root, style)) }),
                    children
                  );
                }>
                <function List() {
                    (0, _classCallCheck3.default)(this, List);
                    return (0, _possibleConstructorReturn3.default)(this, (List.__proto__ || (0, _getPrototypeOf2.default)(List)).apply(this, arguments));
                  } />
            </div>
        </div>
        <div
            className="form-row"
            style={
                Object {
                    "justifyContent": "space-around",
                  }
            }>
            <function RaisedButton() {
                var _ref;
            
                var _temp, _this, _ret;
            
                (0, _classCallCheck3.default)(this, RaisedButton);
            
                for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                  args[_key] = arguments[_key];
                }
            
                return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = RaisedButton.__proto__ || (0, _getPrototypeOf2.default)(RaisedButton)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
                  hovered: false,
                  keyboardFocused: false,
                  touched: false,
                  initialZDepth: 0,
                  zDepth: 0
                }, _this.handleMouseDown = function (event) {
                  // only listen to left clicks
                  if (event.button === 0) {
                    _this.setState({
                      zDepth: _this.state.initialZDepth + 1
                    });
                  }
                  if (_this.props.onMouseDown) {
                    _this.props.onMouseDown(event);
                  }
                }, _this.handleMouseUp = function (event) {
                  _this.setState({
                    zDepth: _this.state.initialZDepth
                  });
                  if (_this.props.onMouseUp) {
                    _this.props.onMouseUp(event);
                  }
                }, _this.handleMouseLeave = function (event) {
                  if (!_this.state.keyboardFocused) {
                    _this.setState({
                      zDepth: _this.state.initialZDepth,
                      hovered: false
                    });
                  }
                  if (_this.props.onMouseLeave) {
                    _this.props.onMouseLeave(event);
                  }
                }, _this.handleMouseEnter = function (event) {
                  if (!_this.state.keyboardFocused && !_this.state.touched) {
                    _this.setState({
                      hovered: true
                    });
                  }
                  if (_this.props.onMouseEnter) {
                    _this.props.onMouseEnter(event);
                  }
                }, _this.handleTouchStart = function (event) {
                  _this.setState({
                    touched: true,
                    zDepth: _this.state.initialZDepth + 1
                  });
            
                  if (_this.props.onTouchStart) {
                    _this.props.onTouchStart(event);
                  }
                }, _this.handleTouchEnd = function (event) {
                  _this.setState({
                    zDepth: _this.state.initialZDepth
                  });
            
                  if (_this.props.onTouchEnd) {
                    _this.props.onTouchEnd(event);
                  }
                }, _this.handleKeyboardFocus = function (event, keyboardFocused) {
                  var zDepth = keyboardFocused && !_this.props.disabled ? _this.state.initialZDepth + 1 : _this.state.initialZDepth;
            
                  _this.setState({
                    zDepth: zDepth,
                    keyboardFocused: keyboardFocused
                  });
                }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
              }
                disabled={false}
                fullWidth={false}
                icon={
                    <function _class() {
                            _classCallCheck(this, _class);
                    
                            return _possibleConstructorReturn(this, _Component.apply(this, arguments));
                          } />
                }
                label="Cancel"
                labelPosition="after"
                onClick={[Function]}
                primary={false}
                secondary={false} />
            <function RaisedButton() {
                var _ref;
            
                var _temp, _this, _ret;
            
                (0, _classCallCheck3.default)(this, RaisedButton);
            
                for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                  args[_key] = arguments[_key];
                }
            
                return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = RaisedButton.__proto__ || (0, _getPrototypeOf2.default)(RaisedButton)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
                  hovered: false,
                  keyboardFocused: false,
                  touched: false,
                  initialZDepth: 0,
                  zDepth: 0
                }, _this.handleMouseDown = function (event) {
                  // only listen to left clicks
                  if (event.button === 0) {
                    _this.setState({
                      zDepth: _this.state.initialZDepth + 1
                    });
                  }
                  if (_this.props.onMouseDown) {
                    _this.props.onMouseDown(event);
                  }
                }, _this.handleMouseUp = function (event) {
                  _this.setState({
                    zDepth: _this.state.initialZDepth
                  });
                  if (_this.props.onMouseUp) {
                    _this.props.onMouseUp(event);
                  }
                }, _this.handleMouseLeave = function (event) {
                  if (!_this.state.keyboardFocused) {
                    _this.setState({
                      zDepth: _this.state.initialZDepth,
                      hovered: false
                    });
                  }
                  if (_this.props.onMouseLeave) {
                    _this.props.onMouseLeave(event);
                  }
                }, _this.handleMouseEnter = function (event) {
                  if (!_this.state.keyboardFocused && !_this.state.touched) {
                    _this.setState({
                      hovered: true
                    });
                  }
                  if (_this.props.onMouseEnter) {
                    _this.props.onMouseEnter(event);
                  }
                }, _this.handleTouchStart = function (event) {
                  _this.setState({
                    touched: true,
                    zDepth: _this.state.initialZDepth + 1
                  });
            
                  if (_this.props.onTouchStart) {
                    _this.props.onTouchStart(event);
                  }
                }, _this.handleTouchEnd = function (event) {
                  _this.setState({
                    zDepth: _this.state.initialZDepth
                  });
            
                  if (_this.props.onTouchEnd) {
                    _this.props.onTouchEnd(event);
                  }
                }, _this.handleKeyboardFocus = function (event, keyboardFocused) {
                  var zDepth = keyboardFocused && !_this.props.disabled ? _this.state.initialZDepth + 1 : _this.state.initialZDepth;
            
                  _this.setState({
                    zDepth: zDepth,
                    keyboardFocused: keyboardFocused
                  });
                }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
              }
                disabled={false}
                fullWidth={false}
                icon={
                    <function _class() {
                            _classCallCheck(this, _class);
                    
                            return _possibleConstructorReturn(this, _Component.apply(this, arguments));
                          } />
                }
                label="Submit User Info"
                labelPosition="after"
                onClick={[Function]}
                primary={false}
                secondary={true} />
        </div>
    </form>
</div>,
  "nodes": Array [
    <div
      style={
            Object {
                  "margin": "auto",
                }
      }>
      <form
            onSubmit={[Function]}>
            <legend
                  className="row">
                  Login
            </legend>
            <div
                  className="form-row">
                  <function TextField() {
                      var _ref;
                  
                      var _temp, _this, _ret;
                  
                      (0, _classCallCheck3.default)(this, TextField);
                  
                      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                        args[_key] = arguments[_key];
                      }
                  
                      return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = TextField.__proto__ || (0, _getPrototypeOf2.default)(TextField)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
                        isFocused: false,
                        errorText: undefined,
                        hasValue: false,
                        isClean: true
                      }, _this.handleInputBlur = function (event) {
                        _this.setState({ isFocused: false });
                        if (_this.props.onBlur) _this.props.onBlur(event);
                      }, _this.handleInputChange = function (event) {
                        _this.setState({ hasValue: isValid(event.target.value), isClean: false });
                        if (_this.props.onChange) _this.props.onChange(event, event.target.value);
                      }, _this.handleInputFocus = function (event) {
                        if (_this.props.disabled) {
                          return;
                        }
                        _this.setState({ isFocused: true });
                        if (_this.props.onFocus) {
                          _this.props.onFocus(event);
                        }
                      }, _this.handleHeightChange = function (event, height) {
                        var newHeight = height + 24;
                        if (_this.props.floatingLabelText) {
                          newHeight += 24;
                        }
                        _reactDom2.default.findDOMNode(_this).style.height = newHeight + 'px';
                      }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
                    }
                        className="form-text-input"
                        disabled={false}
                        errorText={false}
                        floatingLabelFixed={false}
                        floatingLabelText="Email"
                        fullWidth={false}
                        multiLine={false}
                        onBlur={[Function]}
                        onChange={[Function]}
                        rows={1}
                        type="email"
                        underlineShow={true}
                        value="" />
                  <div
                        className="form-row-spacer" />
                  <function TextField() {
                      var _ref;
                  
                      var _temp, _this, _ret;
                  
                      (0, _classCallCheck3.default)(this, TextField);
                  
                      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                        args[_key] = arguments[_key];
                      }
                  
                      return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = TextField.__proto__ || (0, _getPrototypeOf2.default)(TextField)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
                        isFocused: false,
                        errorText: undefined,
                        hasValue: false,
                        isClean: true
                      }, _this.handleInputBlur = function (event) {
                        _this.setState({ isFocused: false });
                        if (_this.props.onBlur) _this.props.onBlur(event);
                      }, _this.handleInputChange = function (event) {
                        _this.setState({ hasValue: isValid(event.target.value), isClean: false });
                        if (_this.props.onChange) _this.props.onChange(event, event.target.value);
                      }, _this.handleInputFocus = function (event) {
                        if (_this.props.disabled) {
                          return;
                        }
                        _this.setState({ isFocused: true });
                        if (_this.props.onFocus) {
                          _this.props.onFocus(event);
                        }
                      }, _this.handleHeightChange = function (event, height) {
                        var newHeight = height + 24;
                        if (_this.props.floatingLabelText) {
                          newHeight += 24;
                        }
                        _reactDom2.default.findDOMNode(_this).style.height = newHeight + 'px';
                      }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
                    }
                        className="form-text-input"
                        disabled={false}
                        floatingLabelFixed={false}
                        floatingLabelText="Password"
                        fullWidth={false}
                        multiLine={false}
                        onBlur={[Function]}
                        onChange={[Function]}
                        rows={1}
                        type="password"
                        underlineShow={true}
                        value="" />
            </div>
            <legend
                  className="row">
                  Contact
            </legend>
            <div
                  className="form-row">
                  <function TextField() {
                      var _ref;
                  
                      var _temp, _this, _ret;
                  
                      (0, _classCallCheck3.default)(this, TextField);
                  
                      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                        args[_key] = arguments[_key];
                      }
                  
                      return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = TextField.__proto__ || (0, _getPrototypeOf2.default)(TextField)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
                        isFocused: false,
                        errorText: undefined,
                        hasValue: false,
                        isClean: true
                      }, _this.handleInputBlur = function (event) {
                        _this.setState({ isFocused: false });
                        if (_this.props.onBlur) _this.props.onBlur(event);
                      }, _this.handleInputChange = function (event) {
                        _this.setState({ hasValue: isValid(event.target.value), isClean: false });
                        if (_this.props.onChange) _this.props.onChange(event, event.target.value);
                      }, _this.handleInputFocus = function (event) {
                        if (_this.props.disabled) {
                          return;
                        }
                        _this.setState({ isFocused: true });
                        if (_this.props.onFocus) {
                          _this.props.onFocus(event);
                        }
                      }, _this.handleHeightChange = function (event, height) {
                        var newHeight = height + 24;
                        if (_this.props.floatingLabelText) {
                          newHeight += 24;
                        }
                        _reactDom2.default.findDOMNode(_this).style.height = newHeight + 'px';
                      }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
                    }
                        className="form-text-input"
                        disabled={false}
                        floatingLabelFixed={false}
                        floatingLabelText="First Name"
                        fullWidth={false}
                        multiLine={false}
                        onBlur={[Function]}
                        onChange={[Function]}
                        rows={1}
                        type="text"
                        underlineShow={true}
                        value="" />
                  <div
                        className="form-row-spacer" />
                  <function TextField() {
                      var _ref;
                  
                      var _temp, _this, _ret;
                  
                      (0, _classCallCheck3.default)(this, TextField);
                  
                      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                        args[_key] = arguments[_key];
                      }
                  
                      return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = TextField.__proto__ || (0, _getPrototypeOf2.default)(TextField)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
                        isFocused: false,
                        errorText: undefined,
                        hasValue: false,
                        isClean: true
                      }, _this.handleInputBlur = function (event) {
                        _this.setState({ isFocused: false });
                        if (_this.props.onBlur) _this.props.onBlur(event);
                      }, _this.handleInputChange = function (event) {
                        _this.setState({ hasValue: isValid(event.target.value), isClean: false });
                        if (_this.props.onChange) _this.props.onChange(event, event.target.value);
                      }, _this.handleInputFocus = function (event) {
                        if (_this.props.disabled) {
                          return;
                        }
                        _this.setState({ isFocused: true });
                        if (_this.props.onFocus) {
                          _this.props.onFocus(event);
                        }
                      }, _this.handleHeightChange = function (event, height) {
                        var newHeight = height + 24;
                        if (_this.props.floatingLabelText) {
                          newHeight += 24;
                        }
                        _reactDom2.default.findDOMNode(_this).style.height = newHeight + 'px';
                      }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
                    }
                        className="form-text-input"
                        disabled={false}
                        floatingLabelFixed={false}
                        floatingLabelText="Last Name"
                        fullWidth={false}
                        multiLine={false}
                        onBlur={[Function]}
                        onChange={[Function]}
                        rows={1}
                        type="text"
                        underlineShow={true}
                        value="" />
            </div>
            <legend
                  className="row">
                  Roles & Status
            </legend>
            <div
                  className="form-row">
                  <div
                        style={
                              Object {
                                    "flex": 1,
                                  }
                        }>
                        <function Subheader(props, context) {
                          var children = props.children;
                          var inset = props.inset;
                          var style = props.style;
                          var other = (0, _objectWithoutProperties3.default)(props, ['children', 'inset', 'style']);
                          var _context$muiTheme = context.muiTheme;
                          var prepareStyles = _context$muiTheme.prepareStyles;
                          var subheader = _context$muiTheme.subheader;
                        
                        
                          var styles = {
                            root: {
                              boxSizing: 'border-box',
                              color: subheader.color,
                              fontSize: 14,
                              fontWeight: subheader.fontWeight,
                              lineHeight: '48px',
                              paddingLeft: inset ? 72 : 16,
                              width: '100%'
                            }
                          };
                        
                          return _react2.default.createElement(
                            'div',
                            (0, _extends3.default)({}, other, { style: prepareStyles((0, _simpleAssign2.default)(styles.root, style)) }),
                            children
                          );
                        }
                              inset={false}>
                              Status
                        </function Subheader(props, context) {
                          var children = props.children;
                          var inset = props.inset;
                          var style = props.style;
                          var other = (0, _objectWithoutProperties3.default)(props, ['children', 'inset', 'style']);
                          var _context$muiTheme = context.muiTheme;
                          var prepareStyles = _context$muiTheme.prepareStyles;
                          var subheader = _context$muiTheme.subheader;
                        
                        
                          var styles = {
                            root: {
                              boxSizing: 'border-box',
                              color: subheader.color,
                              fontSize: 14,
                              fontWeight: subheader.fontWeight,
                              lineHeight: '48px',
                              paddingLeft: inset ? 72 : 16,
                              width: '100%'
                            }
                          };
                        
                          return _react2.default.createElement(
                            'div',
                            (0, _extends3.default)({}, other, { style: prepareStyles((0, _simpleAssign2.default)(styles.root, style)) }),
                            children
                          );
                        }>
                        <function Checkbox() {
                            var _ref;
                        
                            var _temp, _this, _ret;
                        
                            (0, _classCallCheck3.default)(this, Checkbox);
                        
                            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                              args[_key] = arguments[_key];
                            }
                        
                            return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = Checkbox.__proto__ || (0, _getPrototypeOf2.default)(Checkbox)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
                              switched: false
                            }, _this.handleStateChange = function (newSwitched) {
                              _this.setState({
                                switched: newSwitched
                              });
                            }, _this.handleCheck = function (event, isInputChecked) {
                              if (_this.props.onCheck) {
                                _this.props.onCheck(event, isInputChecked);
                              }
                            }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
                          }
                              checked={false}
                              className="form-text-input"
                              disabled={false}
                              label="Active"
                              labelPosition="right"
                              onBlur={[Function]}
                              onCheck={[Function]} />
                  </div>
                  <div
                        style={
                              Object {
                                    "flex": 1.25,
                                  }
                        }>
                        <function Subheader(props, context) {
                          var children = props.children;
                          var inset = props.inset;
                          var style = props.style;
                          var other = (0, _objectWithoutProperties3.default)(props, ['children', 'inset', 'style']);
                          var _context$muiTheme = context.muiTheme;
                          var prepareStyles = _context$muiTheme.prepareStyles;
                          var subheader = _context$muiTheme.subheader;
                        
                        
                          var styles = {
                            root: {
                              boxSizing: 'border-box',
                              color: subheader.color,
                              fontSize: 14,
                              fontWeight: subheader.fontWeight,
                              lineHeight: '48px',
                              paddingLeft: inset ? 72 : 16,
                              width: '100%'
                            }
                          };
                        
                          return _react2.default.createElement(
                            'div',
                            (0, _extends3.default)({}, other, { style: prepareStyles((0, _simpleAssign2.default)(styles.root, style)) }),
                            children
                          );
                        }
                              inset={false}>
                              Roles
                        </function Subheader(props, context) {
                          var children = props.children;
                          var inset = props.inset;
                          var style = props.style;
                          var other = (0, _objectWithoutProperties3.default)(props, ['children', 'inset', 'style']);
                          var _context$muiTheme = context.muiTheme;
                          var prepareStyles = _context$muiTheme.prepareStyles;
                          var subheader = _context$muiTheme.subheader;
                        
                        
                          var styles = {
                            root: {
                              boxSizing: 'border-box',
                              color: subheader.color,
                              fontSize: 14,
                              fontWeight: subheader.fontWeight,
                              lineHeight: '48px',
                              paddingLeft: inset ? 72 : 16,
                              width: '100%'
                            }
                          };
                        
                          return _react2.default.createElement(
                            'div',
                            (0, _extends3.default)({}, other, { style: prepareStyles((0, _simpleAssign2.default)(styles.root, style)) }),
                            children
                          );
                        }>
                        <function List() {
                            (0, _classCallCheck3.default)(this, List);
                            return (0, _possibleConstructorReturn3.default)(this, (List.__proto__ || (0, _getPrototypeOf2.default)(List)).apply(this, arguments));
                          } />
                  </div>
            </div>
            <div
                  className="form-row"
                  style={
                        Object {
                              "justifyContent": "space-around",
                            }
                  }>
                  <function RaisedButton() {
                      var _ref;
                  
                      var _temp, _this, _ret;
                  
                      (0, _classCallCheck3.default)(this, RaisedButton);
                  
                      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                        args[_key] = arguments[_key];
                      }
                  
                      return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = RaisedButton.__proto__ || (0, _getPrototypeOf2.default)(RaisedButton)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
                        hovered: false,
                        keyboardFocused: false,
                        touched: false,
                        initialZDepth: 0,
                        zDepth: 0
                      }, _this.handleMouseDown = function (event) {
                        // only listen to left clicks
                        if (event.button === 0) {
                          _this.setState({
                            zDepth: _this.state.initialZDepth + 1
                          });
                        }
                        if (_this.props.onMouseDown) {
                          _this.props.onMouseDown(event);
                        }
                      }, _this.handleMouseUp = function (event) {
                        _this.setState({
                          zDepth: _this.state.initialZDepth
                        });
                        if (_this.props.onMouseUp) {
                          _this.props.onMouseUp(event);
                        }
                      }, _this.handleMouseLeave = function (event) {
                        if (!_this.state.keyboardFocused) {
                          _this.setState({
                            zDepth: _this.state.initialZDepth,
                            hovered: false
                          });
                        }
                        if (_this.props.onMouseLeave) {
                          _this.props.onMouseLeave(event);
                        }
                      }, _this.handleMouseEnter = function (event) {
                        if (!_this.state.keyboardFocused && !_this.state.touched) {
                          _this.setState({
                            hovered: true
                          });
                        }
                        if (_this.props.onMouseEnter) {
                          _this.props.onMouseEnter(event);
                        }
                      }, _this.handleTouchStart = function (event) {
                        _this.setState({
                          touched: true,
                          zDepth: _this.state.initialZDepth + 1
                        });
                  
                        if (_this.props.onTouchStart) {
                          _this.props.onTouchStart(event);
                        }
                      }, _this.handleTouchEnd = function (event) {
                        _this.setState({
                          zDepth: _this.state.initialZDepth
                        });
                  
                        if (_this.props.onTouchEnd) {
                          _this.props.onTouchEnd(event);
                        }
                      }, _this.handleKeyboardFocus = function (event, keyboardFocused) {
                        var zDepth = keyboardFocused && !_this.props.disabled ? _this.state.initialZDepth + 1 : _this.state.initialZDepth;
                  
                        _this.setState({
                          zDepth: zDepth,
                          keyboardFocused: keyboardFocused
                        });
                      }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
                    }
                        disabled={false}
                        fullWidth={false}
                        icon={
                              <function _class() {
                                      _classCallCheck(this, _class);
                              
                                      return _possibleConstructorReturn(this, _Component.apply(this, arguments));
                                    } />
                        }
                        label="Cancel"
                        labelPosition="after"
                        onClick={[Function]}
                        primary={false}
                        secondary={false} />
                  <function RaisedButton() {
                      var _ref;
                  
                      var _temp, _this, _ret;
                  
                      (0, _classCallCheck3.default)(this, RaisedButton);
                  
                      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                        args[_key] = arguments[_key];
                      }
                  
                      return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = RaisedButton.__proto__ || (0, _getPrototypeOf2.default)(RaisedButton)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
                        hovered: false,
                        keyboardFocused: false,
                        touched: false,
                        initialZDepth: 0,
                        zDepth: 0
                      }, _this.handleMouseDown = function (event) {
                        // only listen to left clicks
                        if (event.button === 0) {
                          _this.setState({
                            zDepth: _this.state.initialZDepth + 1
                          });
                        }
                        if (_this.props.onMouseDown) {
                          _this.props.onMouseDown(event);
                        }
                      }, _this.handleMouseUp = function (event) {
                        _this.setState({
                          zDepth: _this.state.initialZDepth
                        });
                        if (_this.props.onMouseUp) {
                          _this.props.onMouseUp(event);
                        }
                      }, _this.handleMouseLeave = function (event) {
                        if (!_this.state.keyboardFocused) {
                          _this.setState({
                            zDepth: _this.state.initialZDepth,
                            hovered: false
                          });
                        }
                        if (_this.props.onMouseLeave) {
                          _this.props.onMouseLeave(event);
                        }
                      }, _this.handleMouseEnter = function (event) {
                        if (!_this.state.keyboardFocused && !_this.state.touched) {
                          _this.setState({
                            hovered: true
                          });
                        }
                        if (_this.props.onMouseEnter) {
                          _this.props.onMouseEnter(event);
                        }
                      }, _this.handleTouchStart = function (event) {
                        _this.setState({
                          touched: true,
                          zDepth: _this.state.initialZDepth + 1
                        });
                  
                        if (_this.props.onTouchStart) {
                          _this.props.onTouchStart(event);
                        }
                      }, _this.handleTouchEnd = function (event) {
                        _this.setState({
                          zDepth: _this.state.initialZDepth
                        });
                  
                        if (_this.props.onTouchEnd) {
                          _this.props.onTouchEnd(event);
                        }
                      }, _this.handleKeyboardFocus = function (event, keyboardFocused) {
                        var zDepth = keyboardFocused && !_this.props.disabled ? _this.state.initialZDepth + 1 : _this.state.initialZDepth;
                  
                        _this.setState({
                          zDepth: zDepth,
                          keyboardFocused: keyboardFocused
                        });
                      }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
                    }
                        disabled={false}
                        fullWidth={false}
                        icon={
                              <function _class() {
                                      _classCallCheck(this, _class);
                              
                                      return _possibleConstructorReturn(this, _Component.apply(this, arguments));
                                    } />
                        }
                        label="Submit User Info"
                        labelPosition="after"
                        onClick={[Function]}
                        primary={false}
                        secondary={true} />
            </div>
      </form>
</div>,
  ],
  "options": Object {},
  "renderer": ReactShallowRenderer {
    "_instance": ShallowComponentWrapper {
      "_calledComponentWillUnmount": false,
      "_compositeType": 0,
      "_context": Object {},
      "_currentElement": <class UserForm extends /* istanbul ignore next */_react.Component {

  constructor(props) {
    super(props); /* istanbul ignore next */this.





    componentDidMount = () => {
      const userRoles = this.props.scratch.scope;
      let roles = this.props.fetchSiteById.roles.map(r => {
        let ur = userRoles.find(u => u.id === r.id);
        if (ur) {
          r.checked = true;
        }
        return r;
      });
      this.setState({ roles });
    }; /* istanbul ignore next */this.

    _onCheck = (e, val, field) => {
      this.props.actions.setUserProp({ [field]: val });
    }; /* istanbul ignore next */this.

    _onCancelForm = () => {
      this.props.closeFormFunc();
    }; /* istanbul ignore next */this.

    _onCheckRole = (e, val, field) => {
      const rs = this.state.roles.map(r => {
        if (r.id === field.id) {
          r.checked = val;
        }
        return r;
      });
      this.setState({ roles: rs });
      const userRoles = rs.filter(r => r.checked);
      const ur = userRoles.map(r => ({ id: r.id, label: r.label }));
      this.props.actions.setUserProp({ 'scope': ur });
    }; /* istanbul ignore next */this.

    _onPropChange = field => {
      const val = this.refs[field].input.value;
      this.props.actions.setUserProp({ [field]: val });
    }; /* istanbul ignore next */this.

    _validate = field => {
    }; /* istanbul ignore next */this.

    _onSubmit = () => {/* istanbul ignore next */var _props =
      this.props; /* istanbul ignore next */const createUser = _props.createUser; /* istanbul ignore next */const scratch = _props.scratch; /* istanbul ignore next */const updateUser = _props.updateUser;
      const edit = scratch._id ? true : false;
      const successMsg = edit ? 'User info successfully updated' : 'User successfully created';

      let p;
      if (edit) {
        p = updateUser(scratch);
      } else {
        p = createUser(scratch);
      }
      p.then(res => {
        this.props.closeFormFunc();
        this.props.actions.alertSend({
          dismissAfter: 2000,
          message: successMsg,
          type: 'success' });

      }).catch(err => {
        this.props.actions.alertSend({
          dismissAfter: 5000,
          message: \`ERROR: ${ err.message }\`,
          type: 'danger' });

      });
    };this.state = { roles: [] };}

  render() {

    let email = { error: false }; /* istanbul ignore next */var _props2 =
    this.props; /* istanbul ignore next */const loading = _props2.loading; /* istanbul ignore next */const scratch = _props2.scratch;

    if (loading) {
      return (
        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ __source: { fileName: _jsxFileName, lineNumber: 114 }, __self: this }, /* istanbul ignore next */'Loading...'));

    }
    if (this.props.error) {
      return (
        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ __source: { fileName: _jsxFileName, lineNumber: 119 }, __self: this }, /* istanbul ignore next */'Fatal error occurred: ', this.props.error.message));

    }

    return (
      /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ style: { margin: 'auto' }, __source: { fileName: _jsxFileName, lineNumber: 124 }, __self: this },
        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'form', /* istanbul ignore next */{ onSubmit: () => this._onSubmit(), __source: { fileName: _jsxFileName, lineNumber: 125 }, __self: this },

          /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'legend', /* istanbul ignore next */{ className: 'row', __source: { fileName: _jsxFileName, lineNumber: 127 }, __self: this }, /* istanbul ignore next */'Login'),
          /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'form-row', __source: { fileName: _jsxFileName, lineNumber: 128 }, __self: this },
            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_TextField2.default, /* istanbul ignore next */{
              className: 'form-text-input',
              errorText: email.error && 'This field is required',
              floatingLabelText: 'Email',
              onChange: () => this._onPropChange('email'),
              onBlur: () => this._validate('email'),
              ref: 'email',
              type: 'email',
              value: scratch.email || '', __source: { fileName: _jsxFileName, lineNumber: 129 }, __self: this }),

            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'form-row-spacer', __source: { fileName: _jsxFileName, lineNumber: 139 }, __self: this }),
            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_TextField2.default, /* istanbul ignore next */{
              className: 'form-text-input',
              floatingLabelText: 'Password',
              onChange: () => this._onPropChange('password'),
              onBlur: () => this._validate('password'),
              ref: 'password',
              type: 'password',
              value: scratch.password || '', __source: { fileName: _jsxFileName, lineNumber: 140 }, __self: this })),



          /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'legend', /* istanbul ignore next */{ className: 'row', __source: { fileName: _jsxFileName, lineNumber: 151 }, __self: this }, /* istanbul ignore next */'Contact'),
          /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'form-row', __source: { fileName: _jsxFileName, lineNumber: 152 }, __self: this },
            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_TextField2.default, /* istanbul ignore next */{
              className: 'form-text-input',
              floatingLabelText: 'First Name',
              onChange: () => this._onPropChange('contact.name.first'),
              onBlur: () => this._validate('contact.name.first'),
              ref: 'contact.name.first',
              value: scratch.contact.name.first || '', __source: { fileName: _jsxFileName, lineNumber: 153 }, __self: this }),

            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'form-row-spacer', __source: { fileName: _jsxFileName, lineNumber: 161 }, __self: this }),
            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_TextField2.default, /* istanbul ignore next */{
              className: 'form-text-input',
              floatingLabelText: 'Last Name',
              onChange: () => this._onPropChange('contact.name.last'),
              onBlur: () => this._validate('contact.name.last'),
              ref: 'contact.name.last',
              value: scratch.contact.name.last || '', __source: { fileName: _jsxFileName, lineNumber: 162 }, __self: this })),



          /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'legend', /* istanbul ignore next */{ className: 'row', __source: { fileName: _jsxFileName, lineNumber: 172 }, __self: this }, /* istanbul ignore next */'Roles & Status'),
          /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'form-row', __source: { fileName: _jsxFileName, lineNumber: 173 }, __self: this },
            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ style: { flex: 1 }, __source: { fileName: _jsxFileName, lineNumber: 174 }, __self: this },
              /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_Subheader2.default, /* istanbul ignore next */{ __source: { fileName: _jsxFileName, lineNumber: 175 }, __self: this }, /* istanbul ignore next */'Status'),
              /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_Checkbox2.default, /* istanbul ignore next */{
                className: 'form-text-input',
                label: 'Active',
                labelPosition: 'right',
                onBlur: () => this._validate('active'),
                onCheck: (e, val) => this._onCheck(e, val, 'active'),
                ref: 'active',
                checked: scratch.active, __source: { fileName: _jsxFileName, lineNumber: 176 }, __self: this })),


            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ style: { flex: 1.25 }, __source: { fileName: _jsxFileName, lineNumber: 186 }, __self: this },
              /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_Subheader2.default, /* istanbul ignore next */{ __source: { fileName: _jsxFileName, lineNumber: 187 }, __self: this }, /* istanbul ignore next */'Roles'),
              /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_List.List, /* istanbul ignore next */{ __source: { fileName: _jsxFileName, lineNumber: 188 }, __self: this },
                this.state.roles.length && this.state.roles.map(r => {
                  return (
                    /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_Checkbox2.default, /* istanbul ignore next */{
                      key: r.id,
                      label: /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ style: { width: 130 }, __source: { fileName: _jsxFileName, lineNumber: 193 }, __self: this }, r.label),
                      labelPosition: 'right',
                      onCheck: (e, val) => this._onCheckRole(e, val, r),
                      defaultChecked: r.checked,
                      value: r.id,
                      style: { marginBottom: 10 }, __source: { fileName: _jsxFileName, lineNumber: 191 }, __self: this }));


                })))),




          /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'form-row', style: { justifyContent: 'space-around' }, __source: { fileName: _jsxFileName, lineNumber: 206 }, __self: this },
            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_RaisedButton2.default, /* istanbul ignore next */{
              icon: /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_clear2.default, /* istanbul ignore next */{ __source: { fileName: _jsxFileName, lineNumber: 208 }, __self: this }),
              label: 'Cancel',
              onClick: () => this._onCancelForm(), __source: { fileName: _jsxFileName, lineNumber: 207 }, __self: this }),

            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_RaisedButton2.default, /* istanbul ignore next */{
              icon: /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_done2.default, /* istanbul ignore next */{ __source: { fileName: _jsxFileName, lineNumber: 213 }, __self: this }),
              label: 'Submit User Info',
              onClick: () => this._onSubmit(),
              secondary: true, __source: { fileName: _jsxFileName, lineNumber: 212 }, __self: this })))));





  }}
        actions={
                Object {
                        "setUserProp": [Function],
                      }
        }
        scratch={
                Object {
                        "active": false,
                        "contact": Object {
                          "_id": null,
                          "email": null,
                          "name": Object {
                            "first": null,
                            "last": null,
                          },
                        },
                        "domainID": null,
                        "email": null,
                        "password": null,
                        "scope": Array [],
                      }
        } />,
      "_debugID": 1,
      "_hostContainerInfo": null,
      "_hostParent": null,
      "_instance": UserForm {
        "_onCancelForm": [Function],
        "_onCheck": [Function],
        "_onCheckRole": [Function],
        "_onPropChange": [Function],
        "_onSubmit": [Function],
        "_reactInternalInstance": [Circular],
        "_validate": [Function],
        "componentDidMount": [Function],
        "context": Object {},
        "props": Object {
          "actions": Object {
            "setUserProp": [Function],
          },
          "scratch": Object {
            "active": false,
            "contact": Object {
              "_id": null,
              "email": null,
              "name": Object {
                "first": null,
                "last": null,
              },
            },
            "domainID": null,
            "email": null,
            "password": null,
            "scope": Array [],
          },
        },
        "refs": Object {},
        "state": Object {
          "roles": Array [],
        },
        "updater": Object {
          "enqueueCallback": [Function],
          "enqueueCallbackInternal": [Function],
          "enqueueElementInternal": [Function],
          "enqueueForceUpdate": [Function],
          "enqueueReplaceState": [Function],
          "enqueueSetState": [Function],
          "isMounted": [Function],
          "validateCallback": [Function],
        },
      },
      "_mountOrder": 1,
      "_pendingCallbacks": null,
      "_pendingElement": null,
      "_pendingForceUpdate": false,
      "_pendingReplaceState": false,
      "_pendingStateQueue": null,
      "_renderedComponent": Object {
        "_currentElement": <div
          style={
                    Object {
                              "margin": "auto",
                            }
          }>
          <form
                    onSubmit={[Function]}>
                    <legend
                              className="row">
                              Login
                    </legend>
                    <div
                              className="form-row">
                              <function TextField() {
                                  var _ref;
                              
                                  var _temp, _this, _ret;
                              
                                  (0, _classCallCheck3.default)(this, TextField);
                              
                                  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                                    args[_key] = arguments[_key];
                                  }
                              
                                  return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = TextField.__proto__ || (0, _getPrototypeOf2.default)(TextField)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
                                    isFocused: false,
                                    errorText: undefined,
                                    hasValue: false,
                                    isClean: true
                                  }, _this.handleInputBlur = function (event) {
                                    _this.setState({ isFocused: false });
                                    if (_this.props.onBlur) _this.props.onBlur(event);
                                  }, _this.handleInputChange = function (event) {
                                    _this.setState({ hasValue: isValid(event.target.value), isClean: false });
                                    if (_this.props.onChange) _this.props.onChange(event, event.target.value);
                                  }, _this.handleInputFocus = function (event) {
                                    if (_this.props.disabled) {
                                      return;
                                    }
                                    _this.setState({ isFocused: true });
                                    if (_this.props.onFocus) {
                                      _this.props.onFocus(event);
                                    }
                                  }, _this.handleHeightChange = function (event, height) {
                                    var newHeight = height + 24;
                                    if (_this.props.floatingLabelText) {
                                      newHeight += 24;
                                    }
                                    _reactDom2.default.findDOMNode(_this).style.height = newHeight + 'px';
                                  }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
                                }
                                        className="form-text-input"
                                        disabled={false}
                                        errorText={false}
                                        floatingLabelFixed={false}
                                        floatingLabelText="Email"
                                        fullWidth={false}
                                        multiLine={false}
                                        onBlur={[Function]}
                                        onChange={[Function]}
                                        rows={1}
                                        type="email"
                                        underlineShow={true}
                                        value="" />
                              <div
                                        className="form-row-spacer" />
                              <function TextField() {
                                  var _ref;
                              
                                  var _temp, _this, _ret;
                              
                                  (0, _classCallCheck3.default)(this, TextField);
                              
                                  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                                    args[_key] = arguments[_key];
                                  }
                              
                                  return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = TextField.__proto__ || (0, _getPrototypeOf2.default)(TextField)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
                                    isFocused: false,
                                    errorText: undefined,
                                    hasValue: false,
                                    isClean: true
                                  }, _this.handleInputBlur = function (event) {
                                    _this.setState({ isFocused: false });
                                    if (_this.props.onBlur) _this.props.onBlur(event);
                                  }, _this.handleInputChange = function (event) {
                                    _this.setState({ hasValue: isValid(event.target.value), isClean: false });
                                    if (_this.props.onChange) _this.props.onChange(event, event.target.value);
                                  }, _this.handleInputFocus = function (event) {
                                    if (_this.props.disabled) {
                                      return;
                                    }
                                    _this.setState({ isFocused: true });
                                    if (_this.props.onFocus) {
                                      _this.props.onFocus(event);
                                    }
                                  }, _this.handleHeightChange = function (event, height) {
                                    var newHeight = height + 24;
                                    if (_this.props.floatingLabelText) {
                                      newHeight += 24;
                                    }
                                    _reactDom2.default.findDOMNode(_this).style.height = newHeight + 'px';
                                  }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
                                }
                                        className="form-text-input"
                                        disabled={false}
                                        floatingLabelFixed={false}
                                        floatingLabelText="Password"
                                        fullWidth={false}
                                        multiLine={false}
                                        onBlur={[Function]}
                                        onChange={[Function]}
                                        rows={1}
                                        type="password"
                                        underlineShow={true}
                                        value="" />
                    </div>
                    <legend
                              className="row">
                              Contact
                    </legend>
                    <div
                              className="form-row">
                              <function TextField() {
                                  var _ref;
                              
                                  var _temp, _this, _ret;
                              
                                  (0, _classCallCheck3.default)(this, TextField);
                              
                                  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                                    args[_key] = arguments[_key];
                                  }
                              
                                  return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = TextField.__proto__ || (0, _getPrototypeOf2.default)(TextField)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
                                    isFocused: false,
                                    errorText: undefined,
                                    hasValue: false,
                                    isClean: true
                                  }, _this.handleInputBlur = function (event) {
                                    _this.setState({ isFocused: false });
                                    if (_this.props.onBlur) _this.props.onBlur(event);
                                  }, _this.handleInputChange = function (event) {
                                    _this.setState({ hasValue: isValid(event.target.value), isClean: false });
                                    if (_this.props.onChange) _this.props.onChange(event, event.target.value);
                                  }, _this.handleInputFocus = function (event) {
                                    if (_this.props.disabled) {
                                      return;
                                    }
                                    _this.setState({ isFocused: true });
                                    if (_this.props.onFocus) {
                                      _this.props.onFocus(event);
                                    }
                                  }, _this.handleHeightChange = function (event, height) {
                                    var newHeight = height + 24;
                                    if (_this.props.floatingLabelText) {
                                      newHeight += 24;
                                    }
                                    _reactDom2.default.findDOMNode(_this).style.height = newHeight + 'px';
                                  }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
                                }
                                        className="form-text-input"
                                        disabled={false}
                                        floatingLabelFixed={false}
                                        floatingLabelText="First Name"
                                        fullWidth={false}
                                        multiLine={false}
                                        onBlur={[Function]}
                                        onChange={[Function]}
                                        rows={1}
                                        type="text"
                                        underlineShow={true}
                                        value="" />
                              <div
                                        className="form-row-spacer" />
                              <function TextField() {
                                  var _ref;
                              
                                  var _temp, _this, _ret;
                              
                                  (0, _classCallCheck3.default)(this, TextField);
                              
                                  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                                    args[_key] = arguments[_key];
                                  }
                              
                                  return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = TextField.__proto__ || (0, _getPrototypeOf2.default)(TextField)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
                                    isFocused: false,
                                    errorText: undefined,
                                    hasValue: false,
                                    isClean: true
                                  }, _this.handleInputBlur = function (event) {
                                    _this.setState({ isFocused: false });
                                    if (_this.props.onBlur) _this.props.onBlur(event);
                                  }, _this.handleInputChange = function (event) {
                                    _this.setState({ hasValue: isValid(event.target.value), isClean: false });
                                    if (_this.props.onChange) _this.props.onChange(event, event.target.value);
                                  }, _this.handleInputFocus = function (event) {
                                    if (_this.props.disabled) {
                                      return;
                                    }
                                    _this.setState({ isFocused: true });
                                    if (_this.props.onFocus) {
                                      _this.props.onFocus(event);
                                    }
                                  }, _this.handleHeightChange = function (event, height) {
                                    var newHeight = height + 24;
                                    if (_this.props.floatingLabelText) {
                                      newHeight += 24;
                                    }
                                    _reactDom2.default.findDOMNode(_this).style.height = newHeight + 'px';
                                  }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
                                }
                                        className="form-text-input"
                                        disabled={false}
                                        floatingLabelFixed={false}
                                        floatingLabelText="Last Name"
                                        fullWidth={false}
                                        multiLine={false}
                                        onBlur={[Function]}
                                        onChange={[Function]}
                                        rows={1}
                                        type="text"
                                        underlineShow={true}
                                        value="" />
                    </div>
                    <legend
                              className="row">
                              Roles & Status
                    </legend>
                    <div
                              className="form-row">
                              <div
                                        style={
                                                  Object {
                                                            "flex": 1,
                                                          }
                                        }>
                                        <function Subheader(props, context) {
                                          var children = props.children;
                                          var inset = props.inset;
                                          var style = props.style;
                                          var other = (0, _objectWithoutProperties3.default)(props, ['children', 'inset', 'style']);
                                          var _context$muiTheme = context.muiTheme;
                                          var prepareStyles = _context$muiTheme.prepareStyles;
                                          var subheader = _context$muiTheme.subheader;
                                        
                                        
                                          var styles = {
                                            root: {
                                              boxSizing: 'border-box',
                                              color: subheader.color,
                                              fontSize: 14,
                                              fontWeight: subheader.fontWeight,
                                              lineHeight: '48px',
                                              paddingLeft: inset ? 72 : 16,
                                              width: '100%'
                                            }
                                          };
                                        
                                          return _react2.default.createElement(
                                            'div',
                                            (0, _extends3.default)({}, other, { style: prepareStyles((0, _simpleAssign2.default)(styles.root, style)) }),
                                            children
                                          );
                                        }
                                                  inset={false}>
                                                  Status
                                        </function Subheader(props, context) {
                                          var children = props.children;
                                          var inset = props.inset;
                                          var style = props.style;
                                          var other = (0, _objectWithoutProperties3.default)(props, ['children', 'inset', 'style']);
                                          var _context$muiTheme = context.muiTheme;
                                          var prepareStyles = _context$muiTheme.prepareStyles;
                                          var subheader = _context$muiTheme.subheader;
                                        
                                        
                                          var styles = {
                                            root: {
                                              boxSizing: 'border-box',
                                              color: subheader.color,
                                              fontSize: 14,
                                              fontWeight: subheader.fontWeight,
                                              lineHeight: '48px',
                                              paddingLeft: inset ? 72 : 16,
                                              width: '100%'
                                            }
                                          };
                                        
                                          return _react2.default.createElement(
                                            'div',
                                            (0, _extends3.default)({}, other, { style: prepareStyles((0, _simpleAssign2.default)(styles.root, style)) }),
                                            children
                                          );
                                        }>
                                        <function Checkbox() {
                                            var _ref;
                                        
                                            var _temp, _this, _ret;
                                        
                                            (0, _classCallCheck3.default)(this, Checkbox);
                                        
                                            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                                              args[_key] = arguments[_key];
                                            }
                                        
                                            return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = Checkbox.__proto__ || (0, _getPrototypeOf2.default)(Checkbox)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
                                              switched: false
                                            }, _this.handleStateChange = function (newSwitched) {
                                              _this.setState({
                                                switched: newSwitched
                                              });
                                            }, _this.handleCheck = function (event, isInputChecked) {
                                              if (_this.props.onCheck) {
                                                _this.props.onCheck(event, isInputChecked);
                                              }
                                            }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
                                          }
                                                  checked={false}
                                                  className="form-text-input"
                                                  disabled={false}
                                                  label="Active"
                                                  labelPosition="right"
                                                  onBlur={[Function]}
                                                  onCheck={[Function]} />
                              </div>
                              <div
                                        style={
                                                  Object {
                                                            "flex": 1.25,
                                                          }
                                        }>
                                        <function Subheader(props, context) {
                                          var children = props.children;
                                          var inset = props.inset;
                                          var style = props.style;
                                          var other = (0, _objectWithoutProperties3.default)(props, ['children', 'inset', 'style']);
                                          var _context$muiTheme = context.muiTheme;
                                          var prepareStyles = _context$muiTheme.prepareStyles;
                                          var subheader = _context$muiTheme.subheader;
                                        
                                        
                                          var styles = {
                                            root: {
                                              boxSizing: 'border-box',
                                              color: subheader.color,
                                              fontSize: 14,
                                              fontWeight: subheader.fontWeight,
                                              lineHeight: '48px',
                                              paddingLeft: inset ? 72 : 16,
                                              width: '100%'
                                            }
                                          };
                                        
                                          return _react2.default.createElement(
                                            'div',
                                            (0, _extends3.default)({}, other, { style: prepareStyles((0, _simpleAssign2.default)(styles.root, style)) }),
                                            children
                                          );
                                        }
                                                  inset={false}>
                                                  Roles
                                        </function Subheader(props, context) {
                                          var children = props.children;
                                          var inset = props.inset;
                                          var style = props.style;
                                          var other = (0, _objectWithoutProperties3.default)(props, ['children', 'inset', 'style']);
                                          var _context$muiTheme = context.muiTheme;
                                          var prepareStyles = _context$muiTheme.prepareStyles;
                                          var subheader = _context$muiTheme.subheader;
                                        
                                        
                                          var styles = {
                                            root: {
                                              boxSizing: 'border-box',
                                              color: subheader.color,
                                              fontSize: 14,
                                              fontWeight: subheader.fontWeight,
                                              lineHeight: '48px',
                                              paddingLeft: inset ? 72 : 16,
                                              width: '100%'
                                            }
                                          };
                                        
                                          return _react2.default.createElement(
                                            'div',
                                            (0, _extends3.default)({}, other, { style: prepareStyles((0, _simpleAssign2.default)(styles.root, style)) }),
                                            children
                                          );
                                        }>
                                        <function List() {
                                            (0, _classCallCheck3.default)(this, List);
                                            return (0, _possibleConstructorReturn3.default)(this, (List.__proto__ || (0, _getPrototypeOf2.default)(List)).apply(this, arguments));
                                          } />
                              </div>
                    </div>
                    <div
                              className="form-row"
                              style={
                                        Object {
                                                  "justifyContent": "space-around",
                                                }
                              }>
                              <function RaisedButton() {
                                  var _ref;
                              
                                  var _temp, _this, _ret;
                              
                                  (0, _classCallCheck3.default)(this, RaisedButton);
                              
                                  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                                    args[_key] = arguments[_key];
                                  }
                              
                                  return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = RaisedButton.__proto__ || (0, _getPrototypeOf2.default)(RaisedButton)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
                                    hovered: false,
                                    keyboardFocused: false,
                                    touched: false,
                                    initialZDepth: 0,
                                    zDepth: 0
                                  }, _this.handleMouseDown = function (event) {
                                    // only listen to left clicks
                                    if (event.button === 0) {
                                      _this.setState({
                                        zDepth: _this.state.initialZDepth + 1
                                      });
                                    }
                                    if (_this.props.onMouseDown) {
                                      _this.props.onMouseDown(event);
                                    }
                                  }, _this.handleMouseUp = function (event) {
                                    _this.setState({
                                      zDepth: _this.state.initialZDepth
                                    });
                                    if (_this.props.onMouseUp) {
                                      _this.props.onMouseUp(event);
                                    }
                                  }, _this.handleMouseLeave = function (event) {
                                    if (!_this.state.keyboardFocused) {
                                      _this.setState({
                                        zDepth: _this.state.initialZDepth,
                                        hovered: false
                                      });
                                    }
                                    if (_this.props.onMouseLeave) {
                                      _this.props.onMouseLeave(event);
                                    }
                                  }, _this.handleMouseEnter = function (event) {
                                    if (!_this.state.keyboardFocused && !_this.state.touched) {
                                      _this.setState({
                                        hovered: true
                                      });
                                    }
                                    if (_this.props.onMouseEnter) {
                                      _this.props.onMouseEnter(event);
                                    }
                                  }, _this.handleTouchStart = function (event) {
                                    _this.setState({
                                      touched: true,
                                      zDepth: _this.state.initialZDepth + 1
                                    });
                              
                                    if (_this.props.onTouchStart) {
                                      _this.props.onTouchStart(event);
                                    }
                                  }, _this.handleTouchEnd = function (event) {
                                    _this.setState({
                                      zDepth: _this.state.initialZDepth
                                    });
                              
                                    if (_this.props.onTouchEnd) {
                                      _this.props.onTouchEnd(event);
                                    }
                                  }, _this.handleKeyboardFocus = function (event, keyboardFocused) {
                                    var zDepth = keyboardFocused && !_this.props.disabled ? _this.state.initialZDepth + 1 : _this.state.initialZDepth;
                              
                                    _this.setState({
                                      zDepth: zDepth,
                                      keyboardFocused: keyboardFocused
                                    });
                                  }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
                                }
                                        disabled={false}
                                        fullWidth={false}
                                        icon={
                                                  <function _class() {
                                                          _classCallCheck(this, _class);
                                                  
                                                          return _possibleConstructorReturn(this, _Component.apply(this, arguments));
                                                        } />
                                        }
                                        label="Cancel"
                                        labelPosition="after"
                                        onClick={[Function]}
                                        primary={false}
                                        secondary={false} />
                              <function RaisedButton() {
                                  var _ref;
                              
                                  var _temp, _this, _ret;
                              
                                  (0, _classCallCheck3.default)(this, RaisedButton);
                              
                                  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                                    args[_key] = arguments[_key];
                                  }
                              
                                  return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = RaisedButton.__proto__ || (0, _getPrototypeOf2.default)(RaisedButton)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
                                    hovered: false,
                                    keyboardFocused: false,
                                    touched: false,
                                    initialZDepth: 0,
                                    zDepth: 0
                                  }, _this.handleMouseDown = function (event) {
                                    // only listen to left clicks
                                    if (event.button === 0) {
                                      _this.setState({
                                        zDepth: _this.state.initialZDepth + 1
                                      });
                                    }
                                    if (_this.props.onMouseDown) {
                                      _this.props.onMouseDown(event);
                                    }
                                  }, _this.handleMouseUp = function (event) {
                                    _this.setState({
                                      zDepth: _this.state.initialZDepth
                                    });
                                    if (_this.props.onMouseUp) {
                                      _this.props.onMouseUp(event);
                                    }
                                  }, _this.handleMouseLeave = function (event) {
                                    if (!_this.state.keyboardFocused) {
                                      _this.setState({
                                        zDepth: _this.state.initialZDepth,
                                        hovered: false
                                      });
                                    }
                                    if (_this.props.onMouseLeave) {
                                      _this.props.onMouseLeave(event);
                                    }
                                  }, _this.handleMouseEnter = function (event) {
                                    if (!_this.state.keyboardFocused && !_this.state.touched) {
                                      _this.setState({
                                        hovered: true
                                      });
                                    }
                                    if (_this.props.onMouseEnter) {
                                      _this.props.onMouseEnter(event);
                                    }
                                  }, _this.handleTouchStart = function (event) {
                                    _this.setState({
                                      touched: true,
                                      zDepth: _this.state.initialZDepth + 1
                                    });
                              
                                    if (_this.props.onTouchStart) {
                                      _this.props.onTouchStart(event);
                                    }
                                  }, _this.handleTouchEnd = function (event) {
                                    _this.setState({
                                      zDepth: _this.state.initialZDepth
                                    });
                              
                                    if (_this.props.onTouchEnd) {
                                      _this.props.onTouchEnd(event);
                                    }
                                  }, _this.handleKeyboardFocus = function (event, keyboardFocused) {
                                    var zDepth = keyboardFocused && !_this.props.disabled ? _this.state.initialZDepth + 1 : _this.state.initialZDepth;
                              
                                    _this.setState({
                                      zDepth: zDepth,
                                      keyboardFocused: keyboardFocused
                                    });
                                  }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
                                }
                                        disabled={false}
                                        fullWidth={false}
                                        icon={
                                                  <function _class() {
                                                          _classCallCheck(this, _class);
                                                  
                                                          return _possibleConstructorReturn(this, _Component.apply(this, arguments));
                                                        } />
                                        }
                                        label="Submit User Info"
                                        labelPosition="after"
                                        onClick={[Function]}
                                        primary={false}
                                        secondary={true} />
                    </div>
          </form>
</div>,
        "_debugID": 2,
        "_renderedOutput": <div
          style={
                    Object {
                              "margin": "auto",
                            }
          }>
          <form
                    onSubmit={[Function]}>
                    <legend
                              className="row">
                              Login
                    </legend>
                    <div
                              className="form-row">
                              <function TextField() {
                                  var _ref;
                              
                                  var _temp, _this, _ret;
                              
                                  (0, _classCallCheck3.default)(this, TextField);
                              
                                  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                                    args[_key] = arguments[_key];
                                  }
                              
                                  return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = TextField.__proto__ || (0, _getPrototypeOf2.default)(TextField)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
                                    isFocused: false,
                                    errorText: undefined,
                                    hasValue: false,
                                    isClean: true
                                  }, _this.handleInputBlur = function (event) {
                                    _this.setState({ isFocused: false });
                                    if (_this.props.onBlur) _this.props.onBlur(event);
                                  }, _this.handleInputChange = function (event) {
                                    _this.setState({ hasValue: isValid(event.target.value), isClean: false });
                                    if (_this.props.onChange) _this.props.onChange(event, event.target.value);
                                  }, _this.handleInputFocus = function (event) {
                                    if (_this.props.disabled) {
                                      return;
                                    }
                                    _this.setState({ isFocused: true });
                                    if (_this.props.onFocus) {
                                      _this.props.onFocus(event);
                                    }
                                  }, _this.handleHeightChange = function (event, height) {
                                    var newHeight = height + 24;
                                    if (_this.props.floatingLabelText) {
                                      newHeight += 24;
                                    }
                                    _reactDom2.default.findDOMNode(_this).style.height = newHeight + 'px';
                                  }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
                                }
                                        className="form-text-input"
                                        disabled={false}
                                        errorText={false}
                                        floatingLabelFixed={false}
                                        floatingLabelText="Email"
                                        fullWidth={false}
                                        multiLine={false}
                                        onBlur={[Function]}
                                        onChange={[Function]}
                                        rows={1}
                                        type="email"
                                        underlineShow={true}
                                        value="" />
                              <div
                                        className="form-row-spacer" />
                              <function TextField() {
                                  var _ref;
                              
                                  var _temp, _this, _ret;
                              
                                  (0, _classCallCheck3.default)(this, TextField);
                              
                                  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                                    args[_key] = arguments[_key];
                                  }
                              
                                  return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = TextField.__proto__ || (0, _getPrototypeOf2.default)(TextField)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
                                    isFocused: false,
                                    errorText: undefined,
                                    hasValue: false,
                                    isClean: true
                                  }, _this.handleInputBlur = function (event) {
                                    _this.setState({ isFocused: false });
                                    if (_this.props.onBlur) _this.props.onBlur(event);
                                  }, _this.handleInputChange = function (event) {
                                    _this.setState({ hasValue: isValid(event.target.value), isClean: false });
                                    if (_this.props.onChange) _this.props.onChange(event, event.target.value);
                                  }, _this.handleInputFocus = function (event) {
                                    if (_this.props.disabled) {
                                      return;
                                    }
                                    _this.setState({ isFocused: true });
                                    if (_this.props.onFocus) {
                                      _this.props.onFocus(event);
                                    }
                                  }, _this.handleHeightChange = function (event, height) {
                                    var newHeight = height + 24;
                                    if (_this.props.floatingLabelText) {
                                      newHeight += 24;
                                    }
                                    _reactDom2.default.findDOMNode(_this).style.height = newHeight + 'px';
                                  }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
                                }
                                        className="form-text-input"
                                        disabled={false}
                                        floatingLabelFixed={false}
                                        floatingLabelText="Password"
                                        fullWidth={false}
                                        multiLine={false}
                                        onBlur={[Function]}
                                        onChange={[Function]}
                                        rows={1}
                                        type="password"
                                        underlineShow={true}
                                        value="" />
                    </div>
                    <legend
                              className="row">
                              Contact
                    </legend>
                    <div
                              className="form-row">
                              <function TextField() {
                                  var _ref;
                              
                                  var _temp, _this, _ret;
                              
                                  (0, _classCallCheck3.default)(this, TextField);
                              
                                  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                                    args[_key] = arguments[_key];
                                  }
                              
                                  return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = TextField.__proto__ || (0, _getPrototypeOf2.default)(TextField)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
                                    isFocused: false,
                                    errorText: undefined,
                                    hasValue: false,
                                    isClean: true
                                  }, _this.handleInputBlur = function (event) {
                                    _this.setState({ isFocused: false });
                                    if (_this.props.onBlur) _this.props.onBlur(event);
                                  }, _this.handleInputChange = function (event) {
                                    _this.setState({ hasValue: isValid(event.target.value), isClean: false });
                                    if (_this.props.onChange) _this.props.onChange(event, event.target.value);
                                  }, _this.handleInputFocus = function (event) {
                                    if (_this.props.disabled) {
                                      return;
                                    }
                                    _this.setState({ isFocused: true });
                                    if (_this.props.onFocus) {
                                      _this.props.onFocus(event);
                                    }
                                  }, _this.handleHeightChange = function (event, height) {
                                    var newHeight = height + 24;
                                    if (_this.props.floatingLabelText) {
                                      newHeight += 24;
                                    }
                                    _reactDom2.default.findDOMNode(_this).style.height = newHeight + 'px';
                                  }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
                                }
                                        className="form-text-input"
                                        disabled={false}
                                        floatingLabelFixed={false}
                                        floatingLabelText="First Name"
                                        fullWidth={false}
                                        multiLine={false}
                                        onBlur={[Function]}
                                        onChange={[Function]}
                                        rows={1}
                                        type="text"
                                        underlineShow={true}
                                        value="" />
                              <div
                                        className="form-row-spacer" />
                              <function TextField() {
                                  var _ref;
                              
                                  var _temp, _this, _ret;
                              
                                  (0, _classCallCheck3.default)(this, TextField);
                              
                                  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                                    args[_key] = arguments[_key];
                                  }
                              
                                  return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = TextField.__proto__ || (0, _getPrototypeOf2.default)(TextField)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
                                    isFocused: false,
                                    errorText: undefined,
                                    hasValue: false,
                                    isClean: true
                                  }, _this.handleInputBlur = function (event) {
                                    _this.setState({ isFocused: false });
                                    if (_this.props.onBlur) _this.props.onBlur(event);
                                  }, _this.handleInputChange = function (event) {
                                    _this.setState({ hasValue: isValid(event.target.value), isClean: false });
                                    if (_this.props.onChange) _this.props.onChange(event, event.target.value);
                                  }, _this.handleInputFocus = function (event) {
                                    if (_this.props.disabled) {
                                      return;
                                    }
                                    _this.setState({ isFocused: true });
                                    if (_this.props.onFocus) {
                                      _this.props.onFocus(event);
                                    }
                                  }, _this.handleHeightChange = function (event, height) {
                                    var newHeight = height + 24;
                                    if (_this.props.floatingLabelText) {
                                      newHeight += 24;
                                    }
                                    _reactDom2.default.findDOMNode(_this).style.height = newHeight + 'px';
                                  }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
                                }
                                        className="form-text-input"
                                        disabled={false}
                                        floatingLabelFixed={false}
                                        floatingLabelText="Last Name"
                                        fullWidth={false}
                                        multiLine={false}
                                        onBlur={[Function]}
                                        onChange={[Function]}
                                        rows={1}
                                        type="text"
                                        underlineShow={true}
                                        value="" />
                    </div>
                    <legend
                              className="row">
                              Roles & Status
                    </legend>
                    <div
                              className="form-row">
                              <div
                                        style={
                                                  Object {
                                                            "flex": 1,
                                                          }
                                        }>
                                        <function Subheader(props, context) {
                                          var children = props.children;
                                          var inset = props.inset;
                                          var style = props.style;
                                          var other = (0, _objectWithoutProperties3.default)(props, ['children', 'inset', 'style']);
                                          var _context$muiTheme = context.muiTheme;
                                          var prepareStyles = _context$muiTheme.prepareStyles;
                                          var subheader = _context$muiTheme.subheader;
                                        
                                        
                                          var styles = {
                                            root: {
                                              boxSizing: 'border-box',
                                              color: subheader.color,
                                              fontSize: 14,
                                              fontWeight: subheader.fontWeight,
                                              lineHeight: '48px',
                                              paddingLeft: inset ? 72 : 16,
                                              width: '100%'
                                            }
                                          };
                                        
                                          return _react2.default.createElement(
                                            'div',
                                            (0, _extends3.default)({}, other, { style: prepareStyles((0, _simpleAssign2.default)(styles.root, style)) }),
                                            children
                                          );
                                        }
                                                  inset={false}>
                                                  Status
                                        </function Subheader(props, context) {
                                          var children = props.children;
                                          var inset = props.inset;
                                          var style = props.style;
                                          var other = (0, _objectWithoutProperties3.default)(props, ['children', 'inset', 'style']);
                                          var _context$muiTheme = context.muiTheme;
                                          var prepareStyles = _context$muiTheme.prepareStyles;
                                          var subheader = _context$muiTheme.subheader;
                                        
                                        
                                          var styles = {
                                            root: {
                                              boxSizing: 'border-box',
                                              color: subheader.color,
                                              fontSize: 14,
                                              fontWeight: subheader.fontWeight,
                                              lineHeight: '48px',
                                              paddingLeft: inset ? 72 : 16,
                                              width: '100%'
                                            }
                                          };
                                        
                                          return _react2.default.createElement(
                                            'div',
                                            (0, _extends3.default)({}, other, { style: prepareStyles((0, _simpleAssign2.default)(styles.root, style)) }),
                                            children
                                          );
                                        }>
                                        <function Checkbox() {
                                            var _ref;
                                        
                                            var _temp, _this, _ret;
                                        
                                            (0, _classCallCheck3.default)(this, Checkbox);
                                        
                                            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                                              args[_key] = arguments[_key];
                                            }
                                        
                                            return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = Checkbox.__proto__ || (0, _getPrototypeOf2.default)(Checkbox)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
                                              switched: false
                                            }, _this.handleStateChange = function (newSwitched) {
                                              _this.setState({
                                                switched: newSwitched
                                              });
                                            }, _this.handleCheck = function (event, isInputChecked) {
                                              if (_this.props.onCheck) {
                                                _this.props.onCheck(event, isInputChecked);
                                              }
                                            }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
                                          }
                                                  checked={false}
                                                  className="form-text-input"
                                                  disabled={false}
                                                  label="Active"
                                                  labelPosition="right"
                                                  onBlur={[Function]}
                                                  onCheck={[Function]} />
                              </div>
                              <div
                                        style={
                                                  Object {
                                                            "flex": 1.25,
                                                          }
                                        }>
                                        <function Subheader(props, context) {
                                          var children = props.children;
                                          var inset = props.inset;
                                          var style = props.style;
                                          var other = (0, _objectWithoutProperties3.default)(props, ['children', 'inset', 'style']);
                                          var _context$muiTheme = context.muiTheme;
                                          var prepareStyles = _context$muiTheme.prepareStyles;
                                          var subheader = _context$muiTheme.subheader;
                                        
                                        
                                          var styles = {
                                            root: {
                                              boxSizing: 'border-box',
                                              color: subheader.color,
                                              fontSize: 14,
                                              fontWeight: subheader.fontWeight,
                                              lineHeight: '48px',
                                              paddingLeft: inset ? 72 : 16,
                                              width: '100%'
                                            }
                                          };
                                        
                                          return _react2.default.createElement(
                                            'div',
                                            (0, _extends3.default)({}, other, { style: prepareStyles((0, _simpleAssign2.default)(styles.root, style)) }),
                                            children
                                          );
                                        }
                                                  inset={false}>
                                                  Roles
                                        </function Subheader(props, context) {
                                          var children = props.children;
                                          var inset = props.inset;
                                          var style = props.style;
                                          var other = (0, _objectWithoutProperties3.default)(props, ['children', 'inset', 'style']);
                                          var _context$muiTheme = context.muiTheme;
                                          var prepareStyles = _context$muiTheme.prepareStyles;
                                          var subheader = _context$muiTheme.subheader;
                                        
                                        
                                          var styles = {
                                            root: {
                                              boxSizing: 'border-box',
                                              color: subheader.color,
                                              fontSize: 14,
                                              fontWeight: subheader.fontWeight,
                                              lineHeight: '48px',
                                              paddingLeft: inset ? 72 : 16,
                                              width: '100%'
                                            }
                                          };
                                        
                                          return _react2.default.createElement(
                                            'div',
                                            (0, _extends3.default)({}, other, { style: prepareStyles((0, _simpleAssign2.default)(styles.root, style)) }),
                                            children
                                          );
                                        }>
                                        <function List() {
                                            (0, _classCallCheck3.default)(this, List);
                                            return (0, _possibleConstructorReturn3.default)(this, (List.__proto__ || (0, _getPrototypeOf2.default)(List)).apply(this, arguments));
                                          } />
                              </div>
                    </div>
                    <div
                              className="form-row"
                              style={
                                        Object {
                                                  "justifyContent": "space-around",
                                                }
                              }>
                              <function RaisedButton() {
                                  var _ref;
                              
                                  var _temp, _this, _ret;
                              
                                  (0, _classCallCheck3.default)(this, RaisedButton);
                              
                                  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                                    args[_key] = arguments[_key];
                                  }
                              
                                  return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = RaisedButton.__proto__ || (0, _getPrototypeOf2.default)(RaisedButton)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
                                    hovered: false,
                                    keyboardFocused: false,
                                    touched: false,
                                    initialZDepth: 0,
                                    zDepth: 0
                                  }, _this.handleMouseDown = function (event) {
                                    // only listen to left clicks
                                    if (event.button === 0) {
                                      _this.setState({
                                        zDepth: _this.state.initialZDepth + 1
                                      });
                                    }
                                    if (_this.props.onMouseDown) {
                                      _this.props.onMouseDown(event);
                                    }
                                  }, _this.handleMouseUp = function (event) {
                                    _this.setState({
                                      zDepth: _this.state.initialZDepth
                                    });
                                    if (_this.props.onMouseUp) {
                                      _this.props.onMouseUp(event);
                                    }
                                  }, _this.handleMouseLeave = function (event) {
                                    if (!_this.state.keyboardFocused) {
                                      _this.setState({
                                        zDepth: _this.state.initialZDepth,
                                        hovered: false
                                      });
                                    }
                                    if (_this.props.onMouseLeave) {
                                      _this.props.onMouseLeave(event);
                                    }
                                  }, _this.handleMouseEnter = function (event) {
                                    if (!_this.state.keyboardFocused && !_this.state.touched) {
                                      _this.setState({
                                        hovered: true
                                      });
                                    }
                                    if (_this.props.onMouseEnter) {
                                      _this.props.onMouseEnter(event);
                                    }
                                  }, _this.handleTouchStart = function (event) {
                                    _this.setState({
                                      touched: true,
                                      zDepth: _this.state.initialZDepth + 1
                                    });
                              
                                    if (_this.props.onTouchStart) {
                                      _this.props.onTouchStart(event);
                                    }
                                  }, _this.handleTouchEnd = function (event) {
                                    _this.setState({
                                      zDepth: _this.state.initialZDepth
                                    });
                              
                                    if (_this.props.onTouchEnd) {
                                      _this.props.onTouchEnd(event);
                                    }
                                  }, _this.handleKeyboardFocus = function (event, keyboardFocused) {
                                    var zDepth = keyboardFocused && !_this.props.disabled ? _this.state.initialZDepth + 1 : _this.state.initialZDepth;
                              
                                    _this.setState({
                                      zDepth: zDepth,
                                      keyboardFocused: keyboardFocused
                                    });
                                  }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
                                }
                                        disabled={false}
                                        fullWidth={false}
                                        icon={
                                                  <function _class() {
                                                          _classCallCheck(this, _class);
                                                  
                                                          return _possibleConstructorReturn(this, _Component.apply(this, arguments));
                                                        } />
                                        }
                                        label="Cancel"
                                        labelPosition="after"
                                        onClick={[Function]}
                                        primary={false}
                                        secondary={false} />
                              <function RaisedButton() {
                                  var _ref;
                              
                                  var _temp, _this, _ret;
                              
                                  (0, _classCallCheck3.default)(this, RaisedButton);
                              
                                  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                                    args[_key] = arguments[_key];
                                  }
                              
                                  return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = RaisedButton.__proto__ || (0, _getPrototypeOf2.default)(RaisedButton)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
                                    hovered: false,
                                    keyboardFocused: false,
                                    touched: false,
                                    initialZDepth: 0,
                                    zDepth: 0
                                  }, _this.handleMouseDown = function (event) {
                                    // only listen to left clicks
                                    if (event.button === 0) {
                                      _this.setState({
                                        zDepth: _this.state.initialZDepth + 1
                                      });
                                    }
                                    if (_this.props.onMouseDown) {
                                      _this.props.onMouseDown(event);
                                    }
                                  }, _this.handleMouseUp = function (event) {
                                    _this.setState({
                                      zDepth: _this.state.initialZDepth
                                    });
                                    if (_this.props.onMouseUp) {
                                      _this.props.onMouseUp(event);
                                    }
                                  }, _this.handleMouseLeave = function (event) {
                                    if (!_this.state.keyboardFocused) {
                                      _this.setState({
                                        zDepth: _this.state.initialZDepth,
                                        hovered: false
                                      });
                                    }
                                    if (_this.props.onMouseLeave) {
                                      _this.props.onMouseLeave(event);
                                    }
                                  }, _this.handleMouseEnter = function (event) {
                                    if (!_this.state.keyboardFocused && !_this.state.touched) {
                                      _this.setState({
                                        hovered: true
                                      });
                                    }
                                    if (_this.props.onMouseEnter) {
                                      _this.props.onMouseEnter(event);
                                    }
                                  }, _this.handleTouchStart = function (event) {
                                    _this.setState({
                                      touched: true,
                                      zDepth: _this.state.initialZDepth + 1
                                    });
                              
                                    if (_this.props.onTouchStart) {
                                      _this.props.onTouchStart(event);
                                    }
                                  }, _this.handleTouchEnd = function (event) {
                                    _this.setState({
                                      zDepth: _this.state.initialZDepth
                                    });
                              
                                    if (_this.props.onTouchEnd) {
                                      _this.props.onTouchEnd(event);
                                    }
                                  }, _this.handleKeyboardFocus = function (event, keyboardFocused) {
                                    var zDepth = keyboardFocused && !_this.props.disabled ? _this.state.initialZDepth + 1 : _this.state.initialZDepth;
                              
                                    _this.setState({
                                      zDepth: zDepth,
                                      keyboardFocused: keyboardFocused
                                    });
                                  }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
                                }
                                        disabled={false}
                                        fullWidth={false}
                                        icon={
                                                  <function _class() {
                                                          _classCallCheck(this, _class);
                                                  
                                                          return _possibleConstructorReturn(this, _Component.apply(this, arguments));
                                                        } />
                                        }
                                        label="Submit User Info"
                                        labelPosition="after"
                                        onClick={[Function]}
                                        primary={false}
                                        secondary={true} />
                    </div>
          </form>
</div>,
      },
      "_renderedNodeType": 0,
      "_rootNodeID": 0,
      "_topLevelWrapper": null,
      "_updateBatchNumber": null,
      "_warnedAboutRefsInRender": false,
    },
    "getRenderOutput": [Function],
    "render": [Function],
  },
  "root": [Circular],
  "unrendered": <class UserForm extends /* istanbul ignore next */_react.Component {

  constructor(props) {
    super(props); /* istanbul ignore next */this.





    componentDidMount = () => {
      const userRoles = this.props.scratch.scope;
      let roles = this.props.fetchSiteById.roles.map(r => {
        let ur = userRoles.find(u => u.id === r.id);
        if (ur) {
          r.checked = true;
        }
        return r;
      });
      this.setState({ roles });
    }; /* istanbul ignore next */this.

    _onCheck = (e, val, field) => {
      this.props.actions.setUserProp({ [field]: val });
    }; /* istanbul ignore next */this.

    _onCancelForm = () => {
      this.props.closeFormFunc();
    }; /* istanbul ignore next */this.

    _onCheckRole = (e, val, field) => {
      const rs = this.state.roles.map(r => {
        if (r.id === field.id) {
          r.checked = val;
        }
        return r;
      });
      this.setState({ roles: rs });
      const userRoles = rs.filter(r => r.checked);
      const ur = userRoles.map(r => ({ id: r.id, label: r.label }));
      this.props.actions.setUserProp({ 'scope': ur });
    }; /* istanbul ignore next */this.

    _onPropChange = field => {
      const val = this.refs[field].input.value;
      this.props.actions.setUserProp({ [field]: val });
    }; /* istanbul ignore next */this.

    _validate = field => {
    }; /* istanbul ignore next */this.

    _onSubmit = () => {/* istanbul ignore next */var _props =
      this.props; /* istanbul ignore next */const createUser = _props.createUser; /* istanbul ignore next */const scratch = _props.scratch; /* istanbul ignore next */const updateUser = _props.updateUser;
      const edit = scratch._id ? true : false;
      const successMsg = edit ? 'User info successfully updated' : 'User successfully created';

      let p;
      if (edit) {
        p = updateUser(scratch);
      } else {
        p = createUser(scratch);
      }
      p.then(res => {
        this.props.closeFormFunc();
        this.props.actions.alertSend({
          dismissAfter: 2000,
          message: successMsg,
          type: 'success' });

      }).catch(err => {
        this.props.actions.alertSend({
          dismissAfter: 5000,
          message: \`ERROR: ${ err.message }\`,
          type: 'danger' });

      });
    };this.state = { roles: [] };}

  render() {

    let email = { error: false }; /* istanbul ignore next */var _props2 =
    this.props; /* istanbul ignore next */const loading = _props2.loading; /* istanbul ignore next */const scratch = _props2.scratch;

    if (loading) {
      return (
        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ __source: { fileName: _jsxFileName, lineNumber: 114 }, __self: this }, /* istanbul ignore next */'Loading...'));

    }
    if (this.props.error) {
      return (
        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ __source: { fileName: _jsxFileName, lineNumber: 119 }, __self: this }, /* istanbul ignore next */'Fatal error occurred: ', this.props.error.message));

    }

    return (
      /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ style: { margin: 'auto' }, __source: { fileName: _jsxFileName, lineNumber: 124 }, __self: this },
        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'form', /* istanbul ignore next */{ onSubmit: () => this._onSubmit(), __source: { fileName: _jsxFileName, lineNumber: 125 }, __self: this },

          /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'legend', /* istanbul ignore next */{ className: 'row', __source: { fileName: _jsxFileName, lineNumber: 127 }, __self: this }, /* istanbul ignore next */'Login'),
          /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'form-row', __source: { fileName: _jsxFileName, lineNumber: 128 }, __self: this },
            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_TextField2.default, /* istanbul ignore next */{
              className: 'form-text-input',
              errorText: email.error && 'This field is required',
              floatingLabelText: 'Email',
              onChange: () => this._onPropChange('email'),
              onBlur: () => this._validate('email'),
              ref: 'email',
              type: 'email',
              value: scratch.email || '', __source: { fileName: _jsxFileName, lineNumber: 129 }, __self: this }),

            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'form-row-spacer', __source: { fileName: _jsxFileName, lineNumber: 139 }, __self: this }),
            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_TextField2.default, /* istanbul ignore next */{
              className: 'form-text-input',
              floatingLabelText: 'Password',
              onChange: () => this._onPropChange('password'),
              onBlur: () => this._validate('password'),
              ref: 'password',
              type: 'password',
              value: scratch.password || '', __source: { fileName: _jsxFileName, lineNumber: 140 }, __self: this })),



          /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'legend', /* istanbul ignore next */{ className: 'row', __source: { fileName: _jsxFileName, lineNumber: 151 }, __self: this }, /* istanbul ignore next */'Contact'),
          /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'form-row', __source: { fileName: _jsxFileName, lineNumber: 152 }, __self: this },
            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_TextField2.default, /* istanbul ignore next */{
              className: 'form-text-input',
              floatingLabelText: 'First Name',
              onChange: () => this._onPropChange('contact.name.first'),
              onBlur: () => this._validate('contact.name.first'),
              ref: 'contact.name.first',
              value: scratch.contact.name.first || '', __source: { fileName: _jsxFileName, lineNumber: 153 }, __self: this }),

            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'form-row-spacer', __source: { fileName: _jsxFileName, lineNumber: 161 }, __self: this }),
            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_TextField2.default, /* istanbul ignore next */{
              className: 'form-text-input',
              floatingLabelText: 'Last Name',
              onChange: () => this._onPropChange('contact.name.last'),
              onBlur: () => this._validate('contact.name.last'),
              ref: 'contact.name.last',
              value: scratch.contact.name.last || '', __source: { fileName: _jsxFileName, lineNumber: 162 }, __self: this })),



          /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'legend', /* istanbul ignore next */{ className: 'row', __source: { fileName: _jsxFileName, lineNumber: 172 }, __self: this }, /* istanbul ignore next */'Roles & Status'),
          /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'form-row', __source: { fileName: _jsxFileName, lineNumber: 173 }, __self: this },
            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ style: { flex: 1 }, __source: { fileName: _jsxFileName, lineNumber: 174 }, __self: this },
              /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_Subheader2.default, /* istanbul ignore next */{ __source: { fileName: _jsxFileName, lineNumber: 175 }, __self: this }, /* istanbul ignore next */'Status'),
              /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_Checkbox2.default, /* istanbul ignore next */{
                className: 'form-text-input',
                label: 'Active',
                labelPosition: 'right',
                onBlur: () => this._validate('active'),
                onCheck: (e, val) => this._onCheck(e, val, 'active'),
                ref: 'active',
                checked: scratch.active, __source: { fileName: _jsxFileName, lineNumber: 176 }, __self: this })),


            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ style: { flex: 1.25 }, __source: { fileName: _jsxFileName, lineNumber: 186 }, __self: this },
              /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_Subheader2.default, /* istanbul ignore next */{ __source: { fileName: _jsxFileName, lineNumber: 187 }, __self: this }, /* istanbul ignore next */'Roles'),
              /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_List.List, /* istanbul ignore next */{ __source: { fileName: _jsxFileName, lineNumber: 188 }, __self: this },
                this.state.roles.length && this.state.roles.map(r => {
                  return (
                    /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_Checkbox2.default, /* istanbul ignore next */{
                      key: r.id,
                      label: /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ style: { width: 130 }, __source: { fileName: _jsxFileName, lineNumber: 193 }, __self: this }, r.label),
                      labelPosition: 'right',
                      onCheck: (e, val) => this._onCheckRole(e, val, r),
                      defaultChecked: r.checked,
                      value: r.id,
                      style: { marginBottom: 10 }, __source: { fileName: _jsxFileName, lineNumber: 191 }, __self: this }));


                })))),




          /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'form-row', style: { justifyContent: 'space-around' }, __source: { fileName: _jsxFileName, lineNumber: 206 }, __self: this },
            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_RaisedButton2.default, /* istanbul ignore next */{
              icon: /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_clear2.default, /* istanbul ignore next */{ __source: { fileName: _jsxFileName, lineNumber: 208 }, __self: this }),
              label: 'Cancel',
              onClick: () => this._onCancelForm(), __source: { fileName: _jsxFileName, lineNumber: 207 }, __self: this }),

            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_RaisedButton2.default, /* istanbul ignore next */{
              icon: /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_done2.default, /* istanbul ignore next */{ __source: { fileName: _jsxFileName, lineNumber: 213 }, __self: this }),
              label: 'Submit User Info',
              onClick: () => this._onSubmit(),
              secondary: true, __source: { fileName: _jsxFileName, lineNumber: 212 }, __self: this })))));





  }}
    actions={
        Object {
            "setUserProp": [Function],
          }
    }
    scratch={
        Object {
            "active": false,
            "contact": Object {
              "_id": null,
              "email": null,
              "name": Object {
                "first": null,
                "last": null,
              },
            },
            "domainID": null,
            "email": null,
            "password": null,
            "scope": Array [],
          }
    } />,
}
`;
